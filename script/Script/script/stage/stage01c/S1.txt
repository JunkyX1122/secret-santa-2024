#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Dark Blade &quot;Death Dagger&quot;"]
#Text["S1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 85;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(85);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_GRANDIS, 20);
	magiccircle(objEnemy,1);
	RecordAttackHistory("01c", "S1", DIFFICULTY_NAMES[DIFFICULTY]);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Dark Blade &quot;Death Dagger&quot;","", LENEN, 128,0,0);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	while(!Obj_IsDeleted(objEnemy))
	{
		let tot = 20;
		SE_PlayLen(charge0,60);
		ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2 - 200*bit + rand(20,-20), 100 + rand(20,-20), 60, LERP_SMOOTH);
		wait(60);
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(charge1,60);
			ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2 + 200*bit + rand(20,-20), 250 + rand(20,-20), 60, LERP_SMOOTH);
		}
		ascent(i in 0..tot)
		{
			if(!Obj_IsDeleted(objEnemy)) 
			{
				SE_PlayLen(shot1,60);
				GrandisKnives(-90 - 90*bit + 180/(tot-1)*i*bit,90 + 20*bit - 40/(tot-1)*i*bit, bit,false);
				wait(3);
			}
		}
		let ang = -90;
		wait(30);
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(charge1,60);
			ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2+rand(10,50)*bit, 200, 60, LERP_SMOOTH);
		}
		ascent(i in 0..tot)
		{
			if(!Obj_IsDeleted(objEnemy)) 
			{
				SE_PlayLen(shot1,60);
				GrandisKnives(ang - 360/(tot-1)*i*bit ,ang - 360/(tot-1)*i*bit, bit,false);
				wait(3);
			}
		}
		ang = 90;
		wait(30);
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(charge1,60);
		}
		tot = 22;
		ascent(i in 0..tot)
		{
			if(!Obj_IsDeleted(objEnemy)) 
			{
				SE_PlayLen(shot1,60);
				GrandisKnives(ang +90*bit + 180/(tot-1)*i*bit ,ang +90*bit - (360+180)/(tot-1)*i*bit, bit,false);
				if(i%4==0)
				{
					GrandisKnives(ang +90*bit - 180/(tot-1)*i*bit ,ang +90*bit - (360+180)/(tot-1)*i*bit, bit,true);
				}
				wait(3);
			}
		}
		wait(240);
		bit*=-1;
		ObjEnemy_SetDamageRate(objEnemy, (0.085/3)/1.5, (0.085/3)/3);
	}
}

task GrandisKnives(ang,ang2,bit,aimPlayer)
{
	let t = 80;
	let obj = ShotA2(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),3,ang,-3/t,0,459,418,20,2,BLEND_ALPHA,false);
	ObjShot_SetAutoDelete(obj, false);
	ObjShot_SetSpellResist(obj, true);
	wait(20);
	if(!Obj_IsDeleted(obj))
	{
		let laser = CreateStraightLaserA1(ObjMove_GetX(obj), ObjMove_GetY(obj),ang2,810*2,7,0,aimPlayer ? 3 : 1,9000);
		ObjRender_SetBlendType(laser,BLEND_ADD_ARGB);
		ObjShot_SetAutoDelete(laser,false);
		ObjStLaser_SetSource(laser,false);
		ObjRender_SetAlpha(laser,128);
		ascent(i in 0..t)
		{
			if(!Obj_IsDeleted(objEnemy)&&!Obj_IsDeleted(obj))
			{
				ObjMove_SetPosition(laser, ObjMove_GetX(obj), ObjMove_GetY(obj));
				if(aimPlayer)
				{
					ang2 = GetAngleToPlayer(obj);
				}
				ObjStLaser_SetAngle(laser,ang2);
				ObjRender_SetAngleZ(obj,(360*3)*(cos(90-90/(t-1)*i*bit)) + ang2 - ang);
				ObjRender_SetAlpha(laser,128/(t-1)*i);
				yield;
			}
		}
		
		if(!Obj_IsDeleted(objEnemy) && !Obj_IsDeleted(obj))
		{
			SE_PlayLen(chime1,60);
			let x = ObjMove_GetX(obj);
			let y = ObjMove_GetY(obj);
			ObjShot_SetDeleteFrameA6(obj, 0, 2);
			let alph = 128;
			let tot2 = 3;
			let sprd = 40;
			ascent(i in 0..5)
			{
				let obj = ShotA1(x,y,1,ang2-sprd*bit + (sprd*2)/(tot2-1)*i*bit,459,418,20,2,BLEND_ALPHA,false);
			}
			ascent(i in 0..20)
			{
				if(!Obj_IsDeleted(objEnemy)) 
				{
					let spdScl = aimPlayer ? 0.6 : 1;
					SE_PlayLen(Shot1,60);
					let shot = ShotA1(x, y, (8-3/19*i)*spdScl, ang2, 465, 417, 5, 2, BLEND_ALPHA, false);
					loop(3)
					{
						ObjRender_SetAlpha(laser,alph);
						alph-=128/(20*3);
						yield;
					}
				}
			}
		}
		if(!Obj_IsDeleted(laser))
		{
			Obj_Delete(laser);
		}
	
	}
}
task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

