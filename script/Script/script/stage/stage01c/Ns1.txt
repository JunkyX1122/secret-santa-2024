#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns1"]
#Text["Ns1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2,140 );
	renderYuuma(objEnemy);

	end;
	SetCommonData("SpellCardBG1",false);
	
}
@MainLoop
{
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	
	LaserPassive(bit);
	KnifeBurst(bit);
}

task LaserPassive(bit)
{
	let ang1 = 0-90*bit;
	let ang2 = 180-90*bit;
	let adda = 7.43543;
	while(!Obj_IsDeleted(objEnemy))
	{
		Laser(ObjMove_GetX(objEnemy) + 150, ObjMove_GetY(objEnemy), 0,ang1);
		Laser(ObjMove_GetX(objEnemy) - 150, ObjMove_GetY(objEnemy), 0,ang2);
		
		ang1+=adda;
		ang2-=adda;
		wait(4);
	}
}

task KnifeBurst(bit)
{
	while(!Obj_IsDeleted(objEnemy))
	{
		let tot = 20;
		let ang = GetAngleToPlayer(objEnemy);
		ascent(i in 0..20)
		{
			let spd = 2+10/19*i;
			ascent(o in 0..tot)
			{
				let obj = ShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 
			}
		}
		yield;
	}
}


task Laser(x,y,del,angle)
{
	wait(del);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(laser0,50);
	
	//let obj1 = CreateLooseLaserA1(ObjMove_GetX(famz)+20*cos(angleT),ObjMove_GetY(famz)+20*sin(angleT), 4, angleT, 160, 30, 422, 10);
		let obj2 = CreateLooseLaserA1(x,y, 10, angle, 200, 9, 293, 10);
		ObjLaser_SetInvalidLength(obj2, 0, 0.2);
		let obj3 = CreateShotA1(x,y, 10, angle, 436, 12);
		
		ObjMove_SetMaxSpeed(obj2,4);
		ObjMove_SetMaxSpeed(obj3,4);
		ObjMove_SetAcceleration(obj2,-0.4);
		ObjMove_SetAcceleration(obj3,-0.4);
		ObjRender_SetBlendType(obj3,BLEND_ADD_ARGB);
		//ObjRender_SetAlpha(obj1,196);
		//ObjShot_SetIntersectionEnable(obj1, false);
		ObjShot_SetIntersectionEnable(obj3, false);
		LaserSource(ObjMove_GetX(obj3),ObjMove_GetY(obj3),444,10,1,10,50);
	}
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

