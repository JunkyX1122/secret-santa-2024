#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Thievery &quot;Pilfer&quot;"]
#Text["S2"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 85;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(85);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_GRANDIS, 20);
	magiccircle(objEnemy,1);
	ShrinkCircle();
	RecordAttackHistory("01c", "S2", DIFFICULTY_NAMES[DIFFICULTY]);
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Thievery &quot;Pilfer&quot;","", LENEN, 128,0,0);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	SetCommonData("BossName", "Grandis Ezekiel");
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	while(!Obj_IsDeleted(objEnemy))
	{
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2 + (GetStgFrameWidth/2+100)*bit, ObjMove_GetY(objEnemy), 40);
		wait(60);
		let y = GetPlayerY - 100;
		ascent(i in 0..8)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				GrandisDashAttack(y - (y - 60)/7*i, bit, 0, 1);
				wait(11);
			}
			bit*=-1;
		}
		ascent(i in 0..8)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				GrandisDashAttack(60 + (175)/7*i, bit, 1, 1.5-0.2*i);
				wait(11);
			}
			bit*=-1;
		}
		wait(ATTACK_DELAY);
		ObjMove_SetDestAtFrameWeight(objEnemy, GetPlayerX, 150, 40);
		bit*=-1;
		wait(120);
		ObjEnemy_SetDamageRate(objEnemy, (0.13/3)/1.5, (0.13/3)/3);
	}
}
const ATTACK_DELAY = 80;
task GrandisDashAttack(y, bit, type, spdScl)
{
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(LaserDelLong,60);
		GrandisDash(y, bit, ATTACK_DELAY);
	}
	wait(ATTACK_DELAY);
	
	let totalT = 10;
	let SHTID = [324,325];
	let waiter = 1;
	let t = round(totalT / waiter);
	let randOffset = rand(75, 150);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(slash,60);
		ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2 + (GetStgFrameWidth/2 + 100)*bit + randOffset*bit, y);
		ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2 - (GetStgFrameWidth/2 + 100)*bit + randOffset*bit, y, totalT);
	}
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ascent(o in 0..[5, 3][type])
			{
				let spd = (3+o*[1.5, 0.5][type])*spdScl;
				let sprd = 20+70/4*o;
				let acclTime = 120;
				let id = SHTID[(i)%2];
				
				ascent(j in 0..2)
				{
					let ang = GetAngleToPlayer(objEnemy) + 180*j;
					if(type==1)
					{
						ang = 90 + 180*j;
					}
					let obj = ShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, ang, spd/acclTime, spd, id, id, 5, 2, BLEND_ALPHA, false);
				}
			}
			wait(waiter);
		}
	}
	wait(20 - t);
}


task GrandisDash(yS, bit, waiter)
{
	ascent(i in 0..4)
	{
		let sprd = 40;
		ascent(o in 0..2)
		{
			if(i>0 || o == 0)
			{
				let lasExpand = CreateStraightLaserA1(GetStgFrameWidth/2 + (GetStgFrameWidth/2+10)*bit, yS, 90, 0, 15, 999, 3, 99999);
				ObjShot_SetIntersectionEnable(lasExpand, false);
				ObjStLaser_SetSource(lasExpand, 0);
				Length(lasExpand, 90+90*bit, 90+90*bit + (sprd*i)*bit * [1,-1][o]);
			}
		}
	}
	wait(waiter);
	task Length(obj, ang1, ang2)
	{
		ObjRender_SetAlpha(obj, 128);
		ObjLaser_SetItemDistance(obj, 1000);
		ascent(i in 0..waiter)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				ObjLaser_SetLength(obj, 999/(waiter-1)*i);
				ObjStLaser_SetAngle(obj, Interpolate_Decelerate(ang2, ang1, 1/(waiter-1)*i));
				yield;
			}
		}
		let t = 10;
		ascent(i in 0..t)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				ObjRender_SetAlpha(obj, 128 - 128/t*i);
				yield;
			}
		}
		Obj_Delete(obj);
	}
}


task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}

task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	ascent(o in 0..15)
	{
		SE_PlayLen(BossDead,80);
		ExplodeFeathers(round(rand(0,4)),ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1,10,10);
		loop(6)
		{
			ObjEnemy_SetLife(objEnemy, 0);
			let shake = 4;
			Set2DCameraFocusX(Get2DCameraX + rand(-shake, shake));
			Set2DCameraFocusY(Get2DCameraY + rand(-shake, shake));
			yield;
			Reset2DCamera;
		}
	}
	ascent(o in 0..2)
	{
		ExplodeFeathers(round(rand(0,4)),ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1,25,100);
	
		ascent(i in 0..3)
		{
			let bit = 1-2*round(rand(0,1));
			let apa = (rand(0,128)+64)/3;
			ChargeExplode(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1,0,4+i,bit,[apa,apa,apa],1,BLEND_ADD_ARGB,5,90,79);
			ChargeExplode(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1,1,1+i,bit,[apa,apa,apa],1,BLEND_ADD_ARGB,5,90,79);
		}
		ScreenShake(30,9); 
		SE_PlayLen(BossEnd,80);
		StartSlow(TARGET_ALL,20);
		loop(30/6)
		{

			wait(6);
		}
	}
	loop(1)
	{
		ExplodeFeathers(round(rand(0,4)),ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1,25,100);
	
		ascent(i in 0..3)
		{
			let bit = 1-2*round(rand(0,1));
			let apa = (rand(0,128)+64)/3;
			ChargeExplode(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1,0,4+i,bit,[apa,apa,apa],1,BLEND_ADD_ARGB,5,90,79);
			ChargeExplode(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1,1,1+i,bit,[apa,apa,apa],1,BLEND_ADD_ARGB,5,90,79);
		}
	}
	ScreenShake(190,12); 
	StopSlow(TARGET_ALL);
	SE_PlayLen(BossEnd,80);
	SE_PlayLen(BossSpell,100);
	//FlasherZ(150);
	SE_PlayLen(BossDead,80);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	loop(20)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	wait(100);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

