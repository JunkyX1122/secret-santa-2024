#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns2"]
#Text["Ns2"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 80*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(80);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	renderYuuma(objEnemy);

	end;
	SetCommonData("SpellCardBG1",false);
	
}
@MainLoop
{
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{

}
task PortalSlash(x,y,ang,d,t,warn,closT, xScl, yScl)
{
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(charge0,60);
	}
	ascent(i in 0..d)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			if(i%5==0)
			{
				CreateLine(x,y,ang, PORTAL_HEIGHT*yScl,20);
				CreateLine(x,y,ang,-PORTAL_HEIGHT*yScl,20);
			}
			yield;
		}
	}
	PortalSlashHitbox(x, y, ang, PORTAL_HEIGHT*yScl, 10);
	PortalSlashEffect(x, y, ang, PORTAL_HEIGHT*yScl, 60);
}

task PortalSlashHitbox(x, y, ang, width, t)
{
	let objspell = CreateShotA1(x,y,0,0,1,0);
	ObjRender_SetAlpha(objspell,0);
	ObjShot_SetSpellResist(objspell,true);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let scl = sin(90/(t-1)*i);
			let dis = 1024;
			ObjShot_SetIntersectionLine(objspell,x-dis*cos(ang),y-dis*sin(ang),x+dis*cos(ang),y+dis*sin(ang), width*scl*2);
			yield;
		}
	}
	Obj_Delete(objspell);
}

task PortalSlashEffect(x, y, ang, width, t)
{
	let objs = [];
	ascent(o in 0..3)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, IMG_PIXEL);
		Obj_SetRenderPriorityI(obj, 55);
		let www = o == 2 ? GetStgFrameWidth+50 : 1024;
		let hhh = o == 2 ? GetStgFrameHeight+50 : width * 2;
		ObjSprite2D_SetSourceRect(obj,0, 0, www, hhh);
		ObjSprite2D_SetDestRect(obj,0, 0, www, hhh);
		ObjSprite2D_SetDestCenter(obj);
		if(o==2)
		{
			x = GetStgFrameWidth/2;
			y = GetStgFrameHeight/2;
			ang = 0;
		}
		ObjRender_SetPosition(obj, x, y,0);
		ObjRender_SetAngleZ(obj, ang);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		
		objs ~= [obj];
	}
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let sclP9 = (1 - (1 - 1/(t-1)*i)^9);
			let sclP2 = (1 - (1 - 1/(t-1)*i)^2);
			ObjRender_SetAlpha(objs[0],255-255*sclP2);
			ObjRender_SetScaleY(objs[0],sclP9);
			
			ObjRender_SetAlpha(objs[1],64-64/t*i);
			ObjRender_SetScaleY(objs[1],2 - 1/t*i);
			
			ObjRender_SetAlpha(objs[2],32-32/t*i);
			
			yield;
		}
	}
	ascent(o in 0..3)
	{
		Obj_Delete(objs[o]);
	}
}

task CreateLine(x,y,ang,d,t)
{
	let objLine = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objLine,PRIMITIVE_LINESTRIP);
	ObjPrim_SetVertexCount(objLine, 2);
	Obj_SetRenderPriorityI(objLine,38);
	ObjPrim_SetVertexPosition(objLine , 0, -1024, 0,0);
	ObjPrim_SetVertexPosition(objLine , 1,  1024, 0,0);
	ObjRender_SetAngleZ(objLine,ang);
	ObjRender_SetPosition(objLine, x, y, 0);
	
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let scl = sin(90/(t-1)*i);
			let dis = d*scl * 1.5;
			let ang2 = ang + 90;
			ObjRender_SetAlpha(objLine,255-255*scl);
			ObjRender_SetPosition(objLine, x + dis * cos(ang2), y + dis * sin(ang2), 0);
			yield;
		}
	}
	Obj_Delete(objLine);
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

