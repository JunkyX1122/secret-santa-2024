#include "./../../lib/lib_stageall.txt"
let GCSD=GetCurrentScriptDirectory();
let bSpell = false;
let current = GetCurrentScriptDirectory();
let fo = 0;
let adder = 0;

@Initialize
{
	TCallBg;
	//ResetBG;


}

@MainLoop
{

	yield;
}
let counter = 0;
task TCallBg
{
	LoadTexture(BGIMG1);
	//FlatColor;
	BlackHole(GetScreenWidth/2,GetScreenHeight/2-125);
	StarField();
	SpellBG;
}
let BGIMG1 = GetCurrentScriptDirectory~"./../../../img/background/BG1/01.png";
task FlatColor
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 22); //描画優先度を設定
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory~"./../../../img/background/BG1/pixel.png"); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,32,32,32);
	
	while(true)
	{
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}

task SpellBG
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj, 22); 
	ObjPrim_SetTexture(obj, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj,1.5,1.5,0);
	ObjRender_SetAngleZ(obj,-90);
	//ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj2, 22); 
	ObjPrim_SetTexture(obj2, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj2, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj2, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj2);
	ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj2,-1.5,1.5,0);
	ObjRender_SetAngleZ(obj2,-90);
	//ObjRender_SetBlendType(obj2,BLEND_ADD_ARGB);
	
	let vertexCount = 512;
	let obj3 = ObjPrim_Create(OBJ_PRIMITIVE_2D); 
	ObjPrim_SetPrimitiveType(obj3,PRIMITIVE_TRIANGLESTRIP);
	Obj_SetRenderPriorityI(obj3, 23); 
	ObjPrim_SetVertexCount(obj3,vertexCount);
	ObjPrim_SetTexture(obj3, IMG_YUUMA_BG2); 
	ObjRender_SetBlendType(obj3,BLEND_SUBTRACT);
	ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	
	let objRings = [];
	ascent(i in 0..3)
	{
		let objR = ObjPrim_Create(OBJ_SPRITE_2D); 
		objRings ~= [objR];
		Obj_SetRenderPriorityI(objRings[i], 24); 
		ObjPrim_SetTexture(objRings[i], IMG_YUUMA_BG3); 
		ObjSprite2D_SetSourceRect(objRings[i], 0, 0,1024, 1024);
		ObjSprite2D_SetDestRect(objRings[i], 0, 0, 1024, 1024);
		ObjSprite2D_SetDestCenter(objRings[i]);
		ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetBlendType(objRings[i],BLEND_SUBTRACT);
		
	}
	ObjRender_SetScale(objRings[0],1);
	ObjRender_SetScale(objRings[1],0.72);
	ObjRender_SetScale(objRings[2],0.5185);
	
	ascent(i in 0..vertexCount/2)
	{
		let index = i*2;
		let angle = 360/((vertexCount/2)-1)*i+90;
		let dis = 550;
		ObjPrim_SetVertexPosition(obj3,index,0,0,0);
		ObjPrim_SetVertexPosition(obj3,index+1,dis*cos(angle),dis*sin(angle),0);
		ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, 0);
		ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512);
		ObjPrim_SetVertexAlpha(obj3,index,0);
		ObjPrim_SetVertexColor(obj3,index,0,0,0);
		
	}
	
	let alpha1 = 0;
	let c1 = 0;
	let c2 = 0;
	let c3 = 0;
	let tm1 = rand(0.5,1);
	let tm2 = rand(0.5,1);
	let tv1 = tm1;
	let tv2 = tm2;
	
	while(true)
	{
		if(c3%180 == 0)
		{
			tv1 = rand(0.5,2)/2;
			tv2 = rand(0.5,2)/2;
		}
		tm1 = tm1 * 0.999 + tv1 * 0.001;
		tm2 = tm2 * 0.999 + tv2 * 0.001;
		
		ObjRender_SetAlpha(obj,(128+128*sin(c3/3))*alpha1);
		ObjRender_SetAlpha(obj2,(128+128*sin(c3/3+180))*alpha1);
		ObjRender_SetAlpha(obj3,255*alpha1);
		
		ascent(i in 0..3)
		{
			ObjRender_SetAlpha(objRings[i],(64-32/2*i)*alpha1);
			ObjRender_SetAngleZ(objRings[i],c3*(1-2*(i%2))*0.025);
		}
		
	
		ObjSprite2D_SetSourceRect(obj, 0, 0+c1,512, 512+c1);
		ObjSprite2D_SetSourceRect(obj2, 0, 0-c2,512, 512-c2);
		ascent(i in 0..vertexCount/2)
		{
			let index = i*2;
			ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, c3*0.5);
			ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512+c3*0.5);
		}
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
		if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		c1+=tm1;
		c2+=tm2;
		c3++;
		yield;
	}

	
}


let renderBase = 8;
let objIniCirc = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_FADERING, [0,0,128,128], BLEND_SUBTRACT, (renderBase-1)*0.01);
let objBlackCloud = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_SMOKE, [0,0,512,512], BLEND_SUBTRACT, (renderBase-2)*0.01);
let objPurpleCloud = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_SMOKE, [0,0,512,512], BLEND_ADD_ARGB, (renderBase-1)*0.01);
let objPulseIn = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_SAURA2, [0,0,256,256], BLEND_SUBTRACT, (renderBase-3)*0.01);
let objStarz = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_STAR, [0,0,128,128], BLEND_ADD_ARGB, (renderBase)*0.01);
task BlackHole(x,y)
{
	
	let GLOBALALPHA = 0.35;
	
	let ccc =0;
	let ang2 = rand(0,360);
	let angt = 0;
	let shake = 7;
	let angS = 0;
	let PITCH = 0;
	let spntot = -2;
	let timescale = 12;
	let xScl = 8;
	let yScl = 3;
	let spnScl = 48;
	loop
	{
		let ang = rand(0,360);
		ascent(i in 0..5)
		{
			//BlackCloud(ang+360/5*i);
		}
		ang = rand(0,360);
		ascent(i in 0..9)
		{
			PurpleCloud(ang+360/9*i);
		}
		if(false)
		{
			let bt = round(rand(1,5));
			loop(bt)
			{
				Starz(ang2+rand(10,-10),rand(4,4.5)/5,1);
				ang2+=360/8;
			}
			bt = round(rand(1,5));
			ang2+=180/8;
			loop(bt)
			{
				Starz(ang2+rand(10,-10),0,0.4);
				ang2+=360/8;
			}
			ang2+=180/8;
			//ang2=rand(7,9);
		}
		if(ccc%2==0)
		{
			PulseIn;
		}
		if(ccc%3==0)
		{
			IniCirc([255,255,0],0.1*2,renderBase-1,0.1);
			IniCirc([0,255,0],0.12*2,renderBase-1,0.1);
		}
		ccc++;
		
		loop(5)
		{

			yield;
		}
	}
	GLOBALALPHA = 0;
	task IniCirc(col,sclad,rn,as)
	{
		let scl = 0;
		let alp = 255;
		let t = 120*timescale;
		loop(t)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetAlpha(objIniCirc,alp*as*GLOBALALPHA);
				ObjParticleList_SetPosition(objIniCirc,x,y,0);
				ObjParticleList_SetScale(objIniCirc,scl,scl,0);
				ObjParticleList_SetColor(objIniCirc,col[0],col[1],col[2]);
				ObjParticleList_AddInstance(objIniCirc);
				scl-=sclad;
				alp-=255/t;
				yield;
			}
		}
		

	}
	task BlackCloud(ang)
	{
		let randZ = rand(0,360);
		let dis = 150;
		let amt = 0;
		let alpha = 0;
		let randAd = rand(4,7)/(spnScl);
		let scl = 2;
		
		let t1 = 30*timescale;
		let t2 = 40*timescale;
		let t3 = 5*timescale;
		let tscl = 15*timescale;
		loop(t1)
		{
			if(GLOBALALPHA>0)
			{

				ObjParticleList_SetAlpha(objBlackCloud,alpha*GLOBALALPHA);
				ObjParticleList_SetPosition(objBlackCloud,x+dis*cos(ang)*xScl,y+dis*sin(ang)*yScl,0);
				ObjParticleList_SetScale(objBlackCloud,scl,scl,0);
				ObjParticleList_SetAngleZ(objBlackCloud,randAd);
				ObjParticleList_AddInstance(objBlackCloud);
				
				ang+=randAd;
				dis-=100/t1*amt;
				amt+=2/t1;
				alpha+=255/(t1+t2);
				if(scl>0.6)
				{
					scl-=0.6/tscl;
				}
				yield;
			}
		}
		loop(t2)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetAlpha(objBlackCloud,alpha*GLOBALALPHA);
				ObjParticleList_SetPosition(objBlackCloud,x+dis*cos(ang)*xScl,y+dis*sin(ang)*yScl,0);
				ObjParticleList_SetScale(objBlackCloud,scl,scl,0);
				ObjParticleList_SetAngleZ(objBlackCloud,randAd);
				ObjParticleList_AddInstance(objBlackCloud);
				ang+=randAd;
				dis-=50/t2*amt;
				amt-=2/t2;
				if(scl>0.6)
				{
					scl-=0.6/tscl;
				}
				yield;
			}
		}
		loop(t3)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetAlpha(objBlackCloud,alpha*GLOBALALPHA);
				ObjParticleList_SetPosition(objBlackCloud,x+dis*cos(ang)*xScl,y+dis*sin(ang)*yScl,0);
				ObjParticleList_SetScale(objBlackCloud,scl,scl,0);
				ObjParticleList_SetAngleZ(objBlackCloud,randAd);
				ObjParticleList_AddInstance(objBlackCloud);
				alpha-=255/t3;
				ang+=randAd;
				if(scl>0.6)
				{
					scl-=0.6/tscl;
				}
				yield;
			}
		}
	}
	task PurpleCloud(ang)
	{
		let angleX = rand(-20,20);
		let angleY = rand(-20,20);
		let angleZ = rand(0,360);
		let col = [rand(160,255)*0.80,rand(0,64),rand(200,255)];
		
		let dis = 125;
		let amt = 0;
		let alpha = 0;
		let randAd = rand(4,7)/(spnScl);
		let scl = 1;
		
		let t1 = 30*timescale;
		let t2 = 40*timescale;
		let t3 = 5*timescale;
		let tscl = 9*timescale;
		loop(t1)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetColor(objPurpleCloud,col[0],col[1],col[2]);
				ObjParticleList_SetAlpha(objPurpleCloud,alpha*GLOBALALPHA);
				ObjParticleList_SetPosition(objPurpleCloud,x+dis*cos(ang)*xScl,y+dis*sin(ang)*yScl,0);
				ObjParticleList_SetScale(objPurpleCloud,scl,scl,0);
				ObjParticleList_SetAngleX(objPurpleCloud,angleX);
				ObjParticleList_SetAngleY(objPurpleCloud,angleY);
				ObjParticleList_SetAngleZ(objPurpleCloud,angleZ);
				ObjParticleList_AddInstance(objPurpleCloud);
				
				
				ang+=randAd;
				dis-=75/t1*amt;
				amt+=2/t1;
				alpha+=255/(t1+t2);
				if(scl>0.2)
				{
					scl-=0.2/tscl;
				}
				yield;
			}
		}
		loop(t2)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetColor(objPurpleCloud,col[0],col[1],col[2]);
				ObjParticleList_SetAlpha(objPurpleCloud,alpha*GLOBALALPHA);
				ObjParticleList_SetPosition(objPurpleCloud,x+dis*cos(ang)*xScl,y+dis*sin(ang)*yScl,0);
				ObjParticleList_SetScale(objPurpleCloud,scl,scl,0);
				ObjParticleList_SetAngleX(objPurpleCloud,angleX);
				ObjParticleList_SetAngleY(objPurpleCloud,angleY);
				ObjParticleList_SetAngleZ(objPurpleCloud,angleZ);
				ObjParticleList_AddInstance(objPurpleCloud);
				dis-=50/t2*amt;
				amt-=2/t2;
				ang+=randAd;
				if(scl>0.2)
				{
					scl-=0.2/tscl;
				}
				yield;
			}
		}
		loop(t3)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetColor(objPurpleCloud,col[0],col[1],col[2]);
				ObjParticleList_SetAlpha(objPurpleCloud,alpha*GLOBALALPHA);
				ObjParticleList_SetPosition(objPurpleCloud,x+dis*cos(ang)*xScl,y+dis*sin(ang)*yScl,0);
				ObjParticleList_SetScale(objPurpleCloud,scl,scl,0);
				ObjParticleList_SetAngleX(objPurpleCloud,angleX);
				ObjParticleList_SetAngleY(objPurpleCloud,angleY);
				ObjParticleList_SetAngleZ(objPurpleCloud,angleZ);
				ObjParticleList_AddInstance(objPurpleCloud);
				alpha-=255/t3;
				ang+=randAd;
				if(scl>0.2)
				{
					scl-=0.2/tscl;
				}
				yield;
			}
		}
	}
	task PulseIn
	{
		let scl = 0;
		let alp = 255;
		let rn = rand(1,3);
		let angleZ = rand(0,360);
		let t1 = 120*timescale;
		let t2 = 4*timescale;
		loop(t1)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetAlpha(objPulseIn,alp/3*GLOBALALPHA);
				ObjParticleList_SetPosition(objPulseIn,x,y,0);
				ObjParticleList_SetScale(objPulseIn,scl,scl,0);
				ObjParticleList_SetAngleZ(objPulseIn,angleZ);
				ObjParticleList_AddInstance(objPulseIn);
				scl+=0.1/t2;
				alp-=255/t1;
				yield;
			}
		}
	}
	task Starz(ang,randAd,ts)
	{
		
		let angleZ = rand(0,360);
		let dis = rand(240,290);
		let str = dis-rand(0,15);
		let amt = 2;
		let alpha = 255;
		let scl = 0;
		let sclm = rand(0.4,0.6)*0.9;
		let ranspn = rand(4,-4);
		let clT = rand(0,360);
		let clA = rand(3,15);
		
		let t1 = 45*timescale;
		let t2 = 15*timescale;
		let tscl = 30*timescale;
		loop(t1)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetAlpha(objStarz,255*GLOBALALPHA);
				ObjParticleList_SetPosition(objStarz,x+dis*cos(ang),y+dis*sin(ang),0);
				ObjParticleList_SetScale(objStarz,scl*ts,scl*ts,0);
				ObjParticleList_SetAngleZ(objStarz,angleZ);
				ObjParticleList_SetColor(objStarz,255,255,128+128*sin(clT));
				ObjParticleList_AddInstance(objStarz);
				angleZ+=ranspn;
				clT+=clA;
				ang+=randAd*amt;
				dis-=str/(t1+t2);
				amt-=2/(t1+t2);
				
				if(scl<sclm)
				{
					scl+=sclm/tscl;
				}
				yield;
			}
		}
		
		loop(t2)
		{
			if(GLOBALALPHA>0)
			{
				ObjParticleList_SetAlpha(objStarz,255*GLOBALALPHA);
				ObjParticleList_SetPosition(objStarz,x+dis*cos(ang),y+dis*sin(ang),0);
				ObjParticleList_SetScale(objStarz,scl*ts,scl*ts,0);
				ObjParticleList_SetAngleZ(objStarz,angleZ);
				ObjParticleList_SetColor(objStarz,255,255,128+128*sin(clT));
				ObjParticleList_AddInstance(objStarz);
				angleZ+=ranspn;
				clT+=clA;
				ang+=randAd*amt;
				dis-=str/(t1+t2);
				amt-=2/(t1+t2);
				alpha-=255/t2;
				if(scl>0)
				{
					scl-=sclm/t2;
				}
				yield;
			}
		}
	
	}
}

task StarField
{
	let StarBool = true;
	function GetDistance(x1, y1, x2, y2)
	{
		return ((x1-x2)^2 + (y1-y2)^2)^0.5;
	}
	let AM = 0;
	let gB = 0;
	let FOCUSX = GetScreenWidth/2;
	let FOCUSY = GetScreenHeight/2-125;
	let MAX = GetScreenWidth*2;
	let objStar = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_PIXEL, [0,0,1,1], BLEND_ALPHA, 0.09);
	loop(300)
	{
		Star(rand(-GetScreenWidth,GetScreenWidth)/2,rand(-GetScreenWidth,GetScreenWidth)/2,rand(0,MAX),200,400);
	}
	loop(300)
	{
		Star(rand(-GetScreenWidth,GetScreenWidth)/2,rand(-GetScreenWidth,GetScreenWidth)/2,rand(0,MAX),300,MAX);
	}
	loop
	{
		gB+=0.025;
		AM=1;
		yield;
	}
	task Star(x,y,z,minC,maxC)
	{

		let alpha = 128;
		let pZ = z;
		let sx = GetScreenWidth/2*x/pZ;
		let sy = GetScreenWidth/2*y/pZ;
		let r = 0;
		let alf = 0;
		let tots = 0;
		let scl = 0.25;
		while(StarBool==true)
		{
			
			sx = FOCUSX+(GetScreenWidth/2)*x/pZ;
			sy = FOCUSY+(GetScreenWidth/2)*y/pZ;
			r = scl*(MAX/pZ);
			
			let angZ = atan2(FOCUSY-sy,FOCUSX-sx)+gB;
			let amount = GetDistance(FOCUSX, FOCUSY,sx, sy);
			
			sx = FOCUSX+(amount)*cos(angZ);
			sy = FOCUSY+(amount)*sin(angZ);
					

			ObjParticleList_SetAlpha(objStar,alpha*r*tots);
			ObjParticleList_SetPosition(objStar,sx,sy,0);
			ObjParticleList_SetScale(objStar,r,r,0);
			ObjParticleList_AddInstance(objStar);
			if(tots<1)
			{
				tots+=1/40;
			}
			//CreateFade(sx,sy,r,64*r);
			pZ-=AM;
			if(pZ<0)
			{
				pZ = MAX;
				let randDisz = rand(minC,maxC);
				let angZZ = rand(0,360);
				x = randDisz*cos(angZZ)/2;
				y = randDisz*sin(angZZ)/2;
			}
			if(pZ>MAX)
			{
				pZ = 0;
				/*
				x = rand(-GetScreenWidth,GetScreenWidth)/2;
				y = rand(-GetScreenWidth,GetScreenWidth)/2;*/
			}
			yield;
		}
		
	
	}
}
