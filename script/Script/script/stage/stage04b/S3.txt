#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Lance Art &quot;Cross Slash&quot;"]
#Text["S3"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"
#include "./GrandisPortals.txt"

let objEnemy;
let objEnemy2 = CreateFamiliar;
let objEnemy3 = CreateFamiliar;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;

let TIME_MAX = 38;
let HEALTH_MAX = 225/3;
let TIME = TIME_MAX;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(HEALTH_MAX);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(TIME_MAX);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	
	ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2, GetStgFrameHeight/2);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	//renderNitoriDS(objEnemy); 



	ObjMove_SetPosition(objEnemy2, GetCommonData("objEnemy2_Position", [0,0])[0], GetCommonData("objEnemy2_Position", [0,0])[1]);
	renderBossUnanimated(objEnemy2, IMG_BOSS_GRANDIS, 20);
	HitCirc(objEnemy2);
	//ObjMove_SetDestAtFrameWeight(objEnemy2, GetStgFrameWidth/2, 100, 60);

	ObjMove_SetPosition(objEnemy3, GetCommonData("BossX", 0), GetCommonData("BossY", 0));
	renderBossUnanimated(objEnemy3, IMG_BOSS_VIIVI, 30);
	//HitCirc(objEnemy3);
	//ObjMove_SetDestAtFrameWeight(objEnemy3, GetStgFrameWidth/2, 175, 60);
	
	RecordAttackHistory("04b", "S3", DIFFICULTY_NAMES[DIFFICULTY]);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Lance Art &quot;Cross Slash&quot;","", LENEN, 163,43,255);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	
	magiccircle(objEnemy2,1);
	magiccircle(objEnemy3,1);
	ShrinkCircle();
	SetCommonData("bossBarDampenAmount",1);
	
	StartPortalSystem();
	Fire;
	SetCommonData("BossName", "Grandis Ezekiel & Viivi von Xanten");
}


@MainLoop
{
	SetPortalManaging(!Obj_IsDeleted(objEnemy));
	//ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	//ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	if(!Obj_IsDeleted(objEnemy2))
	{
		SetCommonData("objEnemy2_Position", [ObjMove_GetX(objEnemy2),ObjMove_GetY(objEnemy2)]);
		SetCommonData("objEnemy3_Position", [ObjMove_GetX(objEnemy3),ObjMove_GetY(objEnemy3)]);
	}
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
		SetCommonData("Stage4b_Phase",2);
	}
    if(count == 90)
	{
		
	}
    if(count == 95)
    {
		//ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
    {
		ObjEnemy_AddLife(objEnemy,-(HEALTH_MAX)/(60*TIME_MAX-2));
	}
    count++;
    yield;
}


@Finalize
{
}
let initGSpeed = 8;
let gSpeed = initGSpeed;
let phase = 0;
task Fire
{
	yield;
	let bit = 1-2*round(rand(0,1));
	ObjMove_SetDestAtFrameWeight(objEnemy2, GetStgFrameWidth/2 + 400*bit, 100, 60);

	ObjMove_SetDestAtFrameWeight(objEnemy3, GetStgFrameWidth/2 - 400*bit, 175, 60);
	
	let sprd = 5;
	let cc = 0;
	let d = 25;
	ascent(i in 0..sprd)
	{
		if(i!=2)
		{
			let x = GetStgFrameWidth/2 - (GetStgFrameWidth/2 - d)*bit + (GetStgFrameWidth-d*2)/(sprd-1)*i*bit;
			CrossSlashVertical(x, 60+100*cc, 1*[1,-1][i%2]);
			cc++;
			wait(20);
		}
	}
	wait(60*9);
	cc = 0;
	sprd = 3;
	ascent(i in 0..sprd)
	{
		
		let y = GetStgFrameHeight/2 - (GetStgFrameHeight/2 - d) + (GetStgFrameHeight-d*2)/(sprd-1)*i;
		CrossSlashHorizontal(y, 60+100*cc, 1*[1,-1][i%2]*bit);
		cc++;
		wait(20);
		
	}
	wait(60*9);
	let vBit = 1;
	loop(2)
	{
		let x = GetPlayerX;
		let y = GetPlayerY;
		
		CrossSlashVertical(x, 60, vBit);
		CrossSlashHorizontal(y, 60, bit);
		vBit*=-1;
		bit*=-1;
		wait(60*7);
	}
}
let SLASH_DELAY = 60 * 2.5;

let SLASH_STAY = 90; 
let SLASH_WARN = 60 * 1;
let SLASH_CLOSE = 30;
let ATTACK_DELAY = 45;
task CrossSlashVertical(x, extraDelay, bit)
{
	Obj_SetValue(objEnemy3, "isHittable", false);
	PortalSlash(x, 				   0, 90, SLASH_DELAY, SLASH_STAY+extraDelay+ATTACK_DELAY, SLASH_WARN, SLASH_CLOSE, 0.75, 1, true);
	PortalSlash(x, GetStgFrameHeight, 90, SLASH_DELAY, SLASH_STAY+extraDelay+ATTACK_DELAY, SLASH_WARN, SLASH_CLOSE, 0.75, 1, false);
	wait(SLASH_DELAY+extraDelay);
	SE_PlayLen(LaserDelLong,60);
	MegaSlash(x, bit, ATTACK_DELAY);
	ObjMove_SetPosition(objEnemy3, x, GetStgFrameHeight/2 + (GetStgFrameHeight)*bit);
	wait(ATTACK_DELAY);
	
	ObjMove_SetPosition(objEnemy3, x, GetStgFrameHeight/2 + (GetStgFrameHeight/2 + 100)*bit);
	Obj_SetValue(objEnemy3, "isHittable", false);
	SE_PlayLen(slash,60);
	ObjMove_SetDestAtFrame(objEnemy3, x, GetStgFrameHeight/2 - (GetStgFrameHeight/2 + 100)*bit, 40);
	wait(40);
	Obj_SetValue(objEnemy3, "isHittable", false);
	
}
task CrossSlashHorizontal(y, extraDelay, bit)
{
	Obj_SetValue(objEnemy2, "isHittable", false);
	PortalSlash(			  0 , y, 0, SLASH_DELAY, SLASH_STAY+extraDelay+ATTACK_DELAY, SLASH_WARN, SLASH_CLOSE, 0.75, 1, true);
	PortalSlash(GetStgFrameWidth, y, 0, SLASH_DELAY, SLASH_STAY+extraDelay+ATTACK_DELAY, SLASH_WARN, SLASH_CLOSE, 0.75, 1, false);
	wait(SLASH_DELAY+extraDelay);
	SE_PlayLen(LaserDelLong,60);
	ObjMove_SetPosition(objEnemy2, GetStgFrameWidth/2 + (GetStgFrameWidth/2 + 100)*bit, y);
	GrandisDash(y, bit, ATTACK_DELAY);
	wait(ATTACK_DELAY);
	Obj_SetValue(objEnemy2, "isHittable", true);
	SE_PlayLen(slash,60);
	ObjMove_SetDestAtFrame(objEnemy2, GetStgFrameWidth/2 - (GetStgFrameWidth/2 + 100)*bit, y, 20);
	let SHTID = [324,325];
	let waiter = 3;
	let t = round(20 / waiter);
	ascent(i in 0..t)
	{
		
		ascent(o in 0..5)
		{
			let spd = (0.5+o*1.5)/3;
			let sprd = 20+70/4*o;
			let acclTime = 120;
			let id = SHTID[(i/2)%2];
			ascent(p in 0..5)
			{
				ascent(j in 0..2)
				{
					let ang = 90 - sprd*bit + (sprd*2*bit)/4*p + 180*j;
					let obj = ShotA2(ObjMove_GetX(objEnemy2), ObjMove_GetY(objEnemy2), 0, ang, spd/acclTime, spd, id, id, 20, 2, BLEND_ADD_ARGB, false);
					ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
				}
			}
		}
		
		wait(waiter);
	}
	wait(20 - t);
	Obj_SetValue(objEnemy2, "isHittable", false);
}


task MegaSlash(xS,bit,waiter)
{
	
	let randY = 0;
	let yStart = GetStgFrameHeight/2 + (GetStgFrameHeight/2 + 25)*bit;
	let ang = -90*bit;
	ascent(o in 0..2)
	{
		let x = 1;
		let decreaseWait = 0;
		descent(i in 0..17)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				randY = rand(-10, 10);		
				ascent(p in 0..2)
				{
					let xB = xS+4.5*(i*(i+0.1))*[1,-1][p];
					if(xB > -20 && xB < GetStgFrameWidth + 20)
					{
						if(o>0)
						{
							let las = CreateStraightLaserA1(xB, yStart, ang, 400, 15, 40, 36, 0);
							Length(las);
						}
						let lasExpand = CreateStraightLaserA1(xB, yStart, ang, 400, 15, 999, [7,36][o], [99999,1][o]);
						ObjLaser_SetItemDistance(lasExpand, 1000);
						ObjShot_SetIntersectionEnable(lasExpand, false);
						ObjStLaser_SetSource(lasExpand, 0);
						Length(lasExpand);
						Expand(lasExpand, [2,10][o], [0,6][o],[128,255][o],[waiter,40][o]);
						if(o>0)
						{
							BulletBeams(xB, yStart+randY, 90-90*[1,-1][p]+(61.5*x));
						}
					}
				}
				x = -x;
				decreaseWait++;
				wait(1);
			}
		}
		wait(waiter-decreaseWait);
	}
	task BulletBeams(x, y, angle)
	{
		let sprd = 75;
		ascent(h in 0..12)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				let obj2 = ShotA2(x, y+h*sprd*-bit, 0.2-0.05, angle-1, 0, 2, 144, 144, 10, 2, BLEND_ADD_ARGB, false);
				ObjMove_AddPatternA2(obj2, 45, NO_CHANGE, NO_CHANGE, 0.02, 2, 0);
				ascent(i in -2..1)
				{
					let obj = ShotA2(x, y+h*sprd*-bit, 0.2+0.05*sin(180+i*90), angle+i, 0, 2, 144, 144, 10, 2, BLEND_ADD_ARGB, false);
					ObjMove_AddPatternA2(obj, 45, NO_CHANGE, NO_CHANGE, 0.02, 2, 0);
				}
				yield;
			}
		}
	}
	
	task Expand(las,base,grow,alp,t)
	{
		
		ascent(i in 0..t)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				ObjLaser_SetRenderWidth(las, base+i*grow);
				ObjRender_SetAlpha(las, alp-alp/t*i);
				yield;
			}
		}
		Obj_Delete(las);
	}
	
	task Length(las)
	{
		let len = 700;
		let lencurrent = 0;
		
		while(lencurrent < len && !Obj_IsDeleted(objEnemy))
		{
			ObjLaser_SetLength(las, lencurrent);
			lencurrent+=50;
			yield;
		}
	}
}

task GrandisDash(yS, bit, waiter)
{
	ascent(i in 0..4)
	{
		let sprd = 40;
		ascent(o in 0..2)
		{
			if(i>0 || o == 0)
			{
				let lasExpand = CreateStraightLaserA1(GetStgFrameWidth/2 + (GetStgFrameWidth/2+10)*bit, yS, 90, 0, 15, 999, 3, 99999);
				ObjShot_SetIntersectionEnable(lasExpand, false);
				ObjStLaser_SetSource(lasExpand, 0);
				Length(lasExpand, 90+90*bit, 90+90*bit + (sprd*i)*bit * [1,-1][o]);
			}
		}
	}
	wait(waiter);
	task Length(obj, ang1, ang2)
	{
		ObjRender_SetAlpha(obj, 128);
		ObjLaser_SetItemDistance(obj, 1000);
		ascent(i in 0..waiter)
		{
			ObjLaser_SetLength(obj, 999/(waiter-1)*i);
			ObjStLaser_SetAngle(obj, Interpolate_Decelerate(ang2, ang1, 1/(waiter-1)*i));
			
			yield;
		}
		let t = 10;
		ascent(i in 0..t)
		{
			ObjRender_SetAlpha(obj, 128 - 128/t*i);
			yield;
		}
		Obj_Delete(obj);
	}
}





task PortalSlash(x,y,ang,d,t,warn,closT, xScl, yScl, slashBool)
{
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(charge0,60);
	}
	ascent(i in 0..d)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			if(i%5==0 && slashBool)
			{
				CreateLine(x,y,ang, PORTAL_HEIGHT*yScl,20);
				CreateLine(x,y,ang,-PORTAL_HEIGHT*yScl,20);
			}
			yield;
		}
	}
	
	let objC = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objC, IMG_GRANDISPORTALCRACK);
	Obj_SetRenderPriorityI(objC, 28);
	ObjSprite2D_SetSourceRect(objC,0, 0, 512, 512);
	ObjSprite2D_SetDestRect(objC,0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(objC);
	ObjRender_SetPosition(objC, x, y,0);
	ObjRender_SetAngleZ(objC, ang);
	let xR = 1-2*round(rand(0,1));
	let yR = 1-2*round(rand(0,1));
	ObjRender_SetScaleXYZ(objC, xScl*0.5 * xR, yScl*0.5 * yR, 0);
	//ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	if(!Obj_IsDeleted(objEnemy) && slashBool)
	{
		ScreenShake(60,3);
		SE_PlayLen(drum,60);
		SE_PlayLen(ufo,60);
		SE_PlayLen(slash,60);
	}
	
	let portal1 = CreatePortal(x, y, ang, 0, 0);
	WriteLog(portal1);
	ObjPortal_Grow(portal1, xScl, 0, xScl, yScl, 10);
	ObjPortal_SetFunctional(portal1, false);
	if(slashBool)
	{
		PortalSlashHitbox(x, y, ang, PORTAL_HEIGHT*yScl, 10);
		PortalSlashEffect(x, y, ang, PORTAL_HEIGHT*yScl, 60);
	}
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			yield;
		}
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		//SE_PlayLen(LaserDelLong,60);
	}
	ascent(i in 0..warn)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let cc = 200+55*cos((360*3)/warn*i);
			ObjPortal_SetColor(portal1, 255, cc, cc);
			ObjRender_SetColor(objC, 255, cc, cc);
			yield;
		}
	}
	
	ObjPortal_SetColor(portal1, 255, 255, 255);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(gap,60);
	}
	ObjPortal_Grow(portal1, xScl, yScl, xScl*0.5, 0, closT, true);
	closT = round(closT*0.5);
	ascent(i in 0..closT)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let scl = Interpolate_Accelerate(1, 0.75, 1/closT*i);
			ObjRender_SetAlpha(objC, Interpolate_Linear(255, 0, 1/closT*i));
			//ObjRender_SetScaleXYZ(objC, xScl*0.7 * xR, yScl*0.7 * yR * scl, 0);
			yield;
		}
	}
	Obj_Delete(objC);
}

task PortalSlashHitbox(x, y, ang, width, t)
{
	let objspell = CreateShotA1(x,y,0,0,1,0);
	ObjRender_SetAlpha(objspell,0);
	ObjShot_SetSpellResist(objspell,true);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let scl = sin(90/(t-1)*i);
			let dis = GetScreenWidth;
			ObjShot_SetIntersectionLine(objspell,x-dis*cos(ang),y-dis*sin(ang),x+dis*cos(ang),y+dis*sin(ang), width*scl*2);
			yield;
		}
	}
	Obj_Delete(objspell);
}

task PortalSlashEffect(x, y, ang, width, t)
{
	let objs = [];
	ascent(o in 0..3)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, IMG_PIXEL);
		Obj_SetRenderPriorityI(obj, 55);
		let www = GetScreenWidth * 2;
		let hhh = o == 2 ? GetStgFrameHeight+50 : width * 2;
		ObjSprite2D_SetSourceRect(obj,0, 0, www, hhh);
		ObjSprite2D_SetDestRect(obj,0, 0, www, hhh);
		ObjSprite2D_SetDestCenter(obj);
		if(o==2)
		{
			x = GetStgFrameWidth/2;
			y = GetStgFrameHeight/2;
			ang = 0;
		}
		ObjRender_SetPosition(obj, x, y,0);
		ObjRender_SetAngleZ(obj, ang);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		
		objs ~= [obj];
	}
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let sclP9 = (1 - (1 - 1/(t-1)*i)^9);
			let sclP2 = (1 - (1 - 1/(t-1)*i)^2);
			ObjRender_SetAlpha(objs[0],255-255*sclP2);
			ObjRender_SetScaleY(objs[0],sclP9);
			
			ObjRender_SetAlpha(objs[1],64-64/t*i);
			ObjRender_SetScaleY(objs[1],2 - 1/t*i);
			
			ObjRender_SetAlpha(objs[2],32-32/t*i);
			
			yield;
		}
	}
	ascent(o in 0..3)
	{
		Obj_Delete(objs[o]);
	}
}

task CreateLine(x,y,ang,d,t)
{
	let objLine = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objLine,PRIMITIVE_LINESTRIP);
	ObjPrim_SetVertexCount(objLine, 2);
	Obj_SetRenderPriorityI(objLine,38);
	ObjPrim_SetVertexPosition(objLine , 0, -1024, 0,0);
	ObjPrim_SetVertexPosition(objLine , 1,  1024, 0,0);
	ObjRender_SetAngleZ(objLine,ang);
	ObjRender_SetPosition(objLine, x, y, 0);
	
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let scl = sin(90/(t-1)*i);
			let dis = d*scl * 1.5;
			let ang2 = ang + 90;
			ObjRender_SetAlpha(objLine,255-255*scl);
			ObjRender_SetPosition(objLine, x + dis * cos(ang2), y + dis * sin(ang2), 0);
			yield;
		}
	}
	Obj_Delete(objLine);
}

task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	
	SetPortalManaging(false);
	SetCommonData("bossBarDampenAmount",0.3);
	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 



task HitCirc(objTarget)
{
	while(!Obj_IsDeleted(objEnemy))
	{
		if(Obj_GetValueD(objTarget, "isHittable", true) == true)
		{
			ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 32);
			ObjEnemy_SetIntersectionCircleToPlayer(objTarget, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 24);
		}
		yield;
	}
	Obj_Delete(objTarget);
}
