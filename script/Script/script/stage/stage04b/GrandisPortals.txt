let tex_rd = GetReservedRenderTargetName( 0 );
let tex_rd2 = GetReservedRenderTargetName( 1 );
let tex_rdMask;

const PORTAL_X = 0;
const PORTAL_Y = 1;
const PORTAL_ANGLE = 2;
const PORTAL_WIDTHSCALE = 3;
const PORTAL_HEIGHTSCALE = 4;
const PORTAL_ENABLE = 5;
const PORTAL_COLOR_R = 6;
const PORTAL_COLOR_G = 7;
const PORTAL_COLOR_B = 8;
const PORTAL_FUNCTIONAL = 9;
let isManagingPortals = true;

let xArray = [];
let yArray = [];
const PORTAL_WIDTH = 100;
const PORTAL_HEIGHT = 50;

let portalObjectArray = [];


task StartPortalSystem()
{
	let hasBeenReset = false;
	tex_rdMask = CreateRenderTargetEx("textureMask", GetStgFrameWidth, GetStgFrameHeight);
	
	ascent(i in 0..32)
	{
		xArray ~= [-PORTAL_WIDTH+(PORTAL_WIDTH*2)/31*i];
		yArray ~= [PORTAL_HEIGHT*sin(180/31*i)];
	}
	
	CreateRegularBulletTarget();
	ManageAllPortals();
	while(isManagingPortals)
	{
		let portalsEnabledCount = 0;
		ascent(i in 0..length(portalObjectArray))
		{
			if(ObjPortal_IsEnabled(i))
			{
				portalsEnabledCount++;
				hasBeenReset = false;
			}
		}
		if(portalsEnabledCount==0&&!hasBeenReset)
		{
			ResetPortalArray();
			hasBeenReset = true;
		}
		
		//WriteLog(portalsEnabledCount);
		ClearPortalTargets();
		yield;
	}
	WriteLog("End Portal Manager.");
	ResetPortalArray();
	ClearPortalTargets();
}

task ResetPortalArray()
{
	WriteLog("Portal Array Reset!");
	portalObjectArray = [];
}

task ClearPortalTargets()
{
	ClearRenderTargetA1( tex_rd );
	ClearRenderTargetA1( tex_rd2 );
	ClearRenderTargetA1( "textureMask" );
}

let BaseBulletBlendType = BLEND_ALPHA;
task CreateRegularBulletTarget()
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, tex_rd2);
	Obj_SetRenderPriorityI(obj, 60);
	ObjSprite2D_SetSourceRect(obj,0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj,0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj, GetStgFrameWidth/2, GetStgFrameHeight/2,0);
	
	//ObjRender_SetAlpha(obj,120);
	
	let objMaskBack = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objMaskBack, IMG_PIXEL);
	Obj_SetRenderPriorityI(objMaskBack, 9);
	ObjSprite2D_SetSourceRect(objMaskBack,0, 0, GetScreenWidth*2, GetScreenHeight*2);
	ObjSprite2D_SetDestRect(objMaskBack,0, 0, GetScreenWidth*2, GetScreenHeight*2);
	ObjSprite2D_SetDestCenter(objMaskBack);
	ObjRender_SetPosition(objMaskBack, GetScreenWidth/2, GetScreenWidth/2,0);
	ObjRender_SetColor(objMaskBack,255,255,255);
	ObjRender_SetRenderTarget(objMaskBack,"textureMask");
	
	let dir = GetCurrentScriptDirectory();
	let pathShader = dir ~ "SamplePS02_HLSL.txt";
	
	ObjShader_SetShaderF(obj, pathShader);
	ObjShader_SetTechnique(obj, "TecMask");

	ObjShader_SetTexture(obj, "textureMask_", "textureMask");
	
	while(isManagingPortals)
	{
		ObjRender_SetBlendType(obj,BaseBulletBlendType);
		yield;
	}
	Obj_Delete(obj);
	Obj_Delete(objMaskBack);
}

function SetBaseBlendType(blendID)
{
	BaseBulletBlendType = blendID;
}

task SetInPortal(obj)
{
	Obj_SetValue(obj,"portalConcern", true);
	Obj_SetValue(obj,"inPortal", true);
	ObjShot_SetSpellResist(obj,true);
	Obj_SetRenderPriorityI(obj,11);
	ObjRender_SetRenderTarget(obj, tex_rd);
	ObjShot_SetIntersectionEnable(obj,false);
}

task SetOutPortal(obj)
{
	Obj_SetValue(obj,"portalConcern", true);
	Obj_SetValue(obj,"inPortal", false);
	ObjShot_SetSpellResist(obj,true);
	Obj_SetRenderPriorityI(obj,11);
	ObjRender_SetRenderTarget(obj, tex_rd2);
	ObjShot_SetIntersectionEnable(obj,true);
}

task SetPortalManaging(b)
{
	isManagingPortals = b;
}

task ObjPortal_Grow(portalID, x1, y1, x2, y2, t)
{
	let obj = portalID;
	ascent(i in 0..t)
	{
		if(!ObjPortal_IsDeleted(obj))
		{
			let tVal = 1/(t-1)*i;
			ObjPortal_SetScale(obj,Interpolate_Decelerate(x1,x2,tVal), Interpolate_Decelerate(y1, y2, tVal));
		}
		yield;
	}
}

task ObjPortal_Grow(portalID, x1, y1, x2, y2, t, closeBool)
{
	let obj = portalID;
	ascent(i in 0..t)
	{
		if(!ObjPortal_IsDeleted(obj))
		{
			let tVal = 1/(t-1)*i;
			ObjPortal_SetScale(obj,Interpolate_Decelerate(x1,x2,tVal), Interpolate_Decelerate(y1, y2, tVal));
		}
		yield;
	}
	if(closeBool)
	{
		ObjPortal_Delete(obj);
	}
}

task ManageAllPortals()
{
	while(isManagingPortals)
	{
		// Reset all bullet hitboxes
		let barray = GetShotIdInCircleA2(GetPlayerX, GetPlayerY, 200, TARGET_ENEMY);
		let blength = length(barray);
		if(blength>0)
		{
			ascent (i in 0..blength)
			{
				let obj = barray[i];
				ObjShot_SetIntersectionEnable(obj,!Obj_GetValueD(obj,"inPortal",false));
			}
		}
		
		// Check if the player is even near a portal to begin with.
		let skip = true;
		let idsToCheck = [];
		let portalsEnabledCount = 0;
		ascent(i in 0..length(portalObjectArray))
		{
			let portalX = portalObjectArray[i][PORTAL_X];
			let portalY = portalObjectArray[i][PORTAL_Y];
			let portalXScale = portalObjectArray[i][PORTAL_WIDTHSCALE];
			let isPortalEnabled = ObjPortal_IsEnabled(i);
			let isPortalFunctional = ObjPortal_IsFunctional(i);
			if(Get_Distance(GetPlayerX,GetPlayerY,portalX,portalY) < PORTAL_WIDTH * portalXScale * 1.15 && isPortalEnabled && isPortalFunctional)
			{
				skip = false;
				idsToCheck ~= [i];
				portalsEnabledCount++;
			}
		}
		if(!skip) // If so, then run tests on bullets.
		{
			//WriteLog(portalsEnabledCount);
			ascent(id in 0..length(idsToCheck))// Get all the bullets.
			{
				
				let i = idsToCheck[id];
				let portalX =      portalObjectArray[i][PORTAL_X];
				let portalY = 	   portalObjectArray[i][PORTAL_Y];
				let portalAngle =  portalObjectArray[i][PORTAL_ANGLE];
				let portalXScale = portalObjectArray[i][PORTAL_WIDTHSCALE];
				let portalYScale = portalObjectArray[i][PORTAL_HEIGHTSCALE];
				
				let checkRad = max(PORTAL_WIDTH*portalXScale*1.15, PORTAL_HEIGHT*portalYScale*1.15);
				
				let barray = GetShotIdInCircleA2(portalX, portalY, checkRad, TARGET_ENEMY);
				let blength = length(barray);
				if(blength>0)
				{
					ascent (i in 0..blength)
					{
						let obj = barray[i];
						
						if(Obj_GetValueD(obj,"portalConcern",false)==true)
						{
							let shotLeniency = Obj_GetValueD(obj, "Leniency", 1);
							let shotX = ObjMove_GetX(obj) + ObjMove_GetSpeedX(obj);
							let shotY = ObjMove_GetY(obj) + ObjMove_GetSpeedY(obj);
							let shotPos = Rotate2D(shotX, shotY, -portalAngle, portalX, portalY); // Rotate bullets around portal until in line with flat portal
							
							// If bullet is within the portal bounding box:
							if( shotPos[0] > portalX - PORTAL_WIDTH * portalXScale * shotLeniency && 
							    shotPos[0] < portalX + PORTAL_WIDTH * portalXScale * shotLeniency &&
							    shotPos[1] > portalY - PORTAL_HEIGHT * portalYScale * shotLeniency && 
							    shotPos[1] < portalY + PORTAL_HEIGHT * portalYScale * shotLeniency )
							{
								let dis = absolute((portalX - shotPos[0])) / (PORTAL_WIDTH * portalXScale * shotLeniency );
								let sinY = PORTAL_HEIGHT*sin(90-90*dis) * portalYScale * shotLeniency ;
								if(shotPos[1] < portalY + sinY && shotPos[1] > portalY - sinY)
								{
									ObjShot_SetIntersectionEnable(obj,Obj_GetValueD(obj,"inPortal",false));
								}
							}
						}
					}
				}				
			}
		}	
		yield;
	}
}

function IsInvalidID(portalID)
{
	return portalID >= length(portalObjectArray);
}

function ObjPortal_SetX(portalID, x)
{
	if(IsInvalidID(portalID)) return false;
	portalObjectArray[portalID][PORTAL_X] = x;
}
function ObjPortal_GetX(portalID)
{
	if(IsInvalidID(portalID)) return 0;
	return portalObjectArray[portalID][PORTAL_X];
}

function ObjPortal_SetY(portalID, y)
{
	if(IsInvalidID(portalID)) return false;
	portalObjectArray[portalID][PORTAL_Y] = y;
}
function ObjPortal_GetY(portalID)
{
	if(IsInvalidID(portalID)) return 0;
	return portalObjectArray[portalID][PORTAL_Y];
}

function ObjPortal_SetPosition(portalID, x, y)
{
	if(IsInvalidID(portalID)) return false;
	ObjPortal_SetX(portalID, x);
	ObjPortal_SetY(portalID, y);
}
function ObjPortal_GetPosition(portalID)
{
	if(IsInvalidID(portalID)) return [0,0];
	return [ObjPortal_GetX(portalID), ObjPortal_GetY(portalID)];
}

function ObjPortal_SetAngle(portalID, a)
{
	if(IsInvalidID(portalID)) return false;
	portalObjectArray[portalID][PORTAL_ANGLE] = a;
}
function ObjPortal_GetAngle(portalID)
{
	if(IsInvalidID(portalID)) return 0;
	return portalObjectArray[portalID][PORTAL_ANGLE];
}

function ObjPortal_SetScaleX(portalID, x)
{
	if(IsInvalidID(portalID)) return false;
	portalObjectArray[portalID][PORTAL_WIDTHSCALE] = x;
}
function ObjPortal_GetScaleX(portalID)
{
	if(IsInvalidID(portalID)) return 0;
	return portalObjectArray[portalID][PORTAL_WIDTHSCALE];
}

function ObjPortal_SetScaleY(portalID, y)
{
	if(IsInvalidID(portalID)) return false;
	portalObjectArray[portalID][PORTAL_HEIGHTSCALE] = y;
}
function ObjPortal_GetScaleY(portalID)
{
	if(IsInvalidID(portalID)) return 0;
	return portalObjectArray[portalID][PORTAL_HEIGHTSCALE];
}

function ObjPortal_SetScale(portalID, xy)
{
	if(IsInvalidID(portalID)) return false;
	ObjPortal_SetScaleX(portalID, xy);
	ObjPortal_SetScaleY(portalID, xy);
}
function ObjPortal_SetScale(portalID, x, y)
{
	if(IsInvalidID(portalID)) return false;
	ObjPortal_SetScaleX(portalID, x);
	ObjPortal_SetScaleY(portalID, y);
}
function ObjPortal_GetScale(portalID)
{
	if(IsInvalidID(portalID)) return [0,0];
	return [ObjPortal_GetScaleX(portalID), ObjPortal_GetScaleY(portalID)];
}

function ObjPortal_Delete(portalID)
{
	//WriteLog("Deleting portal: ");
	//WriteLog(portalID);
	if(IsInvalidID(portalID)) return false;
	//WriteLog("Deletion Successful!");
	ObjPortal_SetScale(portalID, 0, 0);
	ObjPortal_SetColor(portalID, 255, 255, 255);
	portalObjectArray[portalID][PORTAL_ENABLE] = false;
}
function ObjPortal_IsDeleted(portalID)
{
	if(IsInvalidID(portalID)) return true;
	return portalObjectArray[portalID][PORTAL_ENABLE] == false;
}
function ObjPortal_IsEnabled(portalID)
{
	if(IsInvalidID(portalID)) return false;
	return portalObjectArray[portalID][PORTAL_ENABLE] == true;
}

function ObjPortal_SetColor(portalID, r, g, b)
{
	if(IsInvalidID(portalID)) return false;
	portalObjectArray[portalID][PORTAL_COLOR_R] = r;
	portalObjectArray[portalID][PORTAL_COLOR_G] = g;
	portalObjectArray[portalID][PORTAL_COLOR_B] = b;
}
function ObjPortal_GetColor(portalID)
{
	if(IsInvalidID(portalID)) return [0,0,0];
	return [portalObjectArray[portalID][PORTAL_COLOR_R], 
			portalObjectArray[portalID][PORTAL_COLOR_G], 
			portalObjectArray[portalID][PORTAL_COLOR_B]];
}

function ObjPortal_SetFunctional(portalID, f)
{
	if(IsInvalidID(portalID)) return false;
	portalObjectArray[portalID][PORTAL_FUNCTIONAL] = f;
}
function ObjPortal_IsFunctional(portalID)
{
	if(IsInvalidID(portalID)) return false;
	return portalObjectArray[portalID][PORTAL_FUNCTIONAL];
}

function CreatePortal(x,y,ang,xScale, yScale)
{
	let obj = ObjPrim_Create( OBJ_PRIMITIVE_2D );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetTexture(obj, tex_rd );
	ObjRender_SetAlpha(obj,255);
	ObjPrim_SetVertexCount(obj, 32*2);
	Obj_SetRenderPriorityI(obj,60);

	
	let objLine = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objLine,PRIMITIVE_LINESTRIP);
	ObjPrim_SetVertexCount(objLine, 32);
	Obj_SetRenderPriorityI(objLine,60);
	
	let objLine2 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objLine2,PRIMITIVE_LINESTRIP);
	ObjPrim_SetVertexCount(objLine2, 32);
	Obj_SetRenderPriorityI(objLine2,60);
	
	
	let objB = ObjPrim_Create( OBJ_PRIMITIVE_2D );
	ObjPrim_SetPrimitiveType( objB, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetTexture(objB, IMG_GRANDISPORTAL );
	ObjRender_SetAlpha(objB,255);
	ObjPrim_SetVertexCount(objB, 32*2);
	Obj_SetRenderPriorityI(objB,29);
	
	
	let objMask = ObjPrim_Create( OBJ_PRIMITIVE_2D );
	ObjPrim_SetPrimitiveType( objMask, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetTexture(objMask, IMG_PIXEL );
	ObjRender_SetAlpha(objMask,255);
	ObjPrim_SetVertexCount(objMask, 32*2);
	Obj_SetRenderPriorityI(objMask,9);

	
	ObjRender_SetColor(objMask,0,0,0);
	ObjRender_SetRenderTarget(objMask,"textureMask");
	
	portalObjectArray ~= [[x, y, ang, xScale, yScale, true, 255, 255, 255, true]];
	let id = length(portalObjectArray) - 1;
	
	RenderPortal();
	
	return id;
	
	task RenderPortal()
	{
		let isEnabled = ObjPortal_IsEnabled(id);
		while(isManagingPortals && isEnabled && !IsInvalidID(id))
		{
			isEnabled = ObjPortal_IsEnabled(id);
			x = ObjPortal_GetX(id);
			y = ObjPortal_GetY(id);
			ang = ObjPortal_GetAngle(id);
			let portalWidth = ObjPortal_GetScaleX(id);
			let portalHeight = ObjPortal_GetScaleY(id);
			ascent(i in 0..32)
			{
				let positionTop = 	 Rotate2D(xArray[i]*portalWidth, -yArray[i]*portalHeight, ang);
				let positionBottom = Rotate2D(xArray[i]*portalWidth,  yArray[i]*portalHeight, ang);
		
				ObjPrim_SetVertexPosition(obj , i*2+0, positionTop[0]	, positionTop[1],0);
				ObjPrim_SetVertexPosition(obj , i*2+1, positionBottom[0], positionBottom[1],0);
				ObjPrim_SetVertexPosition(objB, i*2+0, positionTop[0]	, positionTop[1],0);
				ObjPrim_SetVertexPosition(objB, i*2+1, positionBottom[0], positionBottom[1],0);
				
				ObjPrim_SetVertexPosition(objMask, i*2+0, positionTop[0]	, positionTop[1],0);
				ObjPrim_SetVertexPosition(objMask, i*2+1, positionBottom[0]	, positionBottom[1],0);
				
				ObjPrim_SetVertexPosition(objLine, i    ,  positionTop[0]	,  positionTop[1], 0);
				ObjPrim_SetVertexPosition(objLine2, i    , positionBottom[0]	,  positionBottom[1], 0);
			
				ObjPrim_SetVertexUVT(obj , i*2+0, x + 107 + positionTop[0],   positionTop[1] + y);
				ObjPrim_SetVertexUVT(obj , i*2+1, x + 107 + positionBottom[0],positionBottom[1] + y);
				
				ObjPrim_SetVertexUVT(objB, i*2+0, x + 107 + positionTop[0],   positionTop[1] + y);
				ObjPrim_SetVertexUVT(objB, i*2+1, x + 107 + positionBottom[0],positionBottom[1] + y);
			}
			let col = ObjPortal_GetColor(id);
			ObjRender_SetColor(objLine,  col[0], col[1], col[2]);
			ObjRender_SetColor(objLine2, col[0], col[1], col[2]);
			ObjRender_SetColor(objB, col[0], col[1], col[2]);
			
			ObjRender_SetPosition(obj,x,y,0);
			ObjRender_SetPosition(objLine ,x,y,0);
			ObjRender_SetPosition(objLine2,x,y,0);
			ObjRender_SetPosition(objB,x,y,0);
			ObjRender_SetPosition(objMask,x,y,0);
			
			yield;
		}
		Obj_Delete(obj);
		Obj_Delete(objLine);
		Obj_Delete(objLine2);
		Obj_Delete(objB);
		Obj_Delete(objMask);
	}
}

const IN_PORTAL = true;
const OUT_PORTAL = false;

function PShotA1(x,y,spd,dir,graphic,cloud,delay,size,blendtype,delaymove, inPortal)
{
	if(IS_RANDOM_ANGLE) { dir = rand(0,360); }
	if(IS_RANDOM_GRAPHIC) { graphic = round(rand(1, 465)); }
    let shot = CreateShotA1(x,y,spd,dir,graphic,delay);
	if(inPortal)
	{
		SetInPortal(shot);
	}
	else
	{
		SetOutPortal(shot);
	}
    PDelayCloud(shot,x,y,spd,dir,graphic,cloud,delay,size,blendtype,delaymove, inPortal);
    return shot;
}
function PShotA2(x,y,spd,dir,acc,maxacc,graphic,cloud,delay,size,blendtype,delaymove, inPortal)
{
	if(IS_RANDOM_ANGLE) { dir = rand(0,360); }
	if(IS_RANDOM_GRAPHIC) { graphic = round(rand(1, 465)); }
    let shot = CreateShotA2(x,y,spd,dir,acc,maxacc,graphic,delay);
	if(inPortal)
	{
		SetInPortal(shot);
	}
	else
	{
		SetOutPortal(shot);
	}
    PDelayCloud(shot,x,y,spd,dir,graphic,cloud,delay,size,blendtype,delaymove, inPortal);
    return shot;
}
function PShotOA1(obj,spd,dir,graphic,cloud,delay,size,blendtype,delaymove, inPortal)
{
	if(IS_RANDOM_ANGLE) { dir = rand(0,360); }
	if(IS_RANDOM_GRAPHIC) { graphic = round(rand(1, 465)); }
    let shot = CreateShotOA1(obj,spd,dir,graphic,delay);
	if(inPortal)
	{
		SetInPortal(shot);
	}
	else
	{
		SetOutPortal(shot);
	}
    PDelayCloud(shot,ObjMove_GetX(obj),ObjMove_GetY(obj),spd,dir+90,graphic,cloud,delay,size,blendtype,delaymove, inPortal);
    PDelayCloud(shot,ObjMove_GetX(obj),ObjMove_GetY(obj),spd,dir+90,graphic,cloud,delay,size,blendtype,delaymove, inPortal);
    return shot;
}
function PShotB1(x,y,xspd,yspd,graphic,cloud,delay,size,blendtype,delaymove, inPortal)
{
	if(IS_RANDOM_GRAPHIC) { graphic = round(rand(1, 465)); }
    let angle = atan2(yspd,xspd);
    let shot = CreateShotB1(x,y,xspd,yspd,graphic,delay);
	if(inPortal)
	{
		SetInPortal(shot);
	}
	else
	{
		SetOutPortal(shot);
	}
    PDelayCloud(shot,x,y,0,angle,graphic,cloud,delay,size,blendtype,delaymove, inPortal);
    return shot;
}
function PShotB2(x,y,xspd,yspd,xacc,yacc,xmax,ymax,graphic,cloud,delay,size,blendtype,delaymove, inPortal)
{
	if(IS_RANDOM_GRAPHIC) { graphic = round(rand(1, 465)); }
    let angle = atan2(yspd,xspd);
    let shot = CreateShotB2(x,y,xspd,yspd,xacc,yacc,xmax,ymax,graphic,delay);
	if(inPortal)
	{
		SetInPortal(shot);
	}
	else
	{
		SetOutPortal(shot);
	}
    PDelayCloud(shot,x,y,0,angle,graphic,cloud,delay,size,blendtype,delaymove, inPortal);
    return shot;
}

task PDelayCloud(shot,x,y,spd,dir,graphic,cloud,delay,size,blendtype,delaymove, inPortal)
{
    let obj=CreateShotA1(x,y,0,dir,cloud,0);
	ObjShot_SetAutoDelete(obj,false);
	if(inPortal)
	{
		SetInPortal(obj);
	}
	else
	{
		SetOutPortal(obj);
	}
	if(delaymove==true)
	{
		ObjMove_SetSpeed(obj,spd);
	}
	ObjShot_SetIntersectionEnable(obj,false);
    let c = 0;
    let v = false;
    let px = 0;
    let adc = false;
    let s = size;
	let c2 = 0;
	let coord = GetShotDataInfoA1(graphic,TARGET_ENEMY,INFO_RECT);
	let coordc = GetShotDataInfoA1(cloud,TARGET_ENEMY,INFO_RECT);
	let xwid = coord[2]-coord[0];
	let ywid = coord[3]-coord[1];
	
	let xwidc = coordc[2]-coordc[0];
	let ywidc = coordc[3]-coordc[1];
    if(!Obj_IsDeleted(shot))
    {
		ObjRender_SetBlendType(obj,blendtype);
		
		
        let s_value = s-1;
        Obj_SetRenderPriorityI(obj,Obj_GetRenderPriorityI(shot)+1);
        while(c<delay-1 &&  !Obj_IsDeleted(shot))
        {
			/*
            ObjRender_SetScaleXYZ(obj,xwid/xwidc*s,ywid/ywidc*s,0);
			if((cloud>=417&&cloud<=424)||(cloud>=443&&cloud<=450))
			{
				ObjRender_SetScaleXYZ(obj,(xwid*2)/xwidc*s,(ywid*2)/ywidc*s,0);
			}*/
			ObjRender_SetScaleXYZ(obj,s,s,0);
			ObjRender_SetAlpha(obj,c2);
            if(v==true)
            { ObjRender_SetAngleXYZ(obj,0,0,dir-c*3);}
            ;
            if(s>=1)
            {s -= s_value/(delay-1);
            }
            c++;
			c2+=255/(delay-1);
            
            yield;
        }
		ObjMove_SetPosition(shot,ObjMove_GetX(obj),ObjMove_GetY(obj));
        Obj_Delete(obj);
    }
}