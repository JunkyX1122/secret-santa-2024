#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns2"]
#Text["Ns2"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2,150,40);
	renderBossUnanimated(objEnemy, IMG_BOSS_KAIRYU, 7);
	RecordAttackHistory("03", "Ns2", DIFFICULTY_NAMES[DIFFICULTY]);

	end;
	SetCommonData("SpellCardBG1",false);
	SetCommonData("BossName", "Hatsudzuki no Kairyu");
}
@MainLoop
{
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	while(!Obj_IsDeleted(objEnemy))
	{
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(50,-50), rand(140,160), 60*2);
		BookOpen(ObjMove_GetX(objEnemy)+200*bit,ObjMove_GetY(objEnemy)+80,bit);
		BookOpen(ObjMove_GetX(objEnemy)-200*bit,ObjMove_GetY(objEnemy)+80,bit);
		wait(60*4);
		ObjEnemy_SetDamageRate(objEnemy, (0.065)/1.5, (0.065)/3);
		bit*=-1;
	}
}

task BookOpen(x,y,bit)
{
	let ang = 90;
	let isBookFiring = true;
	ascent(i in 0..50)
	{
		ang = 90+360/50*i*bit;
		if(ang%360>0 && ang%360<180)
		{
			let obj = ShotB1(x+130*cos(ang),y-30*sin(ang)-10,3*cos(ang),1,295,295,160,2,BLEND_ADD_ARGB,false);
			ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
		}
	}
	BookFire();
	ascent(i in 0..10)
	{
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(spawnfm3,50);
			loop(5)
			{
				if(!Obj_IsDeleted(objEnemy)) 
				{
					SE_PlayLen(Shot2,70);
					LaserSweep(x,y,bit,i);
					wait(2);
				}
			}
			wait(4);
		}
	}
	wait(50);
	isBookFiring = false;
	task BookFire()
	{
		let ang = -90 + 90*bit + rand(10,-10);
		while(isBookFiring&&!Obj_IsDeleted(objEnemy))
		{
			ascent(o in 0..3)
			{
				ascent(i in 0..7)
				{
					let angP = ang+360/7*i+0.3*o*bit;
					if(angP%360>180 && angP%360<360)
					{
						let xs = 4*cos(angP);
						let ys = 2*sin(angP);
						let objS = ShotB2(x+130*cos(angP),y+30*sin(angP)-10,xs,ys,0,0.02,0,10,427,420,5,3,BLEND_ADD_ARGB,false);
						ObjRender_SetBlendType(objS,BLEND_ADD_ARGB);
					}
				}
			}
			ang-=9.123*bit;
			wait(3);
		}
	}
	
}
task LaserSweep(xs,ys,bit,starter)
{
	
	let ang = -90+90*bit;
	let x = xs;
	let y = ys;
	let obj = CreateStraightLaserA1(x,y,ang,0,10,9999,26,0);
	let obj2 = CreateStraightLaserA1(x,y,ang,0,20,9999,33,0);
	
	let laserss = [obj,obj2];
	
	
	let obj3 = CreateShotA1(x,y,0,0,439,0);
	let obj4 = CreateShotA1(x,y,0,0,439,0);
	let sourcess = [obj3,obj4];
	let t = 60;
	let size = 120;
	let flipAng = 60;
	let spinAng = 120;
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy)) 
		{
			ascent(obj in 0..2)
			{
				ObjShot_SetAutoDelete(laserss[obj],false);
				ObjShot_SetAutoDelete(sourcess[obj],false);
				ObjRender_SetBlendType(laserss[obj],BLEND_ADD_ARGB);
				ObjStLaser_SetSource(laserss[obj],false);
				let mAng = -90+flipAng*bit-(flipAng*2)/(t-1)*i*bit;
				let mAng2 = -90+spinAng*bit-(spinAng*2)/(t-1)*i*bit;
				let x = xs + 150*cos(mAng);
				let y = ys + 50*sin(mAng);
				ObjMove_SetPosition(laserss[obj],x,y);
				ObjStLaser_SetAngle(laserss[obj],mAng2);
				let lasLength = size*sin(180/(t-1)*i);
				ObjLaser_SetLength(laserss[obj],lasLength);
				
				x = x + lasLength*obj * cos(mAng2); 
				y = y + lasLength*obj * sin(mAng2);
				ObjMove_SetPosition(sourcess[obj],x,y);
				ObjRender_SetBlendType(sourcess[obj],BLEND_ADD_ARGB);
				ObjRender_SetScale(sourcess[obj],1*sin(180/(t-1)*i));
				if((i+starter)%3==0 && obj == 1 && absolute(mAng2%360-270) < 60)
				{
					SE_PlayLen(Shot1,40);
					let xs = 4*cos(mAng2);
					let ys = 4*sin(mAng2);
					let objS = ShotB2(x,y,xs,ys,0,0.01,0,10-6*sin(180/(t-1)*i),96,420,5,3,BLEND_ALPHA,false);
				}
				
			}
			
			yield;
		}
	}
	ascent(obj in 0..2)
	{
		Obj_Delete(laserss[obj]);
		Obj_Delete(sourcess[obj]);
	}
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

