#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Primal Poem &quot;Tidal Surge&quot;"]
#Text["S2"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 65;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(65);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 80, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_KAIRYU, 7);
	magiccircle(objEnemy,1);
	RecordAttackHistory("03", "S2", DIFFICULTY_NAMES[DIFFICULTY]);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Primal Poem &quot;Tidal Surge&quot;","", LENEN, 0,0,255);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	//SetIntersectionVisualization(true);
	SetCommonData("BossName", "Hatsudzuki no Kairyu");
	
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	enemyIsAlive = !Obj_IsDeleted(objEnemy);
    count++;
    yield;
}
let enemyIsAlive = true;

@Finalize
{
}
let waveCC = 0;
task Fire
{
	let bit = 1-2*round(rand(0,1));
	let baseWaveHeight = 5;
	let mult = 0;
	while(!Obj_IsDeleted(objEnemy))
	{
		bit*=-1;
		let cc = 0;
		let cc2 = 0;
		let spnAm = 1.4123;
		let waveVariation = 0.75;
		SE_PlayLen(LaserDelLong,60);
		
		
		while(!Obj_IsDeleted(objEnemy)&&cc < 60*10)
		{
			if(cc%12==0)
			{
				
				CreateWave(baseWaveHeight+1+waveVariation*sin(cc*spnAm),0.1, 427,bit,3,cc2, 0, 0);
				if(cc%(12*2)==0)
				{
					CreateWave(baseWaveHeight+4.75+(waveVariation*0.5)*sin(cc*spnAm),0.1, 427,bit,3,cc2, 0, 1);
				}
				cc2++;
				waveCC++;
				if(waveCC > 360)
				{
					waveCC = round(rand(0,90));
				}
			}
			if(sin(cc*spnAm)>0&&cc < 60*9)
			{
				if(cc%round(36*[1.3,1][DIFFICULTY])==0)
				{
			
					CreateWave(baseWaveHeight+1+waveVariation*sin(cc*spnAm) + 2,0.1, 335,bit,16,cc2, 6, 0);
				}
				
				if(cc%round(84*[1.3,1][DIFFICULTY])==0)
				{

					CreateWave(baseWaveHeight+1+waveVariation*sin(cc*spnAm) + 3,0.1, 295,bit,32,cc2, 6, 0);
				}
				
				if(cc%round(93*[1.3,1][DIFFICULTY])==0)
				{
			
					CreateWave(baseWaveHeight+1+waveVariation*sin(cc*spnAm) + 1,0.06, 64,bit,12,cc2, 0, 0);
				}
			}
			cc++;
			yield;
		}
		if(baseWaveHeight<5+1/2)
		{
			baseWaveHeight+=0.25/2;
			mult+=1;
			ObjEnemy_SetDamageRate(objEnemy, ((0.05+0.008*mult)/3)/1.5, ((0.05+0.008*mult)/3)/3);
		}
	}
}
task CreateWave(height, grav, id, bit, timeBetween,cc2, ySpeedLim, type)
{
	let x = GetStgFrameWidth/2 - (GetStgFrameWidth/2 + 32) * bit;
	let sideSpeed = 4;
	let cc = round(rand(0,100))%timeBetween;
	let personalWaveCounter = round(25+25*sin(cc2*20 + waveCC*2));
	let bigScl = id == 427 ? 1.5 : [1.35, 1.5][DIFFICULTY];
	while(CheckX(x)&&!Obj_IsDeleted(objEnemy))
	{
		
		let xs = -(id == 427 ? 2 : [1,2][DIFFICULTY])*bit;
		let ys = -height;
		if(cc%timeBetween==0)
		{
			let objS = ShotB2(x,GetStgFrameHeight+30,xs,ys,0,grav,0,10,id,420,0,3,BLEND_ADD_ARGB,false);
			ObjRender_SetBlendType(objS,BLEND_ADD_ARGB);
			ObjShot_SetSpellResist(objS,true);
			BulletHandle(objS,max(0,personalWaveCounter), type);
			ObjRender_SetScale(objS,bigScl);
			ObjShot_SetIntersectionScaleXY(objS,bigScl,bigScl);
			if(id==427)
			{
				SE_PlayLen(Shot1,40);
			}
			else
			{
				SE_PlayLen(shot1,60);
			}
			if(personalWaveCounter==-10)
			{
				personalWaveCounter = 1000;
			}
			else
			{
				personalWaveCounter--;
			}
		}
		cc2++;
		cc++;
		x+=sideSpeed * bit;
		yield;
	}
	
	function CheckX(x)
	{
		if(bit==1)
		{
			return x < GetStgFrameWidth+300;
		}
		else
		{
			return x > -300;
		}
		return true;
	}
	
	task BulletHandle(obj,cc3, type)
	{
		let startAlpha1 = 16;
		ObjShot_SetAutoDelete(obj,false);
		if(type==1)
		{
			ObjShot_SetIntersectionEnable(obj, false);
			ObjRender_SetAlpha(obj, startAlpha1);
		}
		while(ObjMove_GetSpeedY(obj) < ySpeedLim &&!Obj_IsDeleted(obj) && enemyIsAlive)
		{
			if(id==427&&cc3%31>0)
			{
				let w = 255-255*(absolute(ObjMove_GetSpeedY(obj))/10);
				ObjRender_SetColor(obj,w,w,255);
			}
			yield;
		}
		ObjShot_SetAutoDelete(obj,true);
		
		if(type==1)
		{
			ObjShot_SetIntersectionEnable(obj,true);
			let t = 10;
			ascent(i in 0..t)
			{
				if(!Obj_IsDeleted(obj))
				{
					ObjRender_SetAlpha(obj,startAlpha1+(255-startAlpha1)/(t-1)*i);
					yield;
				}
			}
			wait(5);
			t = 10;
			ascent(i in 0..t)
			{
				if(!Obj_IsDeleted(obj))
				{
					ObjRender_SetAlpha(obj,255-255/t*i);
					
					let w = 255-255/t*i;
					ObjRender_SetColor(obj,w,w,255);
					yield;
				}
			}
		}
		else
		{
			ObjShot_SetIntersectionEnable(obj,false);
			let t = 20;
			ascent(i in 0..t)
			{
				if(!Obj_IsDeleted(obj))
				{
					ObjRender_SetAlpha(obj,255-255/t*i);
					
					let w = 255-255/t*i;
					ObjRender_SetColor(obj,w,w,255);
					yield;
				}
			}
		}
		Obj_Delete(obj);
		
	}
}

task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	loop(140)
	{
		//SetShotAutoDeleteClip(32,32,32,32);
		yield;
	}
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

