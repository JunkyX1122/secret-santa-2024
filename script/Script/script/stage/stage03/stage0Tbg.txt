#include "./../../lib/lib_stageall.txt"
let GCSD=GetCurrentScriptDirectory();
let bSpell = false;
let current = GetCurrentScriptDirectory();
let fo = 0;
let adder = 0;

@Initialize
{
	TCallBg;
	ResetBG;
	SetAutoDeleteObject(true);
}

@MainLoop
{
	//SetCameraYaw(120-counter);
	counter++;
	yield;
}
let counter = 0;

task TCallBg
{
	SkyBG;
	SpellBG;
	let randC = [];
	ascent(i in 0..4)
	{
		randC ~= [rand(0,1024)];
	}
	ascent(o in 0..4)
	{
		descent(i in 0..4)
		{
			Scrolling(o, 1024*0.6 * (3+i), randC[i]+1024*o);
		}
	}

	ascent(let pos in 0..SCROLL_AMOUNT)
	{
		ScrollingMesh(0,pos,0,MESH_RAVINE, 4, 512);
		ScrollingMesh(-1008*2,pos,0,MESH_LAND, 2, 1000);
		ScrollingMesh( 1008*2,pos,0,MESH_LAND, 2, 1000);
		
		ScrollingMesh(-1006*4,pos,0,MESH_LAND, 2, 1000);
		ScrollingMesh( 1006*4,pos,0,MESH_LAND, 2, 1000);
	}
	
	
	//TNormalBackground(0);

	
}
let WORLD_SCROLL_SPEED = 2;
let SCROLL_AMOUNT = 10;
let BASE_SCALE = 4;
let MAX_CLIP = 7000;
let DISTANCE_OFFSET = -MAX_CLIP;
task ResetBG
{
	SetCameraFocusX(-7000);
	SetCameraFocusY(300);
	SetCameraFocusZ(-600);
	SetCameraAzimuthAngle(0);
	SetCameraElevationAngle(0);
	
	SetCameraPitch(0);
	SetCameraYaw(0);
	SetCameraRoll(0);
	
	SetCameraYaw(-16+180);
	SetCameraRadius(200);
	SetCameraElevationAngle(1);
	SetCameraPerspectiveClip(0,MAX_CLIP);
	SetCameraPerspectiveClip(0,MAX_CLIP);
	SetFogParam(MAX_CLIP-3000, MAX_CLIP, 161,175,204);
}

task SkyBG
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 17); //描画優先度を設定
	ObjPrim_SetTexture(obj, IMG_STAGE_02_SKY); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,1024, 512);
	ObjSprite2D_SetDestRect(obj, 0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(obj);

	ObjRender_SetAlpha(obj,255);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2+90,290,0);
	ObjRender_SetScaleXYZ(obj,1.4, 1.4, 0);
	//ObjRender_SetColor(obj, 162,165,172);

	
	let obj3 = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj3, 19); //描画優先度を設定
	ObjPrim_SetTexture(obj3, IMG_PIXEL); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj3, 0, 0,1024, 512);
	ObjSprite2D_SetDestRect(obj3, 0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(obj3);
	ObjRender_SetAlpha(obj3,64);
	ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetColor(obj3,0,0,64);
	
	//ObjRender_SetBlendType(obj3,BLEND_SUBTRACT);
	let cc = 0;
	while(true)
	{
		ObjRender_SetPosition(obj,GetStgFrameWidth/2+90,290,0);
		ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		//ObjSprite2D_SetSourceRect(obj2, cc, 0,1024+cc, 512);
		cc+=0.5;
		yield;
	}
	Obj_Delete(obj);
}

task Scrolling(x,z,c)
{ // floor

	let repeatingX = 1;
	let repeatingZ = 1;
	let treeScale = 3;
	let obj=ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriorityI(obj,18);
	ObjPrim_SetTexture(obj,IMG_STAGE_03_TREE);
	ObjRender_SetZWrite(obj,true);
	ObjRender_SetZTest(obj,true);
	
	ObjSprite3D_SetSourceRect(obj,0,0,1024*repeatingX,256);
	ObjSprite3D_SetSourceDestRect(obj,0,0,1024*repeatingX,256);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	ObjRender_SetPosition(obj, -7000 + 1024*x*treeScale, 128*treeScale, z);
	ObjRender_SetScaleXYZ(obj, treeScale, -treeScale, treeScale);
	//ObjRender_SetAngleX(obj, 90);
	while(!Obj_IsDeleted(obj))
	{		

		ObjSprite3D_SetSourceRect(obj,c,0,1024*repeatingX+c,256);
		c+=WORLD_SCROLL_SPEED/treeScale;
		yield;
	}
	Obj_Delete(obj);
}

task TNormalBackground(z)
{ // floor
	let x = -1024*2;
	
	let c = 0;
	let repeatingX = 14;
	let repeatingZ = 2;
	let obj=ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriorityI(obj,18);
	ObjPrim_SetTexture(obj,IMG_STAGE_01B_SNOW);
	ObjRender_SetZWrite(obj,true);
	ObjRender_SetZTest(obj,true);
	
	ObjSprite3D_SetSourceRect(obj,0,0,1024*repeatingX,1024*repeatingZ);
	ObjSprite3D_SetSourceDestRect(obj,0,0,1024*repeatingX,1024*repeatingZ);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	ObjRender_SetPosition(obj, x, -256, z);

	ObjRender_SetAngleX(obj, 90);
	while(!Obj_IsDeleted(obj))
	{		

		ObjSprite3D_SetSourceRect(obj,c,0,1024*repeatingX+c,1024*repeatingZ);
		c+=WORLD_SCROLL_SPEED;
		yield;
	}
	Obj_Delete(obj);
}

let MESH_RAVINE = current ~ "./07_00.mqo";
let MESH_LAND = current ~ "./Default_Background_IceMountain.mqo";
task ScrollingMesh(pos1, pos2,yp,id, ss, totalLngth)
{
	let pz = (DISTANCE_OFFSET) + (pos2) * totalLngth*ss;
	let px = pos1;
	let path = id;
	let obj = ObjMesh_Create();
	ObjMesh_Load(obj, path);
	Obj_SetRenderPriorityI(obj, 18);
	ObjRender_SetY(obj,yp);
	ObjRender_SetZWrite(obj,true);
	ObjRender_SetZTest(obj,true);
	ObjRender_SetAngleY(obj, 90);
	ObjRender_SetScaleXYZ(obj,ss,id == MESH_LAND ? ss * 0.75: ss,ss);
	ObjRender_SetLightingEnable(obj, true, true);
	ObjRender_SetLightingDiffuseColor(obj, 0,0,0);
	let c = 0;

	while(true)
	{
		//ObjRender_SetLightingDirection(obj, 1, 1, 0);

		ObjRender_SetX(obj, pz);
		ObjRender_SetZ(obj, px-0);
		pz+=-WORLD_SCROLL_SPEED;
		if(pz < DISTANCE_OFFSET)
		{
			pz += totalLngth * ss * SCROLL_AMOUNT;
		}
		c++;
		yield;
	}
	Obj_Delete(obj);
}

task SpellBGFlatColor
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 23); //描画優先度を設定
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory~"./../../../img/background/BG1/pixel.png"); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	let alpha1 = 0;
	while(true)
	{
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
			if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		ObjRender_SetAlpha(obj,64*alpha1);
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}

task SpellBG
{
	//SpellBGFlatColor;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj, 22); 
	ObjPrim_SetTexture(obj, IMG_STAGE_03_SPELL_00); 
	ObjSprite2D_SetSourceRect(obj, 0, 0,1024, 512);
	ObjSprite2D_SetDestRect(obj, 0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj2, 22); 
	ObjPrim_SetTexture(obj2, IMG_STAGE_03_SPELL_02); 
	ObjSprite2D_SetSourceRect(obj2, 0, 0,1024, 512);
	ObjSprite2D_SetDestRect(obj2, 0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(obj2);
	ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetBlendType(obj2, BLEND_SUBTRACT);
	//ObjRender_SetScaleXYZ(obj,1.5,1.5,0);



	let objRings = [];
	ascent(i in 0..3)
	{
		let objR = ObjPrim_Create(OBJ_SPRITE_2D); 
		objRings ~= [objR];
		Obj_SetRenderPriorityI(objRings[i], 24); 
		ObjPrim_SetTexture(objRings[i], IMG_STAGE_03_SPELL_01); 
		ObjSprite2D_SetSourceRect(objRings[i], 0, 0,1024, 1024);
		ObjSprite2D_SetDestRect(objRings[i], 0, 0, 1024, 1024);
		ObjSprite2D_SetDestCenter(objRings[i]);
		ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetBlendType(objRings[i],BLEND_ADD_ARGB);
		ObjRender_SetColor(objRings[i], 32,32,128);
		
	}
	ObjRender_SetScaleXYZ(objRings[0],1);
	ObjRender_SetScaleXYZ(objRings[1],0.72);
	ObjRender_SetScaleXYZ(objRings[2],0.5185);
	

	
	let alpha1 = 0;
	let c1 = 0;
	let c3 = 0;

	
	while(true)
	{
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
		if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	
		ObjRender_SetAlpha(obj, 255*alpha1);
		ObjRender_SetAlpha(obj2, 64*alpha1);
		ObjSprite2D_SetSourceRect(obj2, 0, 0+c1,1024*2, 512*2+c1);
		ascent(i in 0..3)
		{
			ObjRender_SetAlpha(objRings[i],(200-100/2*i)*alpha1);
			ObjRender_SetAngleZ(objRings[i],c3*(1-2*(i%2))*0.025);
			ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);		
		}
		c1+=1;
		c3++;
		yield;
	}

	
}
