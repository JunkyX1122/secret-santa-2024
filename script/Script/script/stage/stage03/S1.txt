#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Lunar Poem &quot;Leviathan’s Moon&quot;"]
#Text["S1 "]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 65;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(65);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 80, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderYuuma(objEnemy);
	magiccircle(objEnemy,1);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Lunar Poem &quot;Leviathan’s Moon&quot;","", LENEN, 0,0,255);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	//SetIntersectionVisualization(true);
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}
task DamageDelay()
{
	wait(60*8);
	ObjEnemy_SetDamageRate(objEnemy, (0.065/3)/1.5, (0.065/3)/3);
}
task Fire
{
	let bit = 1-2*round(rand(0,1));
	let cc = 0;
	let cc2 = 0;
	DamageDelay();
	while(!Obj_IsDeleted(objEnemy))
	{
		
		let x = ObjMove_GetX(objEnemy);
		let y = ObjMove_GetY(objEnemy);
		let pDis = Get_Distance(x,y,GetPlayerX,GetPlayerY);
		let pAng = Get_PointAngle(GetPlayerX,GetPlayerY,x,y);
		if(pDis<150)
		{
			ObjMove_SetPosition(GetPlayerObjectID,x+150*cos(pAng),y+150*sin(pAng));
		}
		if(cc%66==0)
		{
			let dis = 50;
			ascent(i in 0..20)
			{
				let ang = (cc/33)*14.213*bit + 360/20*i;
				let obj = ShotA1(x+dis*cos(ang),y+dis*sin(ang),2,ang,356,356,100,3,BLEND_ADD_ARGB,true);
			}
		}
		if(cc%7==0)
		{
			let dis = 150;
			SE_PlayLen(Shot1,60);
			let tot = 9;
			ascent(i in 0..tot)
			{
				let ang = 90+(cc/5)*4.92342*bit + 360/tot*i;
				ascent(p in 0..3)
				{
					let spd = 3+(1)*sin(cc*4.123);
					ascent(o in 0..2)
					{
						let spdP = 0.05*p;
						let obj = ShotA2(x+dis*cos(ang),y+dis*sin(ang),0+spdP,ang,spd/120,spd+spdP,432,420,30,3,BLEND_ADD_ARGB,false);
						ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
						ObjRender_SetAlpha(obj,128);
						ObjRender_SetColor(obj,128,128,200);
						if(o==0)
						{
							ObjRender_SetAlpha(obj,200);
							ObjRender_SetScale(obj,1.25);
							let w = 200/2*p;
							ObjRender_SetColor(obj,w,w,255);
						}
						
					}
				}
			}
		}
		if(cc%6==0)
		{
			ascent(i in 0..2)
			{
				ascent(o in 0..1)
				{
					let ang = (cc/8)*8.1233*bit*[1,-1][o] + 360/2*i;
					if(ang%360 > 180+30 && ang%360 < 360 - 30 && absolute(ang%360 - 270) <= 15)
					{
						SE_PlayLen(Shot2,60);
						let obj = CreateStraightLaserA1(GetStgFrameWidth/2+400*cos(ang),GetStgFrameHeight + 31,ang,0,30,999,24,60);
						LaserGrow(obj,1);
						ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
					}
				}
			}
		}
		if(cc%2==0)
		{
			ascent(i in 0..2)
			{
				ascent(o in 0..2)
				{
					let ang = (cc/8)*8.1233*bit*[1,-1][o] + 360/2*i;
					if(ang%360 > 180+30 && ang%360 < 360 - 30 && absolute(ang%360 - 270) > 15)
					{
						SE_PlayLen(Shot2,60);
						let obj = CreateStraightLaserA1(GetStgFrameWidth/2+400*cos(ang),GetStgFrameHeight + 31,ang,0,60,60,404,60);
						LaserGrow(obj,0);
						ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
					}
				}
			}
		}
		cc++;
		yield;
	}
}
task LaserGrow(obj,type)
{
	let lasLength = 600;
	ascent(i in 0..60)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ObjLaser_SetLength(obj,lasLength/59*i);
			yield;
		}
	}
	ObjLaser_SetIntersectionWidth(obj, 4);
	SE_PlayLen(shot1,60);
	if(type==1)
	{
		wait(10);
		ascent(i in 0..60)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				let scl = 1-1*cos(90/60*i);
				ObjLaser_SetIntersectionWidth(obj, 4-4*scl);
				ObjLaser_SetRenderWidth(obj, 30-30*scl);
				yield;
			}
		}
		Obj_Delete(obj);
	}
}
task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

