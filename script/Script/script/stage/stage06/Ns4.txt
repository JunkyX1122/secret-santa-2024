#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns4"]
#Text["Ns4 (Sanctuary Effect, Make Shield Appear Animation) (Also[r]sword spawning animation needs improving)"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"
#include "./RedrinFunctions.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	renderBossUnanimated(objEnemy, IMG_BOSS_REDRIN, 20);
	RecordAttackHistory("06", "Ns4", DIFFICULTY_NAMES[DIFFICULTY]);

	
	end;
	SetCommonData("SpellCardBG1",false);
	
}
@MainLoop
{
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		//ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	if(isInvuln)
	{
		if(ObjEnemy_GetInfo(objEnemy,INFO_SHOT_HIT_COUNT)>0&&invulnSoundCounter<=0)
		{
			SE_PlayLen(nodamage,50);
			invulnSoundCounter = 2;
		}
	}
	invulnSoundCounter--;
    count++;
    yield;
}
let invulnSoundCounter = 0;
@Finalize
{
}
let isInvuln = false;
task Fire
{
	let t = 120;
	let initialT = 10;
	let scl = 1.45;
	let bit = 1;
	ObjEnemy_SetDamageRate(objEnemy, (0.07)/1.5, (0.07)/3);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(boon1,60);
		SwordPathGreat(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),1*scl,0.5*scl, 90-90*bit,45*bit,(180+180-45),bit,0,t,6);
		SE_PlayLen(charge0,80);
		wait(t-initialT);
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(slash,80);
		SE_PlayLen(charge1,80);
	}
	wait(initialT);

	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(explode,80);
		SE_PlayLen(drum,80);
		ScreenShakeVert(60,12);
	}
	ascent(p in 0..22)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			SplitHalf(p,20);
			wait(3);
		}
	}
	
	wait(36);
	ObjEnemy_SetDamageRate(objEnemy, 0,0);
	SE_PlayLen(LaserDelLong,60);
	wait(36);
		
	loop
	{
		
		isInvuln = true;
		let ang = -90;
		let moveAmount = 8;
		ascent(o in 0..moveAmount-1)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				SE_PlayLen(shot1,60);
				ascent(i in 0..12)
				{
					Trailing(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),ang+360/12*i);
				}
				ang+=(180/12+2.213123)*bit;
				
				if(o<moveAmount-1)
				{
					if(o==moveAmount-2)
					{
						SE_PlayLen(boon0,60);
						ObjMove_SetDestAtFrameWeight(objEnemy, GetPlayerX, 130, 40);
					}
					else
					{
						ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2-150*bit+250/(moveAmount-3)*o*bit, 100+rand(-25,25), 40);
					}
					wait(20);
					if(!Obj_IsDeleted(objEnemy))
					{
						SE_PlayLen(shot1,40);
						ascent(i in 0..30)
						{
							let objShot = ShotA2(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),6,ang+360/30*i,-4/30,2,331,418,10,2,BLEND_ALPHA,true);
						}
						ang+=180/30;
						ascent(i in 0..30)
						{
							let objShot = ShotA2(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),6,ang+360/30*i,-5/30,1,325,418,10,2,BLEND_ALPHA,true);
						}
						ang+=180/30;
						wait(20);
					}
				}
			}
		}
		
		bit*=-1;
		isInvuln = false;
		ObjEnemy_SetDamageRate(objEnemy, (0.07)/1.5, (0.07)/3);
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(boon1,60);
			SwordPathGreat(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),1*scl,0.5*scl, 90-90*bit,45*bit,(180+180-45),bit,0,t,6);
			SE_PlayLen(charge0,80);
			wait(t-initialT);
		}
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(slash,80);
			SE_PlayLen(charge1,80);
		}
		wait(initialT);
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(explode,80);
			SE_PlayLen(drum,80);
			ScreenShakeVert(60,12);
		}
		ascent(p in 0..22)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				SplitHalf(p,20);
				wait(3);
			}
		}
		bit*=-1;
		wait(36);
		ObjEnemy_SetDamageRate(objEnemy, 0,0);
		SE_PlayLen(LaserDelLong,60);
		wait(36);
		
		
		bit*=-1;
	}
}
task Trailing(xs,ys,ang)
{
	
	let t = 40;
	let xIn = xs;
	let yIn = ys;
	let cosAng = cos(ang);
	let sinAng = sin(ang);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(Shot1,40);
			let scl = 1/t*i;
			let ang2 = rand(0,360);
			let randDis = rand(0,20);
			let randX = randDis*cos(ang2);
			let randY = randDis*sin(ang2);
			let x = 500*cosAng*scl+randX;
			let y = 500*sinAng*scl+randY;
			let id = [293,299][round(rand(0,1))];
			let objShot = ShotA2(xIn+x, yIn+y,2,ang,0.02,10,id,id,10,2,BLEND_ADD_ARGB,true);
			ObjRender_SetBlendType(objShot,BLEND_ADD_ARGB);
			wait(4);
		}
	}
}
task SplitHalf(p,spreadOut)
{
	let x = ObjMove_GetX(objEnemy);
	let y = ObjMove_GetY(objEnemy);
	let t = 30;
	
	ascent(i in 0..t)
	{
		SE_PlayLen(shot1,60);
		let bit = 1;
		let ang = angleSwordCapture;
		ascent(o in 0..2)
		{
			if(i>0||(i==0&&o==0)&&(!Obj_IsDeleted(objEnemy)))
			{
				
				
				let spreadAng = 270;
				let id = [55,56][p%2];
				let ispd = 0.5;
				let spd = ispd+p/2;
				let d = -400 + 900/t*i;
				let ds = (10+1*p)*p;
				let x2 = x + d * cos(ang) + ds*cos(ang+90+180*o);
				let y2 = y + d * sin(ang) + ds*sin(ang+90+180*o);
				let accelT = 180;
				let ang2 = ang+(spreadAng*bit-spreadAng/(t-1)*i*bit)*1/spreadOut*p;
				let maxSpd = 3/t*i;
				if(Get_Distance(x2,y2,GetPlayerX,GetPlayerY)>75)
				{
					let objShot = ShotA2(x2, y2, 0, ang2,maxSpd/accelT,maxSpd, id, id,20,2,BLEND_ALPHA,false);
				}
				
			}
			bit*=-1;
		}
		wait(1);
	}
}
let angleSwordCapture = 0;
task SwordPathGreat(sourceX, sourceY, xS, yS, startAng,ovalAng,spinAmount,bit,type,renderTime,renderBetween)
{
	

	let cc = 0;
	let swordScl = 1;
	let scl = 0;
	let trueAng = 0;
		
	let rad = 270;
	let x = 0;

	
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjPrim_SetTexture(obj, IMG_SWORD);
	Obj_SetRenderPriorityI(obj, 49);
	ObjSprite2D_SetSourceRect(obj,512, 0, 512*2, 128);
	ObjSprite2D_SetDestRect(obj,512, 0, 512*2, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj, sourceX, sourceY,0);
	ObjRender_SetAngleXYZ(obj, 0, 0,0);
	ObjRender_SetScaleXYZ(obj, 0, 0,0);
	
	let texture =  IMG_SLASH;
	let tri = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(tri, PRIMITIVE_TRIANGLESTRIP);
	Obj_SetRenderPriorityI(tri, 48);
	ObjPrim_SetTexture(tri, texture);

	let objspell = CreateShotA1(sourceX,sourceY,0,0,1,0);
	ObjRender_SetAlpha(objspell,0);
	let d = renderTime+1+10;
	ascent(o in 0..renderTime)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let ang = 0;
			ObjPrim_SetVertexCount(tri, (renderBetween*(o+1))*2);
			ascent(i in 0..renderBetween*(o+1))
			{
				ang = startAng-(spinAmount
				-spinAmount
				*(cos(90/(renderBetween*(renderTime))*i)))
				*bit-ovalAng;
				let a = startAng;
				let b = startAng-spinAmount*bit;
				let xxx = 1/(renderBetween*(renderTime))*i;
				ang = (a + (b - a) * (xxx^8));
				
				
				let sclXX = 1/(renderBetween*(renderTime))*(i);
				let xx = 0+rad*xS*cos(ang)*sclXX;
				let yy = 0+rad*yS*sin(ang)*sclXX;
				let centerX = 0;
				let centerY = 0;

				let x=(xx-centerX)*cos(ovalAng) - (yy-centerY)*sin(ovalAng) + centerX;
				let y=(xx-centerX)*sin(ovalAng) + (yy-centerY)*cos(ovalAng) + centerY;
				
				ObjShot_SetIntersectionLine(objspell,sourceX,sourceY,sourceX + x,sourceY + y,30*sclXX);
				
				ObjPrim_SetVertexPosition(tri, i*2  , sourceX + 0, sourceY + 0, 0);
				ObjPrim_SetVertexPosition(tri, i*2+1, sourceX + x, sourceY + y, 0);
				
				ObjPrim_SetVertexUVT(tri,i*2  ,256/(renderBetween*renderTime)*(i)+cc,0);
				ObjPrim_SetVertexUVT(tri,i*2+1,256/(renderBetween*renderTime)*(i)+cc,128);
				ObjPrim_SetVertexAlpha(tri, i*2  , 255-400*sin(180/(renderBetween*renderTime)*i));
				ObjPrim_SetVertexAlpha(tri, i*2+1, 255-400*sin(180/(renderBetween*renderTime)*i));
				
				ObjPrim_SetVertexColor(tri,i*2+1,255,165,0);
				
				scl = Get_Distance(0,0,x,y)/(512)*swordScl/(renderTime-1)*o;
				trueAng = Get_PointAngle(x,y,0,0);
				angleSwordCapture = trueAng;
			
				ObjRender_SetAngleXYZ(obj, 0, 0,trueAng);
				ObjRender_SetScaleXYZ(obj, scl,scl,0);
				ObjRender_SetPosition(obj, sourceX+256*scl*cos(trueAng), sourceY+256*scl*sin(trueAng),0);
				
			}		
			d--;
			
			//ObjRender_SetPosition(tri, sourceX, sourceY, 0);
			cc-=96-(64/renderTime*o);
			yield;
		}
	}
	Obj_Delete(objspell);
	let t = 60;
	descent(o in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ascent(i in 0..renderBetween*renderTime)
			{
				ObjPrim_SetVertexUVT(tri,i*2  ,256/(renderBetween*renderTime)*(i)+cc,0);
				ObjPrim_SetVertexUVT(tri,i*2+1,256/(renderBetween*renderTime)*(i)+cc,128);
				
				ObjPrim_SetVertexAlpha(tri, i*2  , (255-400*sin(180/(renderBetween*renderTime)*i))*1/t*o);
				ObjPrim_SetVertexAlpha(tri, i*2+1, (255-400*sin(180/(renderBetween*renderTime)*i))*1/t*o);
				
				ObjPrim_SetVertexColor(tri,i*2+1,255,165,0);
			}	
			if(type==0)
			{
				ObjRender_SetPosition(obj, sourceX+256*scl*cos(trueAng), sourceY+256*scl*sin(trueAng),0);
			}
			else
			{
				ObjRender_SetPosition(obj,ObjRender_GetX(obj)+10/t*o*cos(trueAng-90*bit),ObjRender_GetY(obj)+10/t*o*sin(trueAng-90*bit),0);
				ObjRender_SetAngleZ(obj,ObjRender_GetAngleZ(obj)-20*bit);
			}
			//ObjRender_SetPosition(tri, sourceX, sourceY, 0);
			ObjRender_SetAlpha(obj,255);
			cc-=8/t*o;
			yield;
		}
	}
	Obj_Delete(tri);
	Obj_Delete(obj);
}

task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

