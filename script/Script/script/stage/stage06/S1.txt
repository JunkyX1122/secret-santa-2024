#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Blaze &quot;Binding Blade&quot;"]
#Text["S1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"
#include "./RedrinFunctions.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 65;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(65);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_REDRIN, 20);
	magiccircle(objEnemy,1);
	RecordAttackHistory("06", "S1", DIFFICULTY_NAMES[DIFFICULTY]);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Blaze &quot;Binding Blade&quot;","", LENEN, 255,0,0);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	SetCommonData("BossName", "Redrin Lightclaw");
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("Stage_06Blue",false);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}
let initGSpeed = 8;
let gSpeed = initGSpeed;
let phase = 0;
task Fire
{
	let bit = 1;
	while(!Obj_IsDeleted(objEnemy))
	{
		Binding(bit);
		wait(40+60);
		Binding(-bit);
		wait(100);
		wait(190);
		loop(3)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				SE_PlayLen(charge1,80);
				SwordPath(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), -90+20*bit,-bit,0,1);
				wait(40);
				bit*=-1;
			}
		}
		wait(120);
		ObjEnemy_SetDamageRate(objEnemy, (0.09/3)/1.5, (0.09/3)/3);
	}
}

task Binding(bit)
{
	SE_PlayLen(charge0,80);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2-rand(100,50)*bit, rand(100,120), 35);
	wait(40);
	if(!Obj_IsDeleted(objEnemy))
	{
		SwordPath(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), -90+20*bit,-bit,0,0);
		
		
		let t = 10;
		let d = 300;
		ascent(i in 0..t)
		{
			let x = ObjMove_GetX(objEnemy) - d * bit + (d*2)/(t-1)*i*bit;
			let y = ObjMove_GetY(objEnemy) + 125 - (125*1.75)/(t-1)*i - 125;
			let ang = 90+20*bit-(80)/(t-1)*i*bit;
			ShootHolySword(x,y,ang);
			ChainFollow(x,y,ang);
			WarningLaser(x,y,ang);
		}
	}
	
}

task ShootHolySword(x,y,angle)
{
	let speed = 20;
	S_Laser2(x+30*cos(angle),y+30*sin(angle),angle,speed*cos(angle),speed*sin(angle),60,10,50,405,0.5,3,true,7);
	S_Laser2(x,y,angle+90,speed*cos(angle),speed*sin(angle),60,10,50,405,0.5,1,true,7);
}
task WarningLaser(x,y,ang)
{
	let t = 30;
	let slashWidth = 35;
	let dis = 800;
	ascent(i in 0..t)
	{
		let sideDis = 10*sin(90/(t-1)*i);
		ascent(o in 0..2)
		{
			if(i>0||o==0)
			{
				let laser = CreateStraightLaserA1(x+sideDis*cos(ang+90-180*o),y+sideDis*sin(ang+90-180*o),ang,810*2,slashWidth,0,405,9000);
				ObjRender_SetBlendType(laser,BLEND_ADD_ARGB);
				ObjShot_SetAutoDelete(laser,false);
				ObjStLaser_SetSource(laser,false);
				LaserGrowFade(laser,dis,64-64/t*i);
			}
		}
		yield;
	}
}

task LaserGrowFade(obj,dis,alpha)
{
	ObjLaser_SetItemDistance(obj, 1000);
	let t = 60;
	ascent(i in 0..t)
	{
		ObjLaser_SetLength(obj,dis/t*i);
		ObjRender_SetAlpha(obj,alpha-alpha/t*i);
		yield;
	}
	Obj_Delete(obj);
}
task ChainFollow(x,y,angle)
{
	wait(60);
	let cosAng = cos(angle);
	let sinAng = sin(angle);
	let cosAng2 = cos(angle+90);
	let sinAng2 = sin(angle+90);
	
	let t = 80;
	let wvds = 30;
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(chime1,60);
			let xT = x + 800/t*i * cosAng;
			let yT = y + 800/t*i * sinAng;
			
			let scl = sin(i*12.35234);
			ascent(o in 0..2)
			{
				let b = 1-2*o;
				let xT2 = xT + wvds * cosAng2 * scl * b;
				let yT2 = yT + wvds * sinAng2 * scl * b;
				let spd = 0.15;
				let id = i%3!=0 ? 428 : 86;
				let objShot = ShotA1(xT2, yT2,0,angle+90*b,id,id,10,2,BLEND_ADD_ARGB,true);
				ObjMove_AddPatternA2(objShot,180,0,NO_CHANGE,0.5/180,0.5,0);
				ObjRender_SetBlendType(objShot,BLEND_ADD_ARGB);
				if(i%3!=0)
				{
					ObjShot_SetDeleteFrameA6(objShot,90,1);
				}
				else
				{
					ObjShot_SetDeleteFrameA6(objShot,90*4,1);
				}
			}
			wait(2); 
		}
	}
}

task SwordPath(sourceX, sourceY, startAng,bit,type,shoottype)
{
	SE_PlayLen(drum,80);
	SE_PlayLen(slash,80);
	let renderBetween = 7;
	let renderTime = 10;
	let cc = 0;
	let swordScl = 1;
	let scl = 0;
	let trueAng = 0;
		
	let rad = 270;
	let x = 0;
	let ovalAng = -startAng;
	
	ScreenShake(renderBetween*3,6);
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjPrim_SetTexture(obj, IMG_PIXEL);
	Obj_SetRenderPriorityI(obj, 49);
	ObjSprite2D_SetSourceRect(obj,512, 0, 512*2, 128);
	ObjSprite2D_SetDestRect(obj,512, 0, 512*2, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj, sourceX, sourceY,0);
	ObjRender_SetAngleXYZ(obj, 0, 0,0);
	ObjRender_SetScaleXYZ(obj, 0, 0,0);
	
	let texture =  IMG_SLASH;
	let tri = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(tri, PRIMITIVE_TRIANGLESTRIP);
	Obj_SetRenderPriorityI(tri, 48);
	ObjPrim_SetTexture(tri, texture);
	
	let objspell = CreateShotA1(sourceX,sourceY,0,0,1,0);
	ObjRender_SetAlpha(objspell,0);
	let d = renderTime+1;
	ascent(o in 0..renderTime)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let ang = 0;
			ObjPrim_SetVertexCount(tri, (renderBetween*(o+1))*2);
			ascent(i in 0..renderBetween*(o+1))
			{
				ang = startAng-270/(renderBetween*(renderTime))*i*bit-ovalAng;
				let xx = 0+rad/2*cos(ang);
				let yy = 0+rad*sin(ang);
				let centerX = 0;
				let centerY = 0;

				let x=(xx-centerX)*cos(ovalAng) - (yy-centerY)*sin(ovalAng) + centerX;
				let y=(xx-centerX)*sin(ovalAng) + (yy-centerY)*cos(ovalAng) + centerY;
				
				ObjShot_SetIntersectionLine(objspell,sourceX,sourceY,sourceX + x,sourceY + y,30);
				
				ObjPrim_SetVertexPosition(tri, i*2  , sourceX + 0, sourceY + 0, 0);
				ObjPrim_SetVertexPosition(tri, i*2+1, sourceX + x, sourceY + y, 0);
				
				ObjPrim_SetVertexUVT(tri,i*2  ,256/(renderBetween*renderTime)*(i)+cc,0);
				ObjPrim_SetVertexUVT(tri,i*2+1,256/(renderBetween*renderTime)*(i)+cc,128);
				ObjPrim_SetVertexAlpha(tri, i*2  , 255*sin(180/(renderBetween*renderTime)*i));
				ObjPrim_SetVertexAlpha(tri, i*2+1, 255*sin(180/(renderBetween*renderTime)*i));
				
				ObjPrim_SetVertexColor(tri,i*2+1,255,165,0);
				
				scl = Get_Distance(0,0,x,y)/(512)*swordScl/(renderTime-1)*o;
				trueAng = Get_PointAngle(x,y,0,0);
				
				if(i>=renderBetween*(o))
				{
					let numT = [6,3][shoottype];
					ascent(p in 0..numT)
					{
						
						let sprd = [0.75,0.3][shoottype];
						let disAm = 0.25+(sprd)/(numT-1)*(p);
						let spdScl = Get_Distance(0,0,x*disAm,y*disAm)/512;
						let shid = [56,44][shoottype];
						let deid = [56,44][shoottype];
						let spd = 18;
						let angP = 0;
						let totalSpd = spd * spdScl;
						let objShot = ShotA2(sourceX+x*disAm, sourceY+y*disAm,totalSpd*1.3,trueAng + angP*bit,-totalSpd/60, totalSpd/3,shid,deid,d,2,BLEND_ALPHA,false);
					}
				}
				
				ObjRender_SetAngleXYZ(obj, 0, 0,trueAng);
				ObjRender_SetScaleXYZ(obj, scl,scl,0);
				ObjRender_SetPosition(obj, sourceX+256*scl*cos(trueAng), sourceY+256*scl*sin(trueAng),0);
				
			}		
			d--;
			
			//ObjRender_SetPosition(tri, sourceX, sourceY, 0);
			cc-=96-(64/renderTime*o);
			yield;
		}
	}
	Obj_Delete(objspell);
	let t = 20;
	descent(o in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ascent(i in 0..renderBetween*renderTime)
			{
				ObjPrim_SetVertexUVT(tri,i*2  ,256/(renderBetween*renderTime)*(i)+cc,0);
				ObjPrim_SetVertexUVT(tri,i*2+1,256/(renderBetween*renderTime)*(i)+cc,128);
				
				ObjPrim_SetVertexAlpha(tri, i*2  , 255*sin(180/(renderBetween*renderTime)*i)/t*o);
				ObjPrim_SetVertexAlpha(tri, i*2+1, 255*sin(180/(renderBetween*renderTime)*i)/t*o);
				
				ObjPrim_SetVertexColor(tri,i*2+1,255,165,0);
			}	
			if(type==0)
			{
				ObjRender_SetPosition(obj, sourceX+256*scl*cos(trueAng), sourceY+256*scl*sin(trueAng),0);
			}
			else
			{
				ObjRender_SetPosition(obj,ObjRender_GetX(obj)+10/t*o*cos(trueAng-90*bit),ObjRender_GetY(obj)+10/t*o*sin(trueAng-90*bit),0);
				ObjRender_SetAngleZ(obj,ObjRender_GetAngleZ(obj)-20*bit);
			}
			//ObjRender_SetPosition(tri, sourceX, sourceY, 0);
			ObjRender_SetAlpha(obj,255/t*o);
			cc-=8/t*o;
			yield;
		}
	}
	Obj_Delete(tri);
	Obj_Delete(obj);
}

task Fader(objFade)
{
	let Alpha = 32;
	loop(30)
	{
		ObjRender_SetAlpha(objFade,Alpha);
		Alpha-=32/30;	
		yield;
	}
	Obj_Delete(objFade);
}
task S_Laser2(X,Y,angle,xmove,ymove,growdeley,deley,stay,ID,scaleX,scaleY,bouncebool,sizehit)
{
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0&&bouncebool==true)
	{
		SE_PlayLen(Shot2,60+30);	
	}
	let obj = CreateShotA1(X,Y,0,angle,ID,0);
	ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	ObjShot_SetIntersectionEnable(obj,false);
	ObjShot_SetSpellResist(obj,true);
	ObjShot_SetAutoDelete(obj,false);
	//318
	let scaleYIn = 0;
	let xmove2 = xmove;
	let ymove2 = ymove;
	let totaldeley = growdeley+deley;
	
	ascent(i in 0..growdeley)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleXYZ(obj,i/growdeley*(scaleX/5),i/growdeley*scaleY,1);
			scaleYIn+=scaleY/growdeley;
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
	loop(deley)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
		let scaleXIn = scaleX/5;
		scaleX/=5;
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0&&bouncebool==true)
	{
		SE_PlayLen(LaserFireShort,20+30);
	}
	loop(4)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			loop(1)
			{
				let objFade = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,angle,ID,0);
				ObjRender_SetBlendType(objFade,BLEND_ADD_ARGB);
				ObjShot_SetIntersectionEnable(objFade,false);
				ObjRender_SetScaleXYZ(objFade,scaleX,scaleY,1);
				Fader(objFade);
			}
			if(bouncebool==true)
			{
		
			}
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX+=(scaleXIn*4)/4;
			
			yield;
		}
	}
	loop(stay)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			loop(1)
			{
				let objFade = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,angle,ID,0);
				ObjRender_SetBlendType(objFade,BLEND_ADD_ARGB);
				ObjShot_SetIntersectionEnable(objFade,false);
				ObjRender_SetScaleXYZ(objFade,scaleX,scaleY,1);
				Fader(objFade);
			}
			if(bouncebool==true)
			{

			}
			
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleX(obj,scaleX);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			yield;
		}
	}
	loop(20)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX-=(scaleXIn*5)/20;
			yield;
		}
	}
	Obj_Delete(obj);
}

task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

