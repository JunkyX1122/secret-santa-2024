#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns2"]
#Text["Ns2 (Remember to add the Wings of Resolve text display)"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(250);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 170, 40);
	renderYuuma(objEnemy);

	end;
	SetCommonData("SpellCardBG1",false);
	
}
@MainLoop
{
	SetCommonData("BossX", ObjMove_GetX(objEnemy));
	SetCommonData("BossY", ObjMove_GetY(objEnemy));
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        
        SetAutoDeleteObject(true);
    }
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}
let wingFireBool = false;
task Fire
{
	let bit = 1;
	SE_PlayLen(LaserDelLong,60);
	WingAura(objEnemy);
	
	Spin(GetStgFrameWidth/2-275,100,1);
	Spin(GetStgFrameWidth/2+275,100,-1);
	
	SwordPath(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),0.5,1, -90+20*bit,270,-bit,0,10,7);
	
	wait(120);
	WingFire;
	bit = 1-2*round(rand(0,1));
	while(!Obj_IsDeleted(objEnemy))
	{
		loop(2)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				Slash(GetPlayerX,GetPlayerY,90+rand(10,40)*bit);
				ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*bit, 170+rand(20,-20), 49);
				wait(50);
				wingFireBool = true;
				if(!Obj_IsDeleted(objEnemy))
				{
					SwordPath(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),0.5,1, -90+20*bit,270,-bit,0,10,7);
					wait(70);
					bit*=-1;
				}
			}
		}
		wait(50);
		if(!Obj_IsDeleted(objEnemy))
		{
			wingFireBool = false;
			ObjMove_SetDestAtFrameWeight(objEnemy, GetPlayerX,300, 100);
			SE_PlayLen(charge0,60);
			SE_PlayLen(charge1,60);
		}
		wait(120);
		if(!Obj_IsDeleted(objEnemy))
		{
			SwordPath(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),1,0.3, -90,360,-bit,0,12,6);
			SplitHalf;
		}
		wait(150);
		ObjEnemy_SetDamageRate(objEnemy, (0.09)/1.5, (0.09)/3);
	}
}
task SplitHalf
{
	let x = ObjMove_GetX(objEnemy);
	let y = GetStgFrameHeight;
	let t = 25;
	ascent(i in 0..t)
	{
		SE_PlayLen(shot1,60);
		let bit = 1;
		ascent(o in 0..2)
		{
			ascent(p in 0..5)
			{
				let id = [55,56][p%2];
				let ispd = 0.5;
				let spd = ispd+p/2;
				
				let objShot = ShotA2(x+(3*p+(3*p))*bit, y-GetStgFrameHeight/(t-1)*i,ispd,90-(90+90/(t-1)*i)*bit,(spd-ispd)/60,spd,id,id,10+t-i,2,BLEND_ADD_ARGB,false);
			}
			bit*=-1;
		}
		//wait(1);
	}
}
task WingFire()
{
	let t = 20;
	while(!Obj_IsDeleted(objEnemy))
	{
		let bit = 1;
		if(wingFireBool)
		{
			SE_PlayLen(Shot2,60);
			ascent(i in 0..t)
			{
				loop(2)
				{
					let x = ObjMove_GetX(objEnemy)-100*bit;
					let y = ObjMove_GetY(objEnemy)-10;
					let ang = Get_PointAngle(GetPlayerX,GetPlayerY,x,y)-90*bit+180/(t-1)*i*bit;
					let objShot = ShotA2(x, y,1,ang,(1)/60,2,73,417,10,2,BLEND_ADD_ARGB,true);
					bit*=-1;
				}
			}
			wait(45);
		}
		else
		{
			yield;
		}
		
	}
}
task Spin(x,y,bit)
{
	let ang = -90;
	
	while(!Obj_IsDeleted(objEnemy))
	{
		ascent(i in 0..2)
		{
			Trailing(x,y,ang);
			ang+=360/2;
		}	
		ang+=29.43242*bit;
		wait(20);
	}
}
task Trailing(xs,ys,ang)
{
	SE_PlayLen(shot1,60);
	let t = 40;
	let xIn = xs;
	let yIn = ys;
	let cosAng = cos(ang);
	let sinAng = sin(ang);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(Shot1,40);
			let scl = 1/t*i;
			let ang2 = rand(0,360);
			let randDis = rand(0,20);
			let randX = randDis*cos(ang2);
			let randY = randDis*sin(ang2);
			let x = 500*cosAng*scl+randX;
			let y = 500*sinAng*scl+randY;
			let objShot = ShotA2(xIn+x, yIn+y,2,ang,0.02,10,298,298,10,2,BLEND_ADD_ARGB,true);
			ObjRender_SetBlendType(objShot,BLEND_ADD_ARGB);
			wait(4);
		}
	}
}
task SwordPath(sourceX, sourceY, xS, yS, startAng,spinAmount,bit,type,renderTime,renderBetween)
{
	SE_PlayLen(drum,80);
	SE_PlayLen(slash,80);

	let cc = 0;
	let swordScl = 1;
	let scl = 0;
	let trueAng = 0;
		
	let rad = 270;
	let x = 0;
	let ovalAng = -startAng;
	
	ScreenShake(renderBetween*3,6);
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);

	ObjPrim_SetTexture(obj, IMG_PIXEL);
	Obj_SetRenderPriorityI(obj, 49);
	ObjSprite2D_SetSourceRect(obj,512, 0, 512*2, 128);
	ObjSprite2D_SetDestRect(obj,512, 0, 512*2, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj, sourceX, sourceY,0);
	ObjRender_SetAngleXYZ(obj, 0, 0,0);
	ObjRender_SetScaleXYZ(obj, 0, 0,0);
	
	let texture =  IMG_SLASH;
	let tri = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(tri, PRIMITIVE_TRIANGLESTRIP);
	Obj_SetRenderPriorityI(tri, 48);
	ObjPrim_SetTexture(tri, texture);

	let objspell = CreateShotA1(sourceX,sourceY,0,0,1,0);
	ObjRender_SetAlpha(objspell,0);
	let d = renderTime+1+10;
	ascent(o in 0..renderTime)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(shot1,60);
			let ang = 0;
			ObjPrim_SetVertexCount(tri, (renderBetween*(o+1))*2);
			ascent(i in 0..renderBetween*(o+1))
			{
				ang = startAng-spinAmount/(renderBetween*(renderTime))*i*bit-ovalAng;
				let xx = 0+rad*xS*cos(ang);
				let yy = 0+rad*yS*sin(ang);
				let centerX = 0;
				let centerY = 0;

				let x=(xx-centerX)*cos(ovalAng) - (yy-centerY)*sin(ovalAng) + centerX;
				let y=(xx-centerX)*sin(ovalAng) + (yy-centerY)*cos(ovalAng) + centerY;
				
				ObjShot_SetIntersectionLine(objspell,sourceX,sourceY,sourceX + x,sourceY + y,30);
				
				ObjPrim_SetVertexPosition(tri, i*2  , sourceX + 0, sourceY + 0, 0);
				ObjPrim_SetVertexPosition(tri, i*2+1, sourceX + x, sourceY + y, 0);
				
				ObjPrim_SetVertexUVT(tri,i*2  ,256/(renderBetween*renderTime)*(i)+cc,0);
				ObjPrim_SetVertexUVT(tri,i*2+1,256/(renderBetween*renderTime)*(i)+cc,128);
				ObjPrim_SetVertexAlpha(tri, i*2  , 255*sin(180/(renderBetween*renderTime)*i));
				ObjPrim_SetVertexAlpha(tri, i*2+1, 255*sin(180/(renderBetween*renderTime)*i));
				
				ObjPrim_SetVertexColor(tri,i*2+1,255,165,0);
				
				scl = Get_Distance(0,0,x,y)/(512)*swordScl/(renderTime-1)*o;
				trueAng = Get_PointAngle(x,y,0,0);
				
			
				ObjRender_SetAngleXYZ(obj, 0, 0,trueAng);
				ObjRender_SetScaleXYZ(obj, scl,scl,0);
				ObjRender_SetPosition(obj, sourceX+256*scl*cos(trueAng), sourceY+256*scl*sin(trueAng),0);
				
			}		
			d--;
			
			//ObjRender_SetPosition(tri, sourceX, sourceY, 0);
			cc-=96-(64/renderTime*o);
			yield;
		}
	}
	Obj_Delete(objspell);
	let t = 60;
	descent(o in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ascent(i in 0..renderBetween*renderTime)
			{
				ObjPrim_SetVertexUVT(tri,i*2  ,256/(renderBetween*renderTime)*(i)+cc,0);
				ObjPrim_SetVertexUVT(tri,i*2+1,256/(renderBetween*renderTime)*(i)+cc,128);
				
				ObjPrim_SetVertexAlpha(tri, i*2  , 255*sin(180/(renderBetween*renderTime)*i)/t*o);
				ObjPrim_SetVertexAlpha(tri, i*2+1, 255*sin(180/(renderBetween*renderTime)*i)/t*o);
				
				ObjPrim_SetVertexColor(tri,i*2+1,255,165,0);
			}	
			if(type==0)
			{
				ObjRender_SetPosition(obj, sourceX+256*scl*cos(trueAng), sourceY+256*scl*sin(trueAng),0);
			}
			else
			{
				ObjRender_SetPosition(obj,ObjRender_GetX(obj)+10/t*o*cos(trueAng-90*bit),ObjRender_GetY(obj)+10/t*o*sin(trueAng-90*bit),0);
				ObjRender_SetAngleZ(obj,ObjRender_GetAngleZ(obj)-20*bit);
			}
			//ObjRender_SetPosition(tri, sourceX, sourceY, 0);
			ObjRender_SetAlpha(obj,255/t*o);
			cc-=8/t*o;
			yield;
		}
	}
	Obj_Delete(tri);
	Obj_Delete(obj);
}
task Slash(x,y,angleT)
{
	let X = x;
	let Y = y;
	let waiter = 50;
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(charge1,60);	
	}
	let speed = 90;
	if(!Obj_IsDeleted(objEnemy))
	{
		S_Laser2((X-400*cos(angleT)),(Y-400*sin(angleT)),angleT,speed*cos(angleT),speed*sin(angleT),waiter,1,50,400,0.5,50,true,7,BLEND_ADD_ARGB);
		ascent(i in 1..7)
		{
			S_Laser2((X-400*cos(angleT))+(1*i*cos(angleT+90)),(Y-400*sin(angleT))+(1*i*sin(angleT+90)),angleT-i/2,speed*cos(angleT),speed*sin(angleT),waiter,1,20,406,0.5,50,false,7,BLEND_ADD_ARGB);
			S_Laser2((X-400*cos(angleT))-(1*i*cos(angleT+90)),(Y-400*sin(angleT))-(1*i*sin(angleT+90)),angleT+i/2,speed*cos(angleT),speed*sin(angleT),waiter,1,20,406,0.5,50,false,7,BLEND_ADD_ARGB);
			
		}
	}
}

task S_Laser2(X,Y,angle,xmove,ymove,growdeley,deley,stay,ID,scaleX,scaleY,bouncebool,sizehit,BT)
{
	let obj = CreateShotA1(X,Y,0,angle,ID,0);
	ObjRender_SetBlendType(obj,BT);
	ObjShot_SetIntersectionEnable(obj,false);
	ObjShot_SetSpellResist(obj,true);
	ObjShot_SetAutoDelete(obj,false);
	//318
	let scaleYIn = 0;
	let xmove2 = xmove;
	let ymove2 = ymove;
	let totaldeley = growdeley+deley;

	ascent(i in 0..growdeley)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleXYZ(obj,i/growdeley*(scaleX/5),i/growdeley*scaleY,1);
			scaleYIn+=scaleY/growdeley;
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
	loop(deley)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
		let scaleXIn = scaleX/5;
		scaleX/=5;
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(LaserFireShort,70);
		
	}
	loop(4)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			loop(1)
			{
				let objFade = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,angle,ID,0);
				ObjRender_SetBlendType(objFade,BLEND_ADD_ARGB);
				ObjShot_SetIntersectionEnable(objFade,false);
				ObjRender_SetScaleXYZ(objFade,scaleX,scaleY,1);
				Fader(objFade);
			}
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX+=(scaleXIn*4)/4;
			
			yield;
		}
	}
	loop(stay)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			loop(1)
			{
				let objFade = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,angle,ID,0);
				ObjRender_SetBlendType(objFade,BLEND_ADD_ARGB);
				ObjShot_SetIntersectionEnable(objFade,false);
				ObjRender_SetScaleXYZ(objFade,scaleX,scaleY,1);
				Fader(objFade);
			}
			if(bouncebool==true)
			{

			}
			
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleX(obj,scaleX);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			yield;
		}
	}
	loop(20)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX-=(scaleXIn*5)/20;
			yield;
		}
	}
	Obj_Delete(obj);
}
task Fader(objFade)
{
	let Alpha = 32;
	loop(30)
	{
		ObjRender_SetAlpha(objFade,Alpha);
		Alpha-=32/30;	
		yield;
	}
	Obj_Delete(objFade);
}


task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

