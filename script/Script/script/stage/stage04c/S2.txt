#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["&quot;Putrescence&quot;"]
#Text["S2"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 65;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(65);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderYuuma(objEnemy);
	magiccircle(objEnemy,1);
	
	end;

	
	
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",false);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.04/3)/1.5, (0.04/3)/3);
		Fire;
		SpellDeclair();
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}
let initGSpeed = 8;
let gSpeed = initGSpeed;
let phase = 0;

task SpellDeclair()
{
	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("&quot;Putrescence&quot;","", LENEN, 0,0,0);
	ScreenShake(60,4);
	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	SetCommonData("SpellCardBG1",true);
}
task Fire
{
	//Occ(GetStgFrameWidth/2,GetStgFrameHeight+300,-90);
	let bit = 1-2*round(rand(0,1));
	
	while(!Obj_IsDeleted(objEnemy))
	{
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+30*bit, 150, 100);
		SwordBeamFire(bit);
		bit*=-1;
		//SwordBeamFire(-bit);
		wait(60*4);
		ObjEnemy_SetDamageRate(objEnemy, (0.06/3)/1.5, (0.06/3)/3);
	}
}

function SwordBeamFire(bit)
{
	SE_PlayLen(LaserDelLong, 60);
	let objSword = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objSword, 29);
	ObjPrim_SetTexture(objSword, IMG_GATOSWORD);
	ObjSprite2D_SetSourceRect(objSword, 0, 0, 2048, 256);
	ObjSprite2D_SetDestRect(objSword, 0, 0, 2048, 256);
	ObjSprite2D_SetDestCenter(objSword);
	let x = ObjMove_GetX(objEnemy);
	let y = ObjMove_GetY(objEnemy);
	let tim = 120;
	ascent(i in 0..tim)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			x = ObjMove_GetX(objEnemy);
			y = ObjMove_GetY(objEnemy);
			let t = 1/(tim-1)*i;
			let col = 255*sin(90*t);
			let scl = 0.1 + 0.2 * sin(90*t);
			ObjRender_SetPosition(objSword, x + Interpolate_Decelerate(0, 200*bit, t), y + Interpolate_Decelerate(0, -50, t), 0);
			ObjRender_SetColor(objSword, col, col, col);
			ObjRender_SetAlpha(objSword, col);
			ObjRender_SetAngleZ(objSword, Interpolate_Smoother(90-360*bit, 90, t));
			ObjRender_SetScaleXYZ(objSword, scl, scl * bit, 0);
			yield;
		}
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(charge0,60);
	}
	tim = 120;
	PreSwingWarning(x,y,bit);
	ascent(i in 0..tim)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			x = ObjMove_GetX(objEnemy);
			y = ObjMove_GetY(objEnemy);
			let t = 1/(tim-1)*i;
			ObjRender_SetPosition(objSword, x + 200*bit, y - 50, 0);
			ObjRender_SetAngleZ(objSword, Interpolate_Smoother(90, 90 - 270*bit, t));
			
			BeamLaser(ObjRender_GetX(objSword), ObjRender_GetY(objSword),ObjRender_GetAngleZ(objSword), 3, 10, 64);
			yield;
		}
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(LaserFireLong, 60);
		SE_PlayLen(ufo, 60);
		SE_PlayLen(slash,80);
	}
	tim = 60;
	let totalCounter = 0;
	ascent(i in 0..tim)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			x = ObjMove_GetX(objEnemy);
			y = ObjMove_GetY(objEnemy);
			ObjRender_SetPosition(objSword, x + 200*bit, y - 50, 0);
			
			let tB = 1/(tim-1)*max(0,i-1);
			let angB = Interpolate_Smooth(90 - 270*bit, 90 + 90*bit, tB);
			
			let t = 1/(tim-1)*i;
			let ang = Interpolate_Smooth(90 - 270*bit, 90 + 90*bit, t);
			
			let dis = 700;
			
			
			ascent(o in 0..5)
			{
				let angInb = Interpolate_Linear(angB, ang, 1/5*o);
				let xy1 = [ObjRender_GetX(objSword), ObjRender_GetY(objSword)];
				let xy2 = [ObjRender_GetX(objSword) + dis * cos(angInb), ObjRender_GetY(objSword) + dis * sin(angInb)];
				
				BeamLaser(xy1[0], xy1[1], angInb, 100, 20, 128);
				
				ObjRender_SetAngleZ(objSword, ang);
				let intXYP = lineLineIntersection(xy1, xy2, [-20, GetStgFrameHeight], [GetStgFrameWidth+20, GetStgFrameHeight]);
				if(intXYP[0] != INVALID_POINT && ang%360 < 180 && ang%360 != 0)
				{
					if(intXYP[0] > -20 && intXYP[0] < GetStgFrameWidth + 20)
					{
						if(o == 0)
						{
							SE_PlayLen(shot1,80);
						}
						CharredGround(intXYP[0], intXYP[1]);
						
						if(totalCounter%23==0)
						{
							Occ(intXYP[0], intXYP[1] + 300, PUTRID_WARNING, PUTRID_STAY, bit);
						}
						
						ascent(o in 0..4)
						{
							let obj = BloodShotB2(intXYP[0], intXYP[1], 0, -(0.5+0.5*o)*rand(0.7,1)*0.5, 0, 0, 0, 10, 0.4, 30, false);
						}
					}
					if(totalCounter == 0)
					{
						SE_PlayLen(MSpark, 60);
					}
					totalCounter++;
				}
			}
			
			yield;
		}
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2-100*bit, 150, 100);
		SE_PlayLen(warning,60);
	}
	ascent(i in 0..60)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			x = ObjMove_GetX(objEnemy);
			y = ObjMove_GetY(objEnemy);
			ObjRender_SetPosition(objSword, x + 200*bit, y - 50, 0);
			yield;
		}
	}
	tim = 120;
	ascent(i in 0..tim)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			x = ObjMove_GetX(objEnemy);
			y = ObjMove_GetY(objEnemy);
			let t = Interpolate_Smoother(0, 1, 1/(tim-1)*i);
			let col = 255-255*sin(90*t);
			let scl = 0.3 - 0.2 * sin(90*t);
			ObjRender_SetPosition(objSword, x + Interpolate_Smoother(200*bit, 0, t), y + Interpolate_Smoother(-50, 0, t), 0);
			ObjRender_SetColor(objSword, col, col, col);
			ObjRender_SetAlpha(objSword, col);
			ObjRender_SetAngleZ(objSword, Interpolate_Linear(90 + 90*bit, 90 - 270*bit, t));
			ObjRender_SetScaleXYZ(objSword, scl, scl * bit, 0);
			yield;
		}
	}
	Obj_Delete(objSword);
}

task PreSwingWarning(x, y, bit)
{
	let tim = 60;
	let totalCounter = 0;
	ascent(i in 0..tim)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			x = ObjMove_GetX(objEnemy) + 200*bit;
			y = ObjMove_GetY(objEnemy) - 50;

			let tB = 1/(tim-1)*max(0,i-1);
			let angB = Interpolate_Smooth(90 - 270*bit, 90 + 90*bit, tB);
			
			let t = 1/(tim-1)*i;
			let ang = Interpolate_Smooth(90 - 270*bit, 90 + 90*bit, t);
			
			let dis = 700;
			
			
			ascent(o in 0..5)
			{
				let angInb = Interpolate_Linear(angB, ang, 1/5*o);
				let xy1 = [x, y];
				let xy2 = [x + dis * cos(angInb), y + dis * sin(angInb)];
				
				
				

				let intXYP = lineLineIntersection(xy1, xy2, [-20, GetStgFrameHeight], [GetStgFrameWidth+20, GetStgFrameHeight]);
				if(intXYP[0] != INVALID_POINT && ang%360 < 180 && ang%360 != 0)
				{
			
					if(intXYP[0] > -20 && intXYP[0] < GetStgFrameWidth + 20)
					{
			
						if(totalCounter%23==0)
						{
							BeamWarningPillar(intXYP[0], intXYP[1]);
						}
	
					}
					totalCounter++;
				}
			}
			//yield;
		}
	}
	task BeamWarningPillar(xx,yy)
	{
		let w = 70;
		ascent(i in 0..60*3)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				BeamLaser(xx+rand(w,-w), yy, -90, 100, 50, 64);
				yield;
			}
		}
	}
}

const PUTRID_STAY = 60*4;
const PUTRID_WARNING = 60*2;
task CharredGround(x,y)
{
	loop(1)
	{
		let obj = BloodShotB2(x, y+10, rand(2,-2), -rand(1,2), 0, 1/50, 0, 10, 1, 30, false);
	}
	let randStart = round(rand(0,19));
	ascent(i in 0..PUTRID_STAY+PUTRID_WARNING)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			if((randStart+i)%20==0)
			{
				let obj = BloodShotB2(x, y+10, rand(2,-2), -rand(0.5,1.25), 0, 1/50, 0, 10, 1, 30, false);
			}
			yield;
		}
	}
}

task BeamLaser(x,y,ang, w, t, alp)
{
	let lasExpand = CreateStraightLaserA1(x, y, ang, 9999, w, 999, 3, 99999);
	ObjShot_SetIntersectionEnable(lasExpand, false);
	Obj_SetRenderPriority(lasExpand,0.28);

	ascent(i in 0..t)
	{
		ObjRender_SetAlpha(lasExpand, alp - alp/t*i);
		yield;
	}
	Obj_Delete(lasExpand);
}

// Source: https://www.geeksforgeeks.org/program-for-point-of-intersection-of-two-lines/
let INVALID_POINT = -9999;
function lineLineIntersection(A, B, C, D)
{
    let a1 = B[1] - A[1];
	let b1 = A[0] - B[0];
	let c1 = a1 * (A[0]) + b1 * (A[1]);

	// Line CD represented as a2x + b2y = c2 
	let a2 = D[1] - C[1];
	let b2 = C[0] - D[0];
	let c2 = a2 * (C[0]) + b2 * (C[1]);

	let determinant = a1 * b2 - a2 * b1;

	if (determinant == 0)
	{
		// The lines are parallel. This is simplified 
		// by returning a pair of FLT_MAX 
		return [INVALID_POINT, INVALID_POINT];
	}
	else
	{
		let x = (b2 * c1 - b1 * c2) / determinant;
		let y = (a1 * c2 - a2 * c1) / determinant;
		return [x, y];
    }
}

function BloodShotB2(x, y, xSpd, ySpd, xAcc, yAcc, xMSpd, yMSpd, sclMax, growT, drip)
{
	let obj = CreateShotB2(x, y, xSpd, ySpd, xAcc, yAcc, xMSpd, yMSpd, 293, 0);
	ObjRender_SetColor(obj, 255,255,255);
	ObjShot_SetGraphic(obj, 296);
	Obj_SetRenderPriority(obj, 0.52);
	ObjRender_SetBlendType(obj, BLEND_SUBTRACT);
	ObjShot_SetSpellResist(obj, true);
	BloodRender(obj);
	
	return obj;
	
	task BloodRender(obj)
	{
		let obj2 = CreateShotB2(x, y, xSpd, ySpd, xAcc, yAcc, xMSpd, yMSpd, 296, 0);
		
		ObjRender_SetColor(obj2, 255,0,0);
		ObjShot_SetGraphic(obj2, 293);
		Obj_SetRenderPriority(obj2, 0.51);
		ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
		
		ObjShot_SetSpellResist(obj2, true);
		ObjShot_SetIntersectionEnable(obj2, false);
		let scl = 0;
	
		let sclInterp = 0;
		let cc = 0;
		Grower(obj, obj2);

		task Grower(obj, obj2)
		{
			ascent(i in 0..growT)
			{
				scl+=1/growT;
				sclInterp = Interpolate_Overshoot(0, sclMax, sclMax *2, scl);
				ObjRender_SetScale(obj ,sclInterp);
				ObjRender_SetScale(obj2,sclInterp * 1.4);
				ObjShot_SetIntersectionScaleXY(obj, sclInterp);
				yield;
			}
		}
		
	}
}

task S_Laser2(X,Y,angle,xmove,ymove,growdeley,deley,stay,ID,BLENDER,scaleX,scaleY,soundbool)
{
	
	let obj = CreateShotA1(X,Y,0,angle,ID,0);
	//Bounce(obj);
	ObjRender_SetAlpha(obj,128);
	ObjRender_SetBlendType(obj,BLENDER);
	ObjShot_SetIntersectionEnable(obj,false);
	ObjShot_SetSpellResist(obj,true);
	ObjShot_SetAutoDelete(obj,false);
	if(BLENDER == BLEND_SUBTRACT)
	{
		Obj_SetRenderPriority(obj, 0.51);
	}
	//318
	let scaleYIn = 0;
	let xmove2 = xmove;
	let ymove2 = ymove;
	let totaldeley = growdeley+deley;
	let circSize = 23;
	let rendX = 1-2*round(rand(0,1));
	scaleX*=rendX;
	ascent(i in 0..growdeley)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleXYZ(obj,i/growdeley*(scaleX/5),i/growdeley*scaleY,1);
			scaleYIn+=scaleY/growdeley;
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
	ObjRender_SetScaleXYZ(obj,(scaleX/5),scaleY,1);
	loop(deley)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
		let scaleXIn = scaleX/5;
		scaleX/=5;
	
	loop(4)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,circSize*scaleY,circSize*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX+=(scaleXIn*4)/4;
			yield;
		}
	}
	loop(stay)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleX(obj,scaleX);
			HitboxSingle(obj,circSize*scaleY,circSize*scaleX);
			yield;
		}
	}
	loop(20)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,circSize*scaleY,circSize*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX-=(scaleXIn*5)/20;
			yield;
		}
	}
	Obj_Delete(obj);
}

task BloodShotPillar(x,bit)
{
	ascent(i in 0..PUTRID_WARNING+PUTRID_STAY)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			if((i)%10==0)
			{
				SE_PlayLen(Shot1,60);
				ascent(o in 0..3)
				{
					let xAM = 1*sin(i*bit + 360/3*o);
					let xSpd = 0.5*xAM;
					let ySpd = -3.5;
					let obj = BloodShotB2(x+40*xAM, GetStgFrameHeight, xSpd, ySpd, 0, 1/70, 0, 10, 1, 30, false);
					if(i>PUTRID_WARNING/2)
					{
						let obj2 = BloodShotB2(x+40*xAM, GetStgFrameHeight, xSpd, ySpd*3, 0, 1/70, 0, 10, 1, 30, false);
					}
				}
			}
			if((i)%5==0 && i>PUTRID_WARNING/2)
			{
				SE_PlayLen(shot1,60);
				ascent(o in 0..3)
				{
					let xAM = 1*sin(i*bit + 360/3*o);
					let xSpd = 2*xAM;
					let ySpd = -rand(2,4)*3;
					
					let obj2 = BloodShotB2(x+40*xAM, GetStgFrameHeight, xSpd, ySpd, 0, 1/70, 0, 10, 1, 30, false);
					
				}
			}
			yield;
		}
	}
}

task Occ(x,y, wa, stay, bit)
{
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(explode,60);
		SE_PlayLen(charge0,80);
		ScreenShake(wa*2, 4);
	}
	
	let angleT = -90;
	let randStart = round(rand(0,19));
	BloodShotPillar(x, bit);
	
	ascent(i in 0..wa)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			yield;
		}
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		ScreenShake(stay*1.5, 4);
		SE_PlayLen(Burst1,60);
		SE_PlayLen(Burst3,60);
		SE_PlayLen(MSpark, 60);
	}
	let t = 10;
	let outerWidth = 5;
	let innerWidth = 5;
	let stayer = 5;
	let cosAng = cos(angleT);
	let sinAng = sin(angleT);
	let yScl = 14;
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//SE_PlayLen(LaserFireShort,30);
			let width = 1*sin(90/(t-1)*i);
			let speed = rand(20,25)*3;
			loop(1)
			{
				
				let xP = (8.5*10)*cosAng;
				let yP = (8.5*10)*sinAng;
				let spdX = speed*cosAng;
				let spdY = speed*sinAng;
				S_Laser2(x+xP,y+yP,(angleT),spdX,spdY,2,0,stayer,400,BLEND_ADD_ARGB,outerWidth*width,yScl,false);
				S_Laser2(x+xP,y+yP,(angleT),spdX,spdY,2,0,stayer,401,BLEND_SUBTRACT,innerWidth*width,yScl,false);
			}
		}
		wait(1);
	}
	loop(stay)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//SE_PlayLen(LaserFireShort,30);
			let width = 1;
			let speed = rand(20,25)*3;
			loop(1)
			{
	
				let xP = (8.5*10)*cosAng;
				let yP = (8.5*10)*sinAng;
				let spdX = speed*cosAng;
				let spdY = speed*sinAng;
				S_Laser2(x+xP,y+yP,(angleT),spdX,spdY,2,0,stayer,400,BLEND_ADD_ARGB,outerWidth*width,yScl,false);
				S_Laser2(x+xP,y+yP,(angleT),spdX,spdY,2,0,stayer,401,BLEND_SUBTRACT,innerWidth*width,yScl,false);
			}
		}
		wait(1);
	}
	t = 80;
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			//SE_PlayLen(LaserFireShort,30);
			let width = 1*sin(90-90/(t-1)*i);
			let speed = rand(20,25)*3;
			loop(1)
			{
	
				let xP = (8.5*10)*cosAng;
				let yP = (8.5*10)*sinAng;
				let spdX = speed*cosAng;
				let spdY = speed*sinAng;
				S_Laser2(x+xP,y+yP,(angleT),spdX,spdY,2,0,stayer,400,BLEND_ADD_ARGB,outerWidth*width,yScl,false);
				S_Laser2(x+xP,y+yP,(angleT),spdX,spdY,2,0,stayer,401,BLEND_SUBTRACT,innerWidth*width,yScl,false);
			}
		}
		wait(1);
	}
}


task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

