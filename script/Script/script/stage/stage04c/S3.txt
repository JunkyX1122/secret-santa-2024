#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["-Channel-"]
#Text["S3"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"
#include "./gatoAura.txt"

let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 65;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(290/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(65);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 59);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_ANUGATO, 10);
	magiccircle(objEnemy,1);
	RecordAttackHistory("04c", "S3", DIFFICULTY_NAMES[DIFFICULTY]);
	
	end;

	SetCommonData("BossName", "Erlendur Mjaldr (Godsworn)");
	GatoAura(objEnemy);
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 60)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",false);
	}
    if(count == 60)
    {
		
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}
task SpellDeclair()
{
	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("-Channel-","", LENEN, 0,0,0);
	ScreenShake(60,4);
	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	SE_PlayLen(ufo,75);
}
task Fire
{
	let bit = 1-2*round(rand(0,1));
	NecroPassive(bit);
	
	wait(60*3);
	ObjEnemy_SetDamageRate(objEnemy, (0.06/3)/1.5, (0.06/3)/3);
	SpellDeclair();
	CurvePassive(bit);
	SideFire(bit);
}

task NecroPassive(bit)
{
	let ang = -90;
	let cc = 0;
	while(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(shot1,60);
		let spnAm = 0.3*sin(cc*8);
		ascent(i in 0..10)
		{
			NecroShot(ang+360/10*i, spnAm*bit);
		}
		ang+=14.34523*bit;
		cc++;
		wait([15,10][DIFFICULTY]);
	}
}

task NecroShot(ang, am)
{
	let dis = GetStgFrameWidth/2+200;
	let x = ObjMove_GetX(objEnemy) + dis * cos(ang);
	let y = ObjMove_GetY(objEnemy) + dis * sin(ang);
	
	let obj = CreateShotA2R(x, y, 1, ang+180, 1/120, 2, 60, 0);
	ObjShot_SetAutoDelete(obj,false);
	ObjShot_SetDeleteFrameA5(obj,60*5,2);
	let xC = ObjMove_GetX(objEnemy);
	let yC = ObjMove_GetY(objEnemy);
	while(!Obj_IsDeleted(obj))
	{
		let xy = Rotate2D(ObjMove_GetX(obj), ObjMove_GetY(obj), am, xC, yC);
		ObjMove_SetPosition(obj, xy[0], xy[1]);
		ObjMove_SetAngleR(obj, ObjMove_GetAngle(obj) + am);
		yield;
	}
	
}

task SideFire(bit)
{
	while(!Obj_IsDeleted(objEnemy))
	{
		ascent(i in 0..2)
		{
			let spd = rand(1,2)*2;
			let innerBit = [1,-1][i];
			let x = GetStgFrameWidth/2 + (GetStgFrameWidth/2 + rand(10,-100)) * innerBit;
			let y = GetStgFrameHeight + 30;
			
			let obj = CreateShotA1R(x, y, spd, -90, 400, 0);
			ObjRender_SetScale(obj, 1.5);
			ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
			ObjShot_SetSpellResist(obj, true);
			
			let obj2 = CreateShotA1R(x, y, spd, -90, 401, 0);
			ObjRender_SetScale(obj2, 1.1);
			ObjRender_SetBlendType(obj2, BLEND_SUBTRACT);
			Obj_SetRenderPriority(obj2, 0.51);
			ObjShot_SetSpellResist(obj2, true);
			ObjShot_SetIntersectionEnable(obj2, false);
		}
		wait(4);
	}
}

task CurvePassive(bit)
{
	let ang = -90;
	let bitIni = bit;
	while(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(LaserDelShort, 50);
		let am = [17,23][DIFFICULTY];
		ascent(i in 0..am)
		{
			CurveLaserFire(ang+360/am*i, bitIni);
		}
		bitIni*=-1;
		ang += (180/am + 3.1231)*bit;
		wait(100);
	}
}

task CurveLaserFire(ang, bit)
{
	let dis = GetStgFrameWidth/2+200;
	let x = ObjMove_GetX(objEnemy) + dis * cos(ang);
	let y = ObjMove_GetY(objEnemy) + dis * sin(ang);
	let ang2 = ang+180-45*bit;
	let obj2 = CreateCurveLaserA1(x, y, 4, ang2, 100, 15, 401, 0) ;
	ObjLaser_SetInvalidLength(obj2, 0.6, 0.6);
	ObjRender_SetBlendType(obj2, BLEND_SUBTRACT);
	Obj_SetRenderPriority(obj2, 0.51);
	ObjShot_SetSpellResist(obj2, true);

	let obj3 = CreateCurveLaserA1(x, y, 4, ang2, 100, 25, 376, 0) ;
	ObjShot_SetIntersectionEnable(obj3, false);
	ObjShot_SetSpellResist(obj3, true);
	
	ObjLaser_SetItemDistance(obj2, 1000);
	ObjLaser_SetItemDistance(obj3, 1000);
	ObjShot_SetAutoDelete(obj2, false);
	ObjShot_SetAutoDelete(obj3, false);
	
	let lasers = [obj2, obj3];
	let t = 135;
	let iniR = 1.1;
	ascent(i in 0..2)
	{
		ObjMove_SetMaxSpeed(lasers[i], 0);
		ObjMove_SetAcceleration(lasers[i], -6/(t*1.4));
		ObjMove_SetSpeed(lasers[i], 6);
		ascent(o in 0..t)
		{
			let spnAm = (iniR-iniR/(t-1)*o)*bit;
			ObjMove_AddPatternA2(lasers[i], o, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, spnAm);
		}
	}
	ascent(i in 0..round(t*1.4 + 100))
	{
		if(!Obj_IsDeleted(objEnemy)&&!Obj_IsDeleted(lasers[0]))
		{
			ObjShot_SetIntersectionEnable(obj2, true);
			if(GetPlayerInvincibilityFrame()>0)
			{
				
				ObjShot_SetIntersectionEnable(obj2, false);
			}
			yield;
		}
	}
	ascent(i in 0..2)
	{
		if(!Obj_IsDeleted(lasers[i]))
		{
			Obj_Delete(lasers[i]);
		}
	}

}
task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

