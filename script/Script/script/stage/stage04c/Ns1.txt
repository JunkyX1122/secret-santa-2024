#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns1"]
#Text["Ns1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME_MAX = 300;
let TIME = TIME_MAX*60;
let HEALTH_MAX = 220 * 3;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(HEALTH_MAX);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(TIME_MAX);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	if(GetCommonData("isPracticing", true)==true)
	{
		ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2,125 );
	}
	else
	{	
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 125, 40);
	}
	
	renderBossUnanimated(objEnemy, IMG_BOSS_GATO, 30);
	BossPhaseManager();
	RecordAttackHistory("04c", "Ns1", DIFFICULTY_NAMES[DIFFICULTY]);
	end;
	SetCommonData("SpellCardBG1",false);
	SetShotAutoDeleteClip(48,48,48,32);
	SetCommonData("BossName", "Erlendur Mjaldr");
}

let isEnemyHittable = true;

@MainLoop
{
	if(isEnemyHittable)
	{
		ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
		ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    }
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	if(GetKeyState(KEY_Q)==KEY_PUSH)
	{
		//ObjEnemy_SetLife(objEnemy,(HEALTH_MAX)/3*2);
	}
	if(GetKeyState(KEY_W)==KEY_PUSH)
	{
		//ObjEnemy_SetLife(objEnemy,(HEALTH_MAX)/3);
	}
    count++;
    yield;
}
@Finalize
{
}
task BossHitable(b)
{
	ObjRender_SetAlpha(objEnemy,b ? 255 : 0);
	isEnemyHittable = b;
}
task BossPhaseManager()
{
	while(TIME > (TIME_MAX/3*2*60) && ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > (HEALTH_MAX)/3*2 && !Obj_IsDeleted(objEnemy))
	{
		yield;
	}
	phaseTransitioning = true;
	SE_PlayLen(boon1,60);
	isPhase1Over = true;
	
	while(TIME > (TIME_MAX/3*1*60) && ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > (HEALTH_MAX)/3*1 && !Obj_IsDeleted(objEnemy))
	{
		yield;
	}
	phaseTransitioning = true;
	SE_PlayLen(boon1,60);
	isPhase2Over = true;
	
	while(TIME > (TIME_MAX/3*0*60) && ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > (HEALTH_MAX)/3*0 && !Obj_IsDeleted(objEnemy))
	{
		yield;
	}
	SE_PlayLen(boon1,60);
	isPhase3Over = true;
}

task InvincibilityHandle()
{
	while(!Obj_IsDeleted(objEnemy))
	{
		if(phaseTransitioning)
		{
			ObjEnemy_SetDamageRate(objEnemy, (0.01)/1.5, (0.01)/3);
		}
		yield;
	}
}
let isPhase1Over = false;
let isPhase2Over = false;
let isPhase3Over = false;

let isPhase2Started = false;
let isPhase3Started = false;

let phaseTransitioning = false;
task Fire
{
	let bit = 1-2*round(rand(0,1));
	let bitRestart = bit;
	Sandstorm(bit);
	InvincibilityHandle();
	ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
	//wait(60*4);
	//HandleFutureSight();
	while(!isPhase1Over && !Obj_IsDeleted(objEnemy))
	{
		bit*=-1;
		SE_PlayLen(charge0,60);
		let x = GetStgFrameWidth/2 - GetStgFrameWidth/2*bit;
		GatoSlasher(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),x,0, 0);
		wait(6);
		ascent(i in 0..10)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				GatoSlasher(x + GetStgFrameWidth/10*(i)*bit, [0, GetStgFrameHeight][i%2],x + GetStgFrameWidth/10*(i+1)*bit,[GetStgFrameHeight, 0][i%2], 0);
				wait(6);
			}
		}
		let x2 = GetStgFrameWidth/2 - (GetStgFrameWidth/2-100)*bit;
		let y2 = 100;
		if(!Obj_IsDeleted(objEnemy))
		{
			GatoSlasher(x + GetStgFrameWidth*bit, 0 ,x2, y2, 0);
		}
		wait(6);
		wait(60*3);
		if(!isPhase1Over)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				SE_PlayLen(charge0,60);
			}
			ascent(i in 0..13)
			{
				if(!Obj_IsDeleted(objEnemy))
				{
					let ang = -90 + 111.121*bit * (i+1);
					let dis = 300;
					let x3 = GetStgFrameWidth/2 + dis*cos(ang);
					let y3 = GetStgFrameHeight/2 + dis*sin(ang);
					GatoSlasher(x2, y2, x3, y3, bit);
					x2 = x3;
					y2 = y3;
					wait(6);
				}
			}
			if(!Obj_IsDeleted(objEnemy))
			{
				GatoSlasher(x2, y2, GetStgFrameWidth/2, 125, bit);
			}
			wait(6);
			ascent(i in 0..60*5)
			{
				yield;
			}
		}
		ObjEnemy_SetDamageRate(objEnemy, (0.1)/1.5, (0.1)/3);
	}
	phaseTransitioning = false;
	ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
	isPhase2Started = true;
	bit = bitRestart;
	ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2, GetStgFrameHeight/2, 120, LERP_SMOOTHER);
	wait(120);
	while(!isPhase2Over && !Obj_IsDeleted(objEnemy))
	{
		
		let ang = -90 + 45*bit;
		
		let dis = 300;
		ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2 + dis*cos(ang), GetStgFrameHeight/2 + dis*sin(ang), 60*3, LERP_SMOOTH);
		let idd = 0;
		SE_PlayLen(charge0,60);
		ascent(i in 0..60*3)
		{
			if(i%15==0 && !Obj_IsDeleted(objEnemy))
			{
				FireWall(ang, bit, idd);
				idd++;
			}
			yield;
		}
		wait(60);
		ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2, GetStgFrameHeight/2, 60*1, LERP_SMOOTH);
		let cosAng = cos(ang);
		let sinAng = sin(ang);
		
		let cosAng2 = cos(ang+180);
		let sinAng2 = sin(ang+180);
		
		let cosAng3 = cos(ang+90*bit);
		let sinAng3 = sin(ang+90*bit);
		let riseSpeed = 3;
		let accelSpeed = 3/100;
		let fallSpeedMax = 3;
		wait(60);
		ascent(i in 0..(60*10))
		{
			if(i % 20 == 0 && !Obj_IsDeleted(objEnemy))
			{
				SE_PlayLen(shot1,60);
				let randStrt = rand(1,-1)*3;
				ascent(o in 0..20)
				{
					let spd = 5-10/19*o + randStrt;
					let obj = ShotB2(
								ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 
								riseSpeed*cosAng + spd * cosAng3, riseSpeed*sinAng  + spd * sinAng3, 
								accelSpeed*cosAng2, 			  accelSpeed*sinAng2, 
								fallSpeedMax*cosAng2, 			  fallSpeedMax*sinAng2, 
								371, 371, 10, 2, BLEND_ADD_ARGB, false);
				}
			}
			yield;
		}
		wait(60*2);
		if(!isPhase2Over && !Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(charge2,60);
			ascent(i in 0..60*3)
			{
				angSand = 90 + 45*sandBit - 90/(60*3-1)*i*sandBit;
				yield;
			}
			bit*=-1;
		}
		sandBit = bit;
		yield;
		ObjEnemy_SetDamageRate(objEnemy, (0.07)/1.5, (0.07)/3);
	}
	phaseTransitioning = false;
	ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
	isPhase3Started = true;
	bit = bitRestart;
	ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2, GetStgFrameHeight/2-60, 120, LERP_SMOOTHER);
	wait(WIND_TRANSITION);
	ScarfFire(bit);
	while(!isPhase3Over && !Obj_IsDeleted(objEnemy))
	{
		wait(60*4);
		if(!isPhase3Over)
		{
			HandleFutureSight();
		}
		wait(60*7);
		ObjEnemy_SetDamageRate(objEnemy, (0.07)/1.5, (0.07)/3);
		FutureSightDamageRate = 0.07;
		yield;
	}
}

let FutureSightDamageRate = 0.05;



let captureSnapshotSandStorm = false;
let captureSnapshotScarf = false;
let useSnapshotSandStorm = false;
let useSnapshotScarf = false;
let isFutureSeeing = false;
let hasRewoundTime = false;
let playerRecording = [];
let PLAYER_RECORDQUALITY = 10;
task HandleFutureSight()
{
	isFutureSeeing = true;
	let playerX = GetPlayerX;
	let playerY = GetPlayerY;
	
	let barray = GetShotIdInCircleA2(GetStgFrameWidth/2, GetStgFrameHeight/2 ,GetScreenWidth*2, TARGET_ENEMY);
	let blength = length(barray);
	
	SE_PlayLen(chime1,60);
	ObjEnemy_SetDamageRate(objEnemy, 0, 0);
	if(blength>0)
	{
		ascent (i in 0..blength)
		{
			let buID = barray[i];
			ObjShot_SetAutoDelete(buID,false);
			ObjShot_SetSpellResist(buID,true);
			Obj_SetValue(buID, "bX", ObjMove_GetX(buID));
			Obj_SetValue(buID, "bY", ObjMove_GetY(buID));
			Obj_SetValue(buID, "bAng", ObjMove_GetAngle(buID));
			Obj_SetValue(buID, "bSpd", ObjMove_GetSpeed(buID));
			Obj_SetValue(buID, "savedManagerHistory", Obj_GetValueD(buID, "managerHistory", 60*4));
	
		}
	}
	captureSnapshotSandStorm = true;
	captureSnapshotScarf = true;

	let objBlack = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objBlack, 79);
	ObjPrim_SetTexture(objBlack, IMG_PIXEL);
	ObjSprite2D_SetSourceRect(objBlack, 0, 0, 1024, 1024);
	ObjSprite2D_SetDestRect(objBlack, 0, 0, 1024, 1024);
	ObjSprite2D_SetDestCenter(objBlack);
	ObjRender_SetPosition(objBlack, GetStgFrameWidth/2, GetStgFrameHeight/2, 0);
	Obj_SetRenderPriorityI(objBlack,78);
	ObjRender_SetColor(objBlack,255,255,0);
	ObjRender_SetAlpha(objBlack,128);
	ObjRender_SetBlendType(objBlack,BLEND_SUBTRACT);
	playerRecording = [];
	ascent(i in 0..60*3)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			if(i%PLAYER_RECORDQUALITY==0)
			{
				playerRecording ~= [[GetPlayerX, GetPlayerY]];
			}
			yield;
		}
	}
	
	
	if(!Obj_IsDeleted(objEnemy))
	{
		ObjEnemy_SetDamageRate(objEnemy, (FutureSightDamageRate)/1.5, (FutureSightDamageRate)/3);
		ObjMove_SetPosition(GetPlayerObjectID, playerX, playerY);

		useSnapshotSandStorm = true;
		useSnapshotScarf = true;
		SE_PlayLen(boon1,60);
		barray = GetShotIdInCircleA2(GetStgFrameWidth/2, GetStgFrameHeight/2 ,GetScreenWidth*2, TARGET_ENEMY);
		blength = length(barray);
		if(blength>0)
		{
			ascent (i in 0..blength)
			{
				let buID = barray[i];
				let x = Obj_GetValueD(buID, "bX", -999);
				let y = Obj_GetValueD(buID, "bY", -999);
				let a = Obj_GetValueD(buID, "bAng", -999);
				ObjMove_SetPosition(buID, x, y);
				ObjMove_SetAngle(buID, a);
				ObjMove_SetSpeed(buID, Obj_GetValueD(buID, "bSpd", -999));
				DelayedAutoDelete(buID,120);
				let h = Obj_GetValueD(buID, "savedManagerHistory", -999);
				ObjShot_SetSpellResist(buID,false);
				if(h>=0)
				{
					let b = Obj_GetValueD(buID, "startingBit", 1);
					ShotManager(buID, h, Obj_GetValueD(buID, "startingAng", 0), b);
				}
			}
		}
		hasRewoundTime = true;
	}
	isFutureSeeing = false;
	ObjRender_SetColor(objBlack,255,255,255);
	ObjRender_SetAlpha(objBlack,128);
	ObjRender_SetBlendType(objBlack,BLEND_ADD_ARGB);
	ShootAtPlayerHistory();
	ascent(i in 0..60)
	{
		ObjRender_SetAlpha(objBlack,128-128/60*i);
		if(!Obj_IsDeleted(objEnemy))
		{
			StartSlow(TARGET_ALL,20+round(40/60*i));
			yield;
		}
		StopSlow(TARGET_ALL);
	}
	Obj_Delete(objBlack);
	wait(60*2);
	hasRewoundTime = false;
	
}	

task ShootAtPlayerHistory()
{
	let concc = 8;
	ascent(i in 0..length(playerRecording))
	{
		if(!Obj_IsDeleted(objEnemy) && !isPhase3Over)
		{
			SE_PlayLen(shot1,60);
			SE_PlayLen(chime1,60);
			let pX = playerRecording[i][0];
			let pY = playerRecording[i][1];
			let ang = Get_PointAngle(pX, pY, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy));
			ascent(o in 0..2)
			{
				ascent(p in 0..2)
				{
					ascent(q in 0..concc)
					{
						let spd = 3+1/(concc-1)*q*[1,-1][p];
						let ang2 = ang + 10*[1,-1][o] - 10/(concc-1)*q*[1,-1][o];
						let obj = ShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), spd, ang2, 146, 146, 5, 2, BLEND_ADD_ARGB, false);
						ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
					}
				}
			}
			wait(PLAYER_RECORDQUALITY);
		}
	}
}

let angSand = 90;
let sandBit = 1;
let objCloudParticle = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_SMOKE, [0,0,512,512], BLEND_ALPHA, 0.28);
let WIND_TRANSITION = 180;
let alphaScaleSandstorm = 0;
task Sandstorm(bit)
{

	let cc = 0;
	let cB = 10;
	let cB2 = 10;
	angSand = 90 + 90*bit;
	sandBit = bit;
	let am = 6;
	
	let ccR = 0;
	let cBR = 0;
	let cB2R = 0;
	AngManage();
	WindManage();
	while(!Obj_IsDeleted(objEnemy) && !isPhase3Over)
	{
		if(captureSnapshotSandStorm)
		{
			ccR = cc;
			cBR = cB;
			cB2R = cB2;
			captureSnapshotSandStorm = false;
		}
		if(useSnapshotSandStorm)
		{
			cc = ccR;
			cB = cBR;
			cB2 = cB2R;
			useSnapshotSandStorm = false;
		}
		
		let wvAng = cc/1.21321;
		let xC = GetStgFrameWidth/2 - (GetStgFrameWidth/2+100)*cos(angSand);
		let yC = GetStgFrameHeight/2 - (GetStgFrameWidth/2+100)*sin(angSand);
		if(cB == 0)
		{
			SE_PlayLen(Shot2,40);
			cB = round((13-(11*sin(cc*2)))*1.5);
			ascent(i in 0..am)
			{
				let sprd = 20*sin(cc*3.21321);
				let dis = -(GetStgFrameHeight/2+100) + (GetStgFrameHeight+200)/(am-1)*i + 100*sin(wvAng);
				let x = xC + dis * cos(angSand+90);
				let y = yC + dis * sin(angSand+90);
				let shot = ShotA1(x+rand(1,-1)*sprd, y+rand(1,-1)*sprd, rand(2.5,3)*0.7, angSand, 104, 104, 0, 2, BLEND_ALPHA, false);
				DelayedAutoDelete(shot,120);
			}
			if(cB > 7 && isPhase2Started)
			{
				ascent(i in 0..am)
				{
					let sprd = 20*sin(cc*3.21321);
				let dis = -(GetStgFrameHeight/2+100) + (GetStgFrameHeight+200)/(am-1)*i + 100*sin(wvAng);
				let x = xC + dis * cos(angSand+90);
				let y = yC + dis * sin(angSand+90);
					let shot = ShotA1(x+rand(1,-1)*sprd, y+rand(1,-1)*sprd, rand(1,2)*1.6, angSand, 88, 88, 0, 2, BLEND_ALPHA, false);
					DelayedAutoDelete(shot,180);
				}
			}
		}
		if(cB2 == 0 && isPhase3Started)
		{
			SE_PlayLen(Shot1,40);
			cB2 = (20+round(11*sin(cc*2))) * 2;
			ascent(i in 0..am)
			{
				let sprd = 20*sin(cc*3.21321);
				let dis = -(GetStgFrameHeight/2+100) + (GetStgFrameHeight+200)/(am-1)*i + 100*sin(wvAng);
				let x = xC + dis * cos(angSand+90);
				let y = yC + dis * sin(angSand+90);
				let shot = ShotA1(x+rand(1,-1)*sprd, y+rand(1,-1)*sprd, rand(2.5,3)*2, angSand, 56, 56, 0, 2, BLEND_ALPHA, false);
				DelayedAutoDelete(shot,60);
			}
		}
		
		cB--;
		if(isPhase3Started)
		{
			cB2--;
		}
		cc++;
		
		yield;
	}
	task AngManage()
	{
		while(!Obj_IsDeleted(objEnemy) && !isPhase2Started){yield;}
		SE_PlayLen(charge2,80);
		ascent(i in 0..WIND_TRANSITION)
		{
			angSand = 90 + 90*sandBit - 45/(WIND_TRANSITION-1)*i*sandBit;
			yield;
		}
		while(!Obj_IsDeleted(objEnemy) && !isPhase3Started){yield;}
		SE_PlayLen(charge2,80);
		ascent(i in 0..WIND_TRANSITION)
		{
			angSand = 90 + 45*sandBit - 45/(WIND_TRANSITION-1)*i*sandBit;
			yield;
		}
	}
	
	task WindManage()
	{
		
		let objBlack = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objBlack, 29);
		ObjPrim_SetTexture(objBlack, IMG_GATOWIND);
		let scl = 5;
		ObjSprite2D_SetSourceRect(objBlack, 0, 0, 1024*scl, 1024*scl);
		ObjSprite2D_SetDestRect(objBlack, 0, 0, 1024*1.5, 1024*1.5);
		ObjSprite2D_SetDestCenter(objBlack);
		ObjRender_SetPosition(objBlack, GetStgFrameWidth/2, GetStgFrameHeight/2, 0);
		ObjRender_SetColor(objBlack, 255, 165, 0);
		
		ObjRender_SetScaleY(objBlack, 1-2*round(rand(0,1)));
		let cc = 0;
		let cc2 = 0;
		while(!Obj_IsDeleted(objEnemy))
		{
			let yP = 100;
			alphaScaleSandstorm = alphaScaleSandstorm * 0.95 + 1 * 0.05;
			ObjRender_SetAlpha(objBlack, 48*alphaScaleSandstorm);
			ObjRender_SetAngleZ(objBlack, angSand);
			ObjSprite2D_SetSourceRect(objBlack, cc, yP, 1024+cc, 1024 + yP);
			if(cc2%100==0)
			{
				loop(3)
				{
					WindCloud(rand(1.25,3.25));
				}
			}
			
			cc-=1.5;
			cc2++;
			if(isFutureSeeing)
			{
				while(isFutureSeeing){yield;}
			}
			else
			{
				yield;
			}
		}
		
		task WindCloud(spd)
		{
			let randAng = rand(30,-30);
			let xC = GetStgFrameWidth/2 - (GetStgFrameWidth/2+200)*cos(angSand+randAng);
			let yC = GetStgFrameHeight/2 - (GetStgFrameWidth/2+200)*sin(angSand+randAng);
			let alpha = rand(32,64)*1.1;
			let scaleX = rand(1,1.1)*(1-2*round(rand(0,1)));
			let scaleY = rand(1,1.1)*(1-2*round(rand(0,1)));
			let color = [255,165,0];
			let ang = rand(0,360);
			let previousAng = angSand;
			let cosAng = cos(angSand);
			let sinAng = sin(angSand);
			while(Get_Distance(xC, yC, GetStgFrameWidth/2, GetStgFrameHeight/2) < (GetStgFrameWidth/2+250) && !Obj_IsDeleted(objEnemy))
			{
				ObjParticleList_SetAlpha(objCloudParticle,alpha*alphaScaleSandstorm);
				ObjParticleList_SetScale(objCloudParticle,scaleX,scaleY,0);
				ObjParticleList_SetPosition(objCloudParticle,xC,yC,0);
				ObjParticleList_SetAngleZ(objCloudParticle,ang);
				ObjParticleList_SetColor(objCloudParticle,color[0],color[1],color[2]);
				ObjParticleList_AddInstance(objCloudParticle);
				if(previousAng!=angSand)
				{
					cosAng = cos(angSand);
					sinAng = sin(angSand);
					previousAng = angSand;
				}
				xC+=spd*cosAng;
				yC+=spd*sinAng;
				if(isFutureSeeing)
				{
					while(isFutureSeeing){yield;}
				}
				else
				{
					yield;
				}
			}
		}
	}
}

task DelayedAutoDelete(obj,t)
{
	ObjShot_SetAutoDelete(obj,false);
	wait(t);
	if(!isFutureSeeing)
	{
		ObjShot_SetAutoDelete(obj,true);
	}
}

task GatoSlasher(x,y,x2,y2, bit)
{
	let waiter = 6;
	let WARNN = 40;
	let DELL = 80;
	Slasher(x,y,x2,y2,waiter, WARNN, DELL);
	wait(WARNN + DELL);
	BossHitable(false);
	ObjMove_SetPosition(objEnemy, x, y);
	ObjMove_SetDestAtFrame(objEnemy, x2, y2, waiter);
	let ang = ObjMove_GetAngle(objEnemy);
	let inBetween = 0;
	ascent(i in 0..waiter)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let x3 = Interpolate_Linear(x, x2, 1/waiter*i);
			let y3 = Interpolate_Linear(y, y2, 1/waiter*i);
			let x4 = Interpolate_Linear(x, x2, 1/waiter*(i+1));
			let y4 = Interpolate_Linear(y, y2, 1/waiter*(i+1));
			inBetween = 1;
			ascent(o in 0..inBetween)
			{
				let x5 = Interpolate_Linear(x3, x4, 1/inBetween*o);
				let y5 = Interpolate_Linear(y3, y4, 1/inBetween*o);
				ascent(j in 0..2)
				{
					let mSpd = 1.5;
					let obj = ShotA2(x5, y5, 0, ang + 90 + 180*j, mSpd/180, mSpd, 57, 57, 20-i, 2, BLEND_ADD_ARGB, false);
					ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
				}
				
			}
			inBetween = 5;
			ascent(o in 0..inBetween)
			{
				let x5 = Interpolate_Linear(x3, x4, 1/inBetween*o);
				let y5 = Interpolate_Linear(y3, y4, 1/inBetween*o);
				
					let obj = ShotA2(x5, y5, 0, ang - 90*bit, 4/120, 4, 332, 332, 20-i, 2, BLEND_ADD_ARGB, false);
					ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
				
				
			}
			yield;
		}
	}
	BossHitable(true);
}

task Slasher(x,y,x2,y2,tim, d1, d2)
{
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(chime1,60);
	}
	let dis = Get_Distance(x, y, x2, y2);
	let ang = Get_PointAngle(x2,y2,x,y);
	let t = d1;
	let slashWidth = 35;
	loop(1)
	{
		ascent(i in 0..t)
		{
			let sideDis = 10*sin(90/(t-1)*i);
			if(!Obj_IsDeleted(objEnemy))
			{
				ascent(o in 0..2)
				{
					let laser = CreateStraightLaserA1(x+sideDis*cos(ang+90-180*o),y+sideDis*sin(ang+90-180*o),ang,810*2,slashWidth,0,400,9000);
					ObjRender_SetBlendType(laser,BLEND_ADD_ARGB);
					ObjShot_SetAutoDelete(laser,false);
					ObjStLaser_SetSource(laser,false);
					LaserGrowFade(laser,dis*2,64-64/t*i);
				}
				yield;
			}
		}
		wait(d2);
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(laser0,50);
		SE_PlayLen(slash,70);
		let obj = CreateStraightLaserA1(x,y,ang,0,15,9999,292,0);
		ObjStLaser_SetSource(obj,false);
		ObjShot_SetAutoDelete(obj,false);

		ascent(i in 0..tim)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				ObjLaser_SetLength(obj,dis*sin(90/(tim-1)*i));
				ObjLaser_SetRenderWidth(obj, slashWidth);
				yield;
			}
		}
		ObjMove_SetDestAtFrameWeight(obj, x2,y2, tim);
		descent(i in 0..tim)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				if(i%1==0)
				{
					//SE_PlayLen(Shot1,60);
					//ShotA2(ObjMove_GetX(obj),ObjMove_GetY(obj),0,ang+rand(6,-6),0.05,2,42,42,15,3,BLEND_ALPHA);
				}
				ObjLaser_SetRenderWidth(obj, slashWidth/tim*i);
				dis = Get_Distance(ObjMove_GetX(obj),ObjMove_GetY(obj), x2, y2);
				ObjLaser_SetLength(obj,dis);
				yield;
			}
			
		}
		Obj_Delete(obj);
	}
}

task LaserGrowFade(obj,dis,alpha)
{
	let t = 20;
	ascent(i in 0..t)
	{
		ObjLaser_SetLength(obj,dis/t*i);
		ObjRender_SetAlpha(obj,alpha-alpha/t*i);
		yield;
	}
	Obj_Delete(obj);
}

task FireWall(ang, bit, idd)
{
	let x = ObjMove_GetX(objEnemy);
	let y = ObjMove_GetY(objEnemy);
	let DIS = 400;
	let t = 70;
	let randO = round(t/2 + rand(1,4)*[1,-1][idd%2]-5);
	let paddedDelay = 30;
	let cosAng = cos(ang+90*bit);
	let sinAng = sin(ang+90*bit);
	let cosAng2 = cos(ang);
	let sinAng2 = sin(ang);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(Shot1,60);
			let dis = DIS - (DIS*2) / (t-1)*i;
			let x2 = x + dis*cosAng + 30*cosAng2 * sin(i*20 + idd*55);
			let y2 = y + dis*sinAng + 30*sinAng2 * sin(i*20 + idd*55);
			let type = 0;
			let widthh = 3;
			if(i>randO-widthh && i < randO+widthh)
			{
				type = 1;
			}
			
			let obj = CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, ang, [425, 428][type], 0);
			
			
			MoverFire(obj, x2, y2, 180-i, ang,type);
			yield;
		}
	}
	wait(180-t + 40 + paddedDelay + idd*40);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(charge1,50);
	}
	task MoverFire(obj, x2, y2, t, ang, type)
	{
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		ObjMove_SetDestAtFrameWeight(obj, x2, y2, 40);
		ObjShot_SetAutoDelete(obj, false);
		ObjShot_SetSpellResist(obj, true);
		ObjShot_SetIntersectionEnable(obj, false);
		ObjRender_SetScale(obj, 1.5);
		ObjShot_SetIntersectionScaleXY(obj, 1.5, 1.5);
		ascent(i in 0..40)
		{
			ObjRender_SetAlpha(obj, 255/39*i);
			yield;
		}
		wait(t + paddedDelay + idd*40);
		if(!Obj_IsDeleted(obj))
		{
			SE_PlayLen(chime1,60);
			if(type==0)
			{
				let xB = ObjMove_GetX(obj);
				let yB = ObjMove_GetY(obj);
				let obj2 = CreateShotA2(xB, yB, 0, ang+180, 4/180, 4, 425, 0);
				ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
				ObjRender_SetScale(obj2, 1.5);
				ObjShot_SetIntersectionScaleXY(obj2, 1.5, 1.5);
				ObjRender_SetColor(obj2,255,165,0);
			
				if(xB < -32 || xB > GetStgFrameWidth + 32 || yB < -32)
				{
					ObjShot_SetAutoDelete(obj2, false);
					WaitAutoDelete(obj2);
				}
			}
			ObjShot_SetDeleteFrameA5(obj, 0, 1.5);
		}
	}
	task WaitAutoDelete(obj)
	{
		wait(60*2);
		ObjShot_SetAutoDelete(obj, true);
	}
}

task ScarfFire(bit)
{
	let cc = 0;
	let ccR = cc;
	while(!isPhase3Over && !Obj_IsDeleted(objEnemy))
	{
		if(captureSnapshotScarf)
		{
			ccR = cc;
			captureSnapshotScarf = false;
		}
		if(useSnapshotScarf)
		{
			cc = ccR;
			useSnapshotScarf = false;
		}
		if(cc%4==0 && cc%(4*10)<(4*5))
		{
			SE_PlayLen(shot1,60);
			let ang = cc*0.7*bit + 90*bit;
			let DIS = 60;
			ascent(i in 0..4)
			{
				let ang2 = ang + 360/4*i*bit;
				let x = ObjMove_GetX(objEnemy) + DIS*cos(ang2);
				let y = ObjMove_GetY(objEnemy) + DIS*sin(ang2);
				let obj = ShotA2(x, y, 1, ang2 - 90*bit, 1/60, 3, 287, 287, 0, 0, BLEND_ADD_ARGB, false);
		
				ShotManager(obj, 0, ObjMove_GetAngle(obj), bit);
			}
			ascent(o in 0..2)
			{
				ascent(i in 0..4)
				{
					let ang2 = ang + 360/4*i*bit;
					let x = ObjMove_GetX(objEnemy) + DIS*cos(ang2) + 20 * cos(ang2+90+180*o+90);
					let y = ObjMove_GetY(objEnemy) + DIS*sin(ang2) + 20 * sin(ang2+90+180*o+90);
					let obj = ShotA2(x, y, 1, ang2 - 90*bit, 1/60, 3, 71, 71, 0, 0, BLEND_ADD_ARGB, false);
					
					ShotManager(obj, 0, ObjMove_GetAngle(obj), bit);
				}
			}
		}
		cc++;
		yield;
	}
}

task ShotManager(obj, startingPoint, startingAng, bit)
{
	let alpha = 0;

	if(startingPoint==0)
	{
		Obj_SetValue(obj, "managerHistory", 0);
		Obj_SetValue(obj, "startingAng", ObjMove_GetAngle(obj));
		Obj_SetValue(obj, "startingBit", bit);
		
	}
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjShot_SetAutoDelete(obj,true);
	ascent(i in startingPoint..60*4)
	{
		if(!Obj_IsDeleted(obj))
		{
			Obj_SetValue(obj, "managerHistory", i);
			let ang2 = startingAng - 0.75*bit*i;
			alpha = 255/30*i;
			ObjMove_SetAngle(obj, ang2);
			ObjRender_SetAlpha(obj, alpha);
			yield;
		}
	}
	
}

task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	ShrinkCircle();
	ascent(i in 0..60)
	{
		alphaScaleSandstorm = 1 - 1/59*i;
		yield;
	}
	
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

