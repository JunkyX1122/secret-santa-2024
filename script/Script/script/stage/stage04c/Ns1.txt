#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns1"]
#Text["Ns1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME_MAX = 300;
let TIME = TIME_MAX*60;
let HEALTH_MAX = 220 * 3;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(HEALTH_MAX);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(TIME_MAX);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2,GetStgFrameHeight/2 );
	renderYuuma(objEnemy);

	end;
	SetCommonData("SpellCardBG1",false);
	
}

let isEnemyHittable = true;

@MainLoop
{
	if(isEnemyHittable)
	{
		ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
		ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    }
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}
task BossHitable(b)
{
	ObjRender_SetAlpha(objEnemy,b ? 255 : 0);
	isEnemyHittable = b;
}
task BossPhaseManager()
{
	
	while(TIME > MAX_TIME/4*3 && ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > (MAX_HEALTH)/4*3)
	{
		yield;
	}
}
task Fire
{
	BossHitable(false);
	let bit = 1-2*round(rand(0,1));
	let ang = -90;
	let t = 200;
	ascent(i in 0..t)
	{
		ang = -90 + 360/(t)*i * bit;
		let dis = 200 * sin(90/(t-1)*i);
		
		ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2+dis*cos(ang), GetStgFrameHeight/2+dis*sin(ang));
		yield;
	}
	ascent(i in 0..t)
	{
		ang = -90 + 360/(t)*i * bit;
		let dis = 200;
		
		ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2+dis*cos(ang), GetStgFrameHeight/2+dis*sin(ang));
		yield;
	}
}
task Slasher(x,y,x2,y2,tim)
{
	SE_PlayLen(chime1,60);
	let dis = Get_Distance(x, y, x2, y2);
	let ang = Get_PointAngle(x2,y2,x,y);
	let t = 30;
	let slashWidth = 35;
	loop(0)
	{
		ascent(i in 0..t)
		{
			let sideDis = 10*sin(90/(t-1)*i);
			if(!Obj_IsDeleted(objEnemy))
			{
				ascent(o in 0..2)
				{
					let laser = CreateStraightLaserA1(x+sideDis*cos(ang+90-180*o),y+sideDis*sin(ang+90-180*o),ang,810*2,slashWidth,0,400,9000);
					ObjRender_SetBlendType(laser,BLEND_ADD_ARGB);
					ObjShot_SetAutoDelete(laser,false);
					ObjStLaser_SetSource(laser,false);
					LaserGrowFade(laser,dis,64-64/t*i);
				}
				yield;
			}
		}
		wait(60);
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(laser0,60);
		let obj = CreateStraightLaserA1(x,y,ang,0,15,9999,400,0);
		ObjStLaser_SetSource(obj,false);
		ObjShot_SetAutoDelete(obj,false);

		ascent(i in 0..tim)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				ObjLaser_SetLength(obj,dis*sin(90/(tim-1)*i));
				ObjLaser_SetRenderWidth(obj, slashWidth);
			yield;
			}
		}
		ObjMove_SetDestAtFrameWeight(obj, x2,y2, tim);
		descent(i in 0..tim)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				if(i%1==0)
				{
					//SE_PlayLen(Shot1,60);
					//ShotA2(ObjMove_GetX(obj),ObjMove_GetY(obj),0,ang+rand(6,-6),0.05,2,42,42,15,3,BLEND_ALPHA);
				}
				ObjLaser_SetRenderWidth(obj, slashWidth/tim*i);
				dis = Get_Distance(ObjMove_GetX(obj),ObjMove_GetY(obj), x2, y2);
				ObjLaser_SetLength(obj,dis);
				yield;
			}
			
		}
		Obj_Delete(obj);
	}
}
task LaserGrowFade(obj,dis,alpha)
{
	let t = 10;
	ascent(i in 0..t)
	{
		ObjLaser_SetLength(obj,dis/t*i);
		ObjRender_SetAlpha(obj,alpha-alpha/t*i);
		yield;
	}
	Obj_Delete(obj);
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

