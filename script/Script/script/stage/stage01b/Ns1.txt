#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns1"]
#Text["Ns1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2,140 );
	renderBossUnanimated(objEnemy, IMG_BOSS_DAISUKE, 7);

	end;
	SetCommonData("SpellCardBG1",false);
	
}
@MainLoop
{
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	
	while(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(shot1,60);
		let ang = GetAngleToPlayer(objEnemy);
		ascent(i in 0..8)
		{
			
			if(i%2==1)
			{
				let sprdAm = 34;
				ascent(o in 0..sprdAm)
				{
					let ang2 = ang - 110*bit + 220/(sprdAm-1)*o*bit + 180;
					let dis = 10 + 10*i;
					let spd = 1+0.5*i;
					let spd2 = (1+0.75*i)/2;
					let x = ObjMove_GetX(objEnemy) + dis*cos(ang2);
					let y = ObjMove_GetY(objEnemy) + dis*sin(ang2);
					
					
					let obj = ShotA2(x,y,spd,ang2,-spd/40,1,57,423,10,2,BLEND_ALPHA,false);
					ObjRender_SetColor(obj,255,255,200);
					if(o==1||o==sprdAm-2||i==3)
					{
						ObjRender_SetColor(obj,225,128,128);
					}
					if(o==0||o==sprdAm-1||i==1)
					{
						ObjRender_SetColor(obj,128,255,128);
					}
		
				}
			}
		}
		let tot = 6;
		ascent(i in 0..5)
		{
			ascent(o in 0..tot)
			{
				SpikeFire(ang - 90*bit + 180/4*i*bit, bit, 1 - 0.8/(tot-1)*o ,7,  0, 3-1.4/(tot-1)*o);
			}
			SpikeFire(ang - 90*bit + 180/4*i*bit, bit, 2,12, 1, 3);
		}
		wait(80);
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(chime1,60);
		}
		wait(50);
		ObjEnemy_SetDamageRate(objEnemy, (0.075)/1.5, (0.075)/3);
		bit*=-1;
	}
}

task SpikeFire(ang, bit, spdScl, am, type, mspd2)
{

	let sprd = 38;
	ascent(i in 0..am-2)
	{
		ascent(o in 0..2)
		{
			let x = ObjMove_GetX(objEnemy) + 30 * cos(ang);
			let y = ObjMove_GetY(objEnemy) + 30 * sin(ang);
			let ang2 = ang + sprd/(am-1)*i*[1,-1][o]*bit;
			let spd = Interpolate_Decelerate(7, 3, 1/(am-1)*i) * 0.4 * spdScl;
			let obj = ShotA2(x,y,spd,ang2,-spd/70,0,[52,56][type],[422,423][type],5,2,BLEND_ALPHA,false);
			if(type==0)
			{
				ObjRender_SetScaleX(obj,0.8);
				ObjRender_SetScaleY(obj,1.5);
			}
			ObjMove_AddPatternA2(obj,80,0,[NO_CHANGE,ang][type],mspd2/120,mspd2,0);
		}
		
	}
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

