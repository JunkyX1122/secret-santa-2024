#include "./../../lib/lib_stageall.txt"
let GCSD=GetCurrentScriptDirectory();
let bSpell = false;
let current = GetCurrentScriptDirectory();
let fo = 0;
let adder = 0;

@Initialize
{
	TCallBg;
	ResetBG;
	SetAutoDeleteObject(true);

}

@MainLoop
{

	yield;
}
let counter = 0;
task TCallBg
{
	SpellBG;
	ascent(i in 0..8)
	{
		TNormalBackground(-1024*i);
	}
	TreeGenerator(1);
	TreeGenerator(-1);
	SkyBG;
}
let CLIP_DISTANCE = 5000;
task ResetBG
{
	SetCameraFocusX(-600);
	SetCameraFocusY(100);
	SetCameraFocusZ(0);
	SetCameraPitch(0);
	SetCameraYaw(0);
	SetCameraRoll(0);
	SetCameraAzimuthAngle(0);
	SetCameraElevationAngle(0);
	SetCameraRadius(200);

	SetCameraPerspectiveClip(0,CLIP_DISTANCE);
	SetFogParam(CLIP_DISTANCE-2000, CLIP_DISTANCE, 162,165,172);
}
let WORLD_SCROLL_SPEED = 5;


task SkyBG
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 17); //描画優先度を設定
	ObjPrim_SetTexture(obj, IMG_STAGE_01B_SKY); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,1024, 1024);
	ObjSprite2D_SetDestRect(obj, 0, 0, 1024, 1024);
	ObjSprite2D_SetDestCenter(obj);

	ObjRender_SetAlpha(obj,255);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2,40,0);
	ObjRender_SetScaleXYZ(obj,1, 1, 0);

	
	let obj3 = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj3, 19); //描画優先度を設定
	ObjPrim_SetTexture(obj3, IMG_PIXEL); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj3, 0, 0,1024, 512);
	ObjSprite2D_SetDestRect(obj3, 0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(obj3);
	ObjRender_SetAlpha(obj3,64);
	ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetColor(obj3,32,32,0);
	//ObjRender_SetBlendType(obj3,BLEND_SUBTRACT);
	let cc = 0;
	while(true)
	{
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,40,0);
		ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		//ObjSprite2D_SetSourceRect(obj2, cc, 0,1024+cc, 512);
		cc+=0.5;
		yield;
	}
	Obj_Delete(obj);
}


task TNormalBackground(x)
{ // floor
	let c = 0;
	let repeatingX = 1;
	let repeatingZ = 7;
	let obj=ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriorityI(obj,18);
	ObjPrim_SetTexture(obj,IMG_STAGE_01B_SNOW);
	ObjRender_SetZWrite(obj,true);
	ObjRender_SetZTest(obj,true);
	
	ObjSprite3D_SetSourceRect(obj,0,0,1024*repeatingX,1024*repeatingZ);
	ObjSprite3D_SetSourceDestRect(obj,0,0,1024*repeatingX,1024*repeatingZ);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	ObjRender_SetPosition(obj, x, 0, 0);

	ObjRender_SetAngleX(obj, 90);
	while(!Obj_IsDeleted(obj))
	{		

		ObjSprite3D_SetSourceRect(obj,c,0,1024*repeatingX+c,1024*repeatingZ);
		c-=WORLD_SCROLL_SPEED;
		yield;
	}
	Obj_Delete(obj);
}
let totalz = 0;

let MAX_TREES = 80;
task TreeGenerator(side)
{
	let positionArray = [];
	ascent(i in 0..MAX_TREES + 1)
	{
		positionArray ~= [[0,0]];
	}
	ascent(i in 0..MAX_TREES + 1)
	{
		let xPos = -CLIP_DISTANCE*1.2 + ((CLIP_DISTANCE*1.2)/(MAX_TREES-1))*i;
		let zPos = rand(150, 3000) * side;
		let totalScl = rand(1,1.7)*2;
		let randDir = 1-2*round(rand(0,1));
		positionArray[i] = [xPos, zPos,totalScl,randDir];
	}
	ascent(i in 0..MAX_TREES)
	{
		CreateTree(i);
	}
	
	task CreateTree(startID)
	{
		let bg = ObjPrim_Create(OBJ_SPRITE_3D);
		let zslide = 0;
		let size = 2;

		ObjRender_SetBlendType(bg,BLEND_ALPHA);
		Obj_SetRenderPriorityI(bg,18);
		ObjRender_SetZWrite(bg,true);
		ObjRender_SetZTest(bg,true);

		ObjPrim_SetTexture(bg,IMG_STAGE_01B_TREE);
		
		ObjRender_SetAngleXYZ(bg,0,0,0);
		ObjSprite3D_SetSourceRect(bg,0,0,256,256);
		ObjSprite3D_SetDestRect(bg,0,0,256,256);
		ObjSprite3D_SetSourceDestRect(bg,0,0,256,256);
		
		ObjRender_SetAngleZ(bg, 180);
		ObjRender_SetFogEnable(bg, true);
		//ObjSprite3D_SetBillboard(bg, true );
		//let amountcount = 1;
		let rollingID = startID;
		let rrr = 1/1000;
		while(true)
		{	
			let x = positionArray[startID][0];
			let z = positionArray[rollingID % (MAX_TREES+1)][1];
			let travelDis = positionArray[startID+1][0];
			let totalScl = positionArray[rollingID % (MAX_TREES+1)][2];
			let totalRot = positionArray[rollingID % (MAX_TREES+1)][3];
			while(x < travelDis)
			{
				ObjRender_SetPosition(bg,x, (128 - 5) * totalScl ,z);
				ObjRender_SetScaleXYZ(bg, totalScl);
				ObjRender_SetAngleY(bg, 90*totalRot);
				
				let alphaRate = rrr * max(0,x - -CLIP_DISTANCE);
				ObjRender_SetAlpha(bg, 255*(alphaRate));
				x+=WORLD_SCROLL_SPEED;
				yield;
			}
			rollingID--;
	
		}
	}
}

task SpellBGFlatColor
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 24); //描画優先度を設定
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory~"./../../../img/background/BG1/pixel.png"); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	let alpha1 = 0;
	while(true)
	{
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
			if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		ObjRender_SetAlpha(obj,165*alpha1);
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}

task SpellBG
{
	SpellBGFlatColor();
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj, 22); 
	ObjPrim_SetTexture(obj, IMG_STAGE_01B_SPELL_00); 
	ObjSprite2D_SetSourceRect(obj, 0, 0,1024, 512);
	ObjSprite2D_SetDestRect(obj, 0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj, 1);


	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj2, 22); 
	ObjPrim_SetTexture(obj2, IMG_STAGE_01B_SPELL_01); 
	ObjSprite2D_SetSourceRect(obj2, 0, 0,1024, 1024);
	ObjSprite2D_SetDestRect(obj2, 0, 0, 1024, 1024);
	ObjSprite2D_SetDestCenter(obj2);
	ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj2, 2);
	ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
	
	let obj3 = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj3, 23); 
	ObjPrim_SetTexture(obj3, IMG_STAGE_01B_SPELL_02); 
	ObjSprite2D_SetSourceRect(obj3, 0, 0,1024, 1024);
	ObjSprite2D_SetDestRect(obj3, 0, 0, 1024, 1024);
	ObjSprite2D_SetDestCenter(obj3);
	ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj3, 1);
	ObjRender_SetBlendType(obj3, BLEND_SUBTRACT);
	let alpha1 = 0;
	let c = 0;
	let scrollSpd_bg01 = 0.25;
	let scrlSpd1 = 0.25;
	let scrlSpd2 = -0.5;
	while(true)
	{
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
			if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		
		ObjRender_SetAlpha(obj, 255*alpha1);
		ObjRender_SetAlpha(obj2, 32*alpha1);
		ObjRender_SetAlpha(obj3, 128*alpha1);
		
		ObjSprite2D_SetSourceRect(obj2, 0, c*scrlSpd1,1024, 1024+c*scrlSpd1);
		ObjSprite2D_SetSourceRect(obj3, 0, c*scrlSpd2,1024, 1024+c*scrlSpd2);
		c++;
		yield;
	}

	
}
