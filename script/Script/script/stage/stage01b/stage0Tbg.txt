#include "./../../lib/lib_stageall.txt"
let GCSD=GetCurrentScriptDirectory();
let bSpell = false;
let current = GetCurrentScriptDirectory();
let fo = 0;
let adder = 0;

@Initialize
{
	TCallBg;
	ResetBG;
	SetAutoDeleteObject(true);

}

@MainLoop
{

	yield;
}
let counter = 0;
task TCallBg
{
	SpellBG;
	ascent(i in 0..8)
	{
		TNormalBackground(-1024*i);
	}
	TreeGenerator(1);
	TreeGenerator(-1);
}
task ResetBG
{
	SetCameraFocusX(-600);
	SetCameraFocusY(100);
	SetCameraFocusZ(0);
	SetCameraAzimuthAngle(0);
	SetCameraElevationAngle(0);
	SetCameraRadius(200);

	SetCameraPerspectiveClip(0,7000);
	SetFogParam(5000, 7000, 0,0,0);
}
let WORLD_SCROLL_SPEED = 1;
task TNormalBackground(x)
{ // floor
	let c = 0;
	let repeatingX = 1;
	let repeatingZ = 7;
	let obj=ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriorityI(obj,18);
	ObjPrim_SetTexture(obj,IMG_STAGE_01B_SNOW);
	ObjRender_SetZWrite(obj,true);
	ObjRender_SetZTest(obj,true);
	
	ObjSprite3D_SetSourceRect(obj,0,0,1024*repeatingX,1024*repeatingZ);
	ObjSprite3D_SetSourceDestRect(obj,0,0,1024*repeatingX,1024*repeatingZ);
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	ObjRender_SetPosition(obj, x, 0, 0);

	ObjRender_SetAngleX(obj, 90);
	while(!Obj_IsDeleted(obj))
	{		

		ObjSprite3D_SetSourceRect(obj,c,0,1024*repeatingX+c,1024*repeatingZ);
		c-=WORLD_SCROLL_SPEED;
		yield;
	}
	Obj_Delete(obj);
}
let totalz = 0;

let MAX_TREES = 30;
task TreeGenerator(side)
{
	let positionArray = [];
	ascent(i in 0..MAX_TREES + 1)
	{
		positionArray ~= [[0,0]];
	}
	ascent(i in 0..MAX_TREES + 1)
	{
		let xPos = -7000 + (7000/(MAX_TREES-1))*i;
		let zPos = rand(150, 2000) * side;
		let totalScl = rand(1,1.7)*2;
		let randDir = 1-2*round(rand(0,1));
		positionArray[i] = [xPos, zPos,totalScl,randDir];
	}
	ascent(i in 0..MAX_TREES)
	{
		CreateTree(i);
	}
	
	task CreateTree(startID)
	{
		let bg = ObjPrim_Create(OBJ_SPRITE_3D);
		let zslide = 0;
		let size = 2;

		ObjRender_SetBlendType(bg,BLEND_ALPHA);
		Obj_SetRenderPriorityI(bg,18);
		ObjRender_SetZWrite(bg,true);
		ObjRender_SetZTest(bg,true);

		ObjPrim_SetTexture(bg,IMG_STAGE_01B_TREE);
		
		ObjRender_SetAngleXYZ(bg,0,0,0);
		ObjSprite3D_SetSourceRect(bg,0,0,256,256);
		ObjSprite3D_SetDestRect(bg,0,0,256,256);
		ObjSprite3D_SetSourceDestRect(bg,0,0,256,256);
		
		ObjRender_SetAngleZ(bg, 180);
		ObjRender_SetFogEnable(bg, true);
		//ObjSprite3D_SetBillboard(bg, true );
		//let amountcount = 1;
		let rollingID = startID;
		while(true)
		{	
			let x = positionArray[startID][0];
			let z = positionArray[rollingID % (MAX_TREES+1)][1];
			let travelDis = positionArray[startID+1][0];
			let totalScl = positionArray[rollingID % (MAX_TREES+1)][2];
			let totalRot = positionArray[rollingID % (MAX_TREES+1)][3];
			while(x < travelDis)
			{
				ObjRender_SetPosition(bg,x, (128 - 5) * totalScl ,z);
				ObjRender_SetScale(bg, totalScl);
				ObjRender_SetAngleY(bg, 90*totalRot);
				x+=WORLD_SCROLL_SPEED;
				yield;
			}
			rollingID--;
			yield;
			
		}
	}
}

task SpellBGFlatColor
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 24); //描画優先度を設定
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory~"./../../../img/background/BG1/pixel.png"); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	let alpha1 = 0;
	while(true)
	{
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
			if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		ObjRender_SetAlpha(obj,128*alpha1);
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}

task SpellBG
{
	SpellBGFlatColor;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj, 22); 
	ObjPrim_SetTexture(obj, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj,1.5,1.5,0);
	ObjRender_SetAngleZ(obj,-90);
	//ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj2, 22); 
	ObjPrim_SetTexture(obj2, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj2, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj2, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj2);
	ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj2,-1.5,1.5,0);
	ObjRender_SetAngleZ(obj2,-90);
	//ObjRender_SetBlendType(obj2,BLEND_ADD_ARGB);
	
	let vertexCount = 512;
	let obj3 = ObjPrim_Create(OBJ_PRIMITIVE_2D); 
	ObjPrim_SetPrimitiveType(obj3,PRIMITIVE_TRIANGLESTRIP);
	Obj_SetRenderPriorityI(obj3, 23); 
	ObjPrim_SetVertexCount(obj3,vertexCount);
	ObjPrim_SetTexture(obj3, IMG_YUUMA_BG2); 
	ObjRender_SetBlendType(obj3,BLEND_SUBTRACT);
	ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	
	let objRings = [];
	ascent(i in 0..3)
	{
		let objR = ObjPrim_Create(OBJ_SPRITE_2D); 
		objRings ~= [objR];
		Obj_SetRenderPriorityI(objRings[i], 24); 
		ObjPrim_SetTexture(objRings[i], IMG_YUUMA_BG3); 
		ObjSprite2D_SetSourceRect(objRings[i], 0, 0,1024, 1024);
		ObjSprite2D_SetDestRect(objRings[i], 0, 0, 1024, 1024);
		ObjSprite2D_SetDestCenter(objRings[i]);
		ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetBlendType(objRings[i],BLEND_SUBTRACT);
		
	}
	ObjRender_SetScale(objRings[0],1);
	ObjRender_SetScale(objRings[1],0.72);
	ObjRender_SetScale(objRings[2],0.5185);
	
	ascent(i in 0..vertexCount/2)
	{
		let index = i*2;
		let angle = 360/((vertexCount/2)-1)*i+90;
		let dis = 550;
		ObjPrim_SetVertexPosition(obj3,index,0,0,0);
		ObjPrim_SetVertexPosition(obj3,index+1,dis*cos(angle),dis*sin(angle),0);
		ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, 0);
		ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512);
		ObjPrim_SetVertexAlpha(obj3,index,0);
		ObjPrim_SetVertexColor(obj3,index,0,0,0);
		
	}
	
	let alpha1 = 0;
	let c1 = 0;
	let c2 = 0;
	let c3 = 0;
	let tm1 = rand(0.5,1);
	let tm2 = rand(0.5,1);
	let tv1 = tm1;
	let tv2 = tm2;
	
	while(true)
	{
		if(c3%180 == 0)
		{
			tv1 = rand(0.5,2)/2;
			tv2 = rand(0.5,2)/2;
		}
		tm1 = tm1 * 0.999 + tv1 * 0.001;
		tm2 = tm2 * 0.999 + tv2 * 0.001;
		
		ObjRender_SetAlpha(obj,(128+128*sin(c3/3))*alpha1);
		ObjRender_SetAlpha(obj2,(128+128*sin(c3/3+180))*alpha1);
		ObjRender_SetAlpha(obj3,255*alpha1);
		
		ascent(i in 0..3)
		{
			ObjRender_SetAlpha(objRings[i],(64-32/2*i)*alpha1);
			ObjRender_SetAngleZ(objRings[i],c3*(1-2*(i%2))*0.025);
		}
		
	
		ObjSprite2D_SetSourceRect(obj, 0, 0+c1,512, 512+c1);
		ObjSprite2D_SetSourceRect(obj2, 0, 0-c2,512, 512-c2);
		ascent(i in 0..vertexCount/2)
		{
			let index = i*2;
			ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, c3*0.5);
			ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512+c3*0.5);
		}
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
		if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ascent(i in 0..3)
		{
			ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);		
		}
		c1+=tm1;
		c2+=tm2;
		c3++;
		yield;
	}

	
}
