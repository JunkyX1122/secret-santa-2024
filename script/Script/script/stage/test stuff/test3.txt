#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Gabe Self Promotion"]
#Text["Gabe Self Promotion"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"


let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(250);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	//let x1 = 0;
	//let x2 = GetScreenWidth;
	//SetStgFrame(x1,0,x2,480,10,80);
	//SetPlayerClip(8,16,GetStgFrameWidth-8,GetStgFrameHeight-16);
	//SetStgFrame(107,0,640+107,480,10,80);
	//SetPlayerClip(0,0,GetStgFrameWidth,GetStgFrameHeight);
	
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2,150 );
	renderYuuma(objEnemy);

	//renderBoss(objEnemy,IMG_BOSS1PLACE);
	end;
	SetShotAutoDeleteClip(33,33,33,33);
	SetCommonData("SpellCardBG1",false);

	
	
	SetCommonData("GlobalColour",[255,255,255]);
	
}
@MainLoop
{
	SetCommonData("BossX", ObjMove_GetX(objEnemy));
	SetCommonData("BossY", ObjMove_GetY(objEnemy));
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        
        SetAutoDeleteObject(true);
    }
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}
let toggle = false;
task Fire
{
	let bit = 1;
	let ang = 0;
	let slashSpeed = 25;
	PassiveFire;
	while(!Obj_IsDeleted(objEnemy))
	{
		ascent(i in 0..7)
		{
			ang = GetAngleToPlayer(objEnemy);
			let x = ObjMove_GetX(objEnemy) + rand(50,-50);
			let y = ObjMove_GetY(objEnemy) + rand(50,-50);
			Slasher(x,y,x + 900 * cos(ang),y + 900 * sin(ang),slashSpeed);
			wait(2);
		}
		let ct = 0;
		let orientation = 0*bit;
		let spinAmount = 20;
		let ang2 = ang;
		let spinTotal = 360*2;
		loop(spinAmount)
		{
			
			let centerX = ObjMove_GetX(objEnemy);
			let centerY = ObjMove_GetY(objEnemy);
			
			let xx = centerX+(ct)*cos(ang);
			let yy = centerY+(ct)*sin(ang);
			let x=(xx-centerX)*cos(orientation) - (yy-centerY)*sin(orientation) + centerX;
			let y=(xx-centerX)*sin(orientation) + (yy-centerY)*cos(orientation) + centerY;
			
			Slasher(x,y,x + 900 * cos(ang2),y + 900 * sin(ang2),slashSpeed);
			
			ang+=360/(spinAmount-1)*bit;
			ang2-=spinTotal/(spinAmount-1)*bit;
			ct += 100/spinAmount;
			wait(2);
		}
		bit*=-1;
		toggle = true;
		wait(60*3);
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*bit, rand(80,120), 2*7+2*spinAmount);

	}
}

task PassiveFire
{
	while(!toggle){yield;}
	let cc = 0;
	let ang = rand(0,360);
	while(!Obj_IsDeleted(objEnemy))
	{
		if(cc%30==0)
		{
			SE_PlayLen(shot1,60);
			ascent(i in 0..6)
			{
				let sizeAng = ang+360/6*i;
				let sizeDis = 75-60*sin(360/(60*5)*cc);
				let targetAng = GetAngleToPlayer(objEnemy)+rand(5,-5);
				let obj2 = ShotA2(ObjMove_GetX(objEnemy)+sizeDis*cos(sizeAng),ObjMove_GetY(objEnemy)+sizeDis*sin(sizeAng),0,targetAng,2.5/120,2.5,44,418,10,2,BLEND_ALPHA,true);
			}
		}
		ang+=0.1;
		cc++;
		yield;
	}
}

task Slasher(x,y,x2,y2,tim)
{
	SE_PlayLen(chime1,60);
	let dis = Get_Distance(x, y, x2, y2);
	let ang = Get_PointAngle(x2,y2,x,y);
	let t = 30;
	let slashWidth = 35;
	ascent(i in 0..t)
	{
		let sideDis = 10*sin(90/(t-1)*i);
		ascent(o in 0..2)
		{
			let laser = CreateStraightLaserA1(x+sideDis*cos(ang+90-180*o),y+sideDis*sin(ang+90-180*o),ang,810*2,slashWidth,0,400,9000);
			ObjRender_SetBlendType(laser,BLEND_ADD_ARGB);
			ObjShot_SetAutoDelete(laser,false);
			ObjStLaser_SetSource(laser,false);
			LaserGrowFade(laser,dis,64-64/t*i);
		}
		yield;
	}
	wait(60);
	SE_PlayLen(laser0,60);
	let obj = CreateStraightLaserA1(x,y,ang,0,15,9999,400,0);
	ObjStLaser_SetSource(obj,false);
	ObjShot_SetAutoDelete(obj,false);
	ascent(i in 0..6)
	{
		let obj2 = ShotA2(x,y,3,ang+360/6*i,-3/60,0,425,425,10,2,BLEND_ADD_ARGB,true);
		ObjRender_SetBlendType(obj2,BLEND_ADD_ARGB);
		ObjMove_AddPatternA2(obj2,60+10+30,0,NO_CHANGE,2/40,2,0);
	}
	
	ascent(i in 0..tim)
	{
		ObjLaser_SetLength(obj,dis*sin(90/(tim-1)*i));
		ObjLaser_SetRenderWidth(obj, slashWidth);
		yield;
	}
	ObjMove_SetDestAtFrameWeight(obj, x2,y2, tim);
	descent(i in 0..tim)
	{
		if(i%1==0)
		{
			//SE_PlayLen(Shot1,60);
			//ShotA2(ObjMove_GetX(obj),ObjMove_GetY(obj),0,ang+rand(6,-6),0.05,2,42,42,15,3,BLEND_ALPHA);
		}
		ObjLaser_SetRenderWidth(obj, slashWidth/tim*i);
		dis = Get_Distance(ObjMove_GetX(obj),ObjMove_GetY(obj), x2, y2);
		ObjLaser_SetLength(obj,dis);
		yield;
		
	}
	Obj_Delete(obj);
}

task LaserGrowFade(obj,dis,alpha)
{
	let t = 10;
	ascent(i in 0..t)
	{
		ObjLaser_SetLength(obj,dis/t*i);
		ObjRender_SetAlpha(obj,alpha-alpha/t*i);
		yield;
	}
	Obj_Delete(obj);
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

