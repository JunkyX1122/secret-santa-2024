#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["-Nova-"]
#Text["S1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 65;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(65);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_ANUBIS, 5);
	magiccircle(objEnemy,1);
	RecordAttackHistory("01a", "S1", DIFFICULTY_NAMES[DIFFICULTY]);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("-Nova-","", LENEN, 0,0,0);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	SetCommonData("GatoPlayerSprite", 1);
	SetCommonData("BossName", "Anubis");
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 60)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 60)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	while(!Obj_IsDeleted(objEnemy))
	{
		let ang = rand(0,360);
		let tot = [16,20][DIFFICULTY];
		ascent(o in 0..2)
		{
			ascent(i in 0..tot)
			{
				let ang2 = ang + 360/tot*i*bit + 180/tot*bit*o;
				let x = ObjMove_GetX(objEnemy) + 50 * cos(ang2);
				let y = ObjMove_GetY(objEnemy) + 50 * sin(ang2);
				let speed = [3,1.5][o];
				let obj = BloodShot(x, y, 0, ang2, 1.25, 20, [255,255,64], true);
				ObjMove_AddPatternA2(obj, 0,   0, NO_CHANGE, speed/180, speed, 0);
			}
		}
		ShinyOrb(GetStgFrameWidth/2 + 200*bit, 75, bit);
		wait(60*6);
		ObjEnemy_SetDamageRate(objEnemy, (0.065/3)/1.5, (0.075/3)/3);
		bit*=-1;
	}
}
task ShinyOrb(x, y, bit)
{
	let ang = rand(0,360);
	let speed = 6;
	SE_PlayLen(boon0,60);
	SE_PlayLen(charge0, 60);
	SE_PlayLen(chime1,60);
	ascent(i in 0..8)
	{
		let obj = BloodShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), speed, ang+360/8*i, 1.5, 20, [255,255,0], true);
		ObjMove_AddPatternA2(obj, 0,   speed, NO_CHANGE, -(speed-2)/60, 4, 0);
		Homing(obj, x, y, 7, 0, -1);
		ObjShot_SetDeleteFrameA5(obj, 140, 2, [255,255,0], 120);
	}
	wait(140);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(ufo, 60);
		SE_PlayLen(boon1,60);
	}
	let obj = CreateShotA1(x,y, 0, -90, 405, 0);
	ObjShot_SetSpellResist(obj, true);
	ObjShot_SetAutoDelete(obj, false);
	Obj_SetRenderPriority(obj, 0.6);
	ascent(i in 0..60)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let a = 0;
			let b = 7;
			let t = 1/59*i;
			let scl = (a + (b - a) * (1 - (1 - t)^6));
			ObjShot_SetIntersectionScaleXY(obj, scl, scl);
			ObjRender_SetScale(obj, scl);
			yield;
		}
	}
	ascent(i in 0..60*5)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			if(i%[6,4][DIFFICULTY]==0)
			{
				SE_PlayLen(Shot1, 60);
				let t = [5,6][DIFFICULTY];
				ascent(o in 0..t)
				{
					let ang2 = ang + 360/t*o - i/4 * 9.132*bit;
					let x2 = x+100*cos(ang2);
					let y2 = y+100*sin(ang2);
					let shot = ShotA2(x2, y2, 0, ang2, 3/200, 3, 230, 423, 20, 2, BLEND_ADD_ARGB, false);
					ObjRender_SetBlendType(shot, BLEND_ADD_ARGB);
					ObjMove_AddPatternA2(shot, 20, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, [0.17,0.2][DIFFICULTY]*bit);
				}
			}
			yield;
		}
	}
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(chime1, 60);
		let t = [24,30][DIFFICULTY];
		ascent(o in 0..t)
		{
			let ang2 = ang + 360/t*o *bit;
			let x2 = x+100*cos(ang2);
			let y2 = y+100*sin(ang2);
			let shot = ShotA2(x2, y2, 0, ang2, 3/200, 3, 284, 423, 20, 2, BLEND_ADD_ARGB, false);
			ObjRender_SetBlendType(shot, BLEND_ADD_ARGB);
			ObjMove_AddPatternA2(shot, 20, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, -[0.17,0.2][DIFFICULTY]*bit);
		}
	}
	if(!Obj_IsDeleted(obj))
	{
		ang = GetAngleToPlayer(obj);
		let cosAng = cos(ang);
		let sinAng = sin(ang);
		let spd = 0;
		while(!Obj_IsDeleted(obj) && !Obj_IsDeleted(objEnemy) && IsInScreen(ObjMove_GetX(obj),ObjMove_GetY(obj),-256))
		{
			ObjMove_SetPosition(obj, ObjMove_GetX(obj) + spd*cosAng, ObjMove_GetY(obj) + spd*sinAng);
			if(spd < 3)
			{
				spd+=3/180;
			}
			yield;
		}
		if(!Obj_IsDeleted(obj))
		{
			Obj_Delete(obj);
		}
	}
}
function IsInScreen(x,y,padding)
{
	if(x < padding) return false;
	if(y < padding) return false;
	if(x > GetStgFrameWidth  - padding) return false;
	if(y > GetStgFrameHeight - padding) return false;
	return true;
}

function BloodShot(x, y, speed, ang, sclMax, growT, col, drip)
{
	let obj = CreateShotA1(x, y, speed, ang, 293, 0);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, col[0], col[1], col[2]);
	Obj_SetRenderPriority(obj, 0.49);
	
	if(!drip)
	{
		ObjRender_SetColor(obj, 255,255,255);
		ObjShot_SetGraphic(obj, 296);
		Obj_SetRenderPriority(obj, 0.52);
		ObjRender_SetBlendType(obj, BLEND_SUBTRACT);
	}

	
	ObjShot_SetSpellResist(obj, true);
	//ObjShot_SetAutoDelete(obj, false);
	BloodRender(obj);
	
	return obj;
	
	task BloodRender(obj)
	{
		let obj2 = CreateShotA1(x, y, 0, 90, 296, 0);
		ObjRender_SetBlendType(obj2, BLEND_SUBTRACT);
		Obj_SetRenderPriority(obj2, 0.48);
		if(!drip)
		{
			ObjRender_SetColor(obj2, 255,0,0);
			ObjShot_SetGraphic(obj2, 293);
			Obj_SetRenderPriority(obj2, 0.51);
			ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
		}
		ObjShot_SetSpellResist(obj2, true);
		ObjShot_SetIntersectionEnable(obj2, false);
		ObjShot_SetAutoDelete(obj2, false);
		let scl = 0;
	
		let sclInterp = 0;
		let cc = 0;
		Grower(obj, obj2);
		let randStarter = round(rand(0,19));
		while(!Obj_IsDeleted(obj))
		{
			
			ObjMove_SetPosition(obj2, ObjMove_GetX(obj), ObjMove_GetY(obj));
			ObjMove_SetAngleR(obj2, ObjMove_GetAngle(obj));
			
			if(drip)
			{
				if((cc+randStarter)%20==0)
				{
					BloodDrip(ObjMove_GetX(obj), ObjMove_GetY(obj), sclInterp);
				}
			}
			cc++;
			yield;
		}
		Obj_Delete(obj2);
		
		task Grower(obj, obj2)
		{
			ascent(i in 0..growT)
			{
				scl+=1/growT;
				sclInterp = Interpolate_Overshoot(0, sclMax, sclMax *2, scl);
				ObjRender_SetScale(obj ,sclInterp);
				ObjRender_SetScale(obj2,sclInterp * 1.4);
				ObjShot_SetIntersectionScaleXY(obj, sclInterp);
				yield;
			}
		}
		task BloodDrip(x, y, scl)
		{
			let objD = CreateShotA1(x, y, speed, 90, 293, 0);
			ObjRender_SetBlendType(objD, BLEND_ADD_ARGB);
			ObjRender_SetColor(objD, 255, 0, 0);
			Obj_SetRenderPriority(objD, 0.49);
			ObjShot_SetIntersectionEnable(objD, false);
			
			let objD2 = CreateShotA1(x, y, 0, 90, 296, 0);
			ObjRender_SetBlendType(objD2, BLEND_SUBTRACT);
			Obj_SetRenderPriority(objD2, 0.48);
			ObjShot_SetSpellResist(objD2, true);
			ObjShot_SetIntersectionEnable(objD2, false);
			
			let sclI = scl*0.75;
			let t = 70;
			ascent(i in 0..t)
			{
				scl = Interpolate_Accelerate(sclI, 0, 1/t*i);
				ObjRender_SetScale(objD ,scl);
				ObjRender_SetScale(objD2,scl * 1.4);
				ObjMove_SetPosition(objD, x, y);
				ObjMove_SetPosition(objD2, x, y);
				y+=2/t*i;
				yield;
			}
			Obj_Delete(objD);
			Obj_Delete(objD2);
		}
	}
}

task Homing(obj, x, y, maxTraverse, delay, stayer)
{
	
	wait(delay);
	
	//ObjMove_SetAngleR(obj, GetAngleToPlayer(obj));
	
	let ang = ObjMove_GetAngle(obj);
	let countdown = stayer;
	let homeForever = false;
	if(stayer <= 0)
	{
		homeForever = true;
		countdown = 1000;
	}
	while(!Obj_IsDeleted(obj) && countdown > 0)
	{
		let dir=-90;

			dir = atan2( y - ObjMove_GetY(obj), x - ObjMove_GetX(obj));
							
			// difference between 'dir' and 'angle'
			if(!Obj_IsDeleted(obj))
			{
				let diff = dir - ang;
				while(diff >= 180) { diff -= 360; }    // adjust the range
				while(diff < -180) { diff += 360; }

				let diffAbs = (|diff|);
				if(diffAbs < maxTraverse) {
					// if the difference is small,
					// the bullet turns to the player's character
					ang = dir;
				} else {
					// otherwise, the bullet turns 'maxTraverse' degrees
					ang += maxTraverse * diff / diffAbs;
				}
			}
			ObjMove_SetAngleR(obj,ang);
			if(!homeForever)
			{
				countdown--;
			}
			yield;
	}
}


task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

