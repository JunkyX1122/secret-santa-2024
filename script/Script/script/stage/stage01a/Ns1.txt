#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns1"]
#Text["Ns1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2,140 );
	renderYuuma(objEnemy);

	end;
	SetCommonData("SpellCardBG1",false);
	
}
@MainLoop
{
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.08)/1.5, (0.08)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{
	yield;
	let bit = 1-2*round(rand(0,1));
	
	let cc = 0;
	let bitIni = bit;
	while(!Obj_IsDeleted(objEnemy))
	{
		if(cc%200==0)
		{
			SE_PlayLen(shot1,60);
			let ang = -cc*3.92321 *bit;
			ascent(o in 0..2)
			{
				let tot = [99, 40][o];
				let spd = [4,7][o];
				ascent(i in 0..tot)
				{
					let ang2 = ang+360/tot*i*bit;
					let x = ObjMove_GetX(objEnemy) + 20 * cos(ang2);
					let y = ObjMove_GetY(objEnemy) + 20 * sin(ang2);

					let obj = ShotA2(x, y, spd, ang2, -spd/60, 0, 167, 167, 10, 2, BLEND_ALPHA,true);
					ObjMove_AddPatternA2(obj, 110, 			 0, NO_CHANGE, 2/60, 2, [2*bit*[1,0,-1][bitIni%3],0][o]);
					ObjMove_AddPatternA2(obj, 110+30, NO_CHANGE, NO_CHANGE, 2/60, 2, 0);
					bitIni++;
				}
			}
			OrbRing(cc,bit);
		}
		if(cc%200==110)
		{
			SE_PlayLen(charge1,60);
			ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(50,-50), 150+rand(10,-10), 60);
		}
		cc++;
		yield;
	}
}

task OrbRing(cc,bit)
{
	let ang = -90+rand(45,-45);
	let tot = 10;
	ascent(i in 0..tot)
	{
		let ang2 = ang + 360/tot*i*bit;
		let x = ObjMove_GetX(objEnemy);
		let y = ObjMove_GetY(objEnemy);
		let speed = 7;
		let obj = BloodShot(x, y, speed, ang2, 1.5, 60, [255,64,64], true);
		ObjMove_AddPatternA2(obj, 0,   speed, NO_CHANGE, -speed/60, 0, 0);
		ObjMove_AddPatternA2(obj, 110, 0,     NO_CHANGE,  2/50,     2, 0);
		Homing(obj, 2, 110, 50);
	}
	
	ascent(i in 0..tot)
	{
		let ang2 = ang + 360/tot*i*bit + 180/tot*bit;
		let x = ObjMove_GetX(objEnemy) + 130 * cos(ang2);
		let y = ObjMove_GetY(objEnemy) + 130 * sin(ang2);
		let speed = 3;
		let obj = BloodShot(x, y, 0, ang2, 1.75, 20, [255,64,64], false);
		ObjMove_AddPatternA2(obj, 110,   0, NO_CHANGE, speed/180, speed, 0);
	}
}



function BloodShot(x, y, speed, ang, sclMax, growT, col, drip)
{
	let obj = CreateShotA1(x, y, speed, ang, 293, 0);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, col[0], col[1], col[2]);
	Obj_SetRenderPriority(obj, 0.54);
	
	if(!drip)
	{
		ObjRender_SetColor(obj, 255,255,255);
		ObjShot_SetGraphic(obj, 296);
		Obj_SetRenderPriority(obj, 0.52);
		ObjRender_SetBlendType(obj, BLEND_SUBTRACT);
	}

	
	ObjShot_SetSpellResist(obj, true);
	//ObjShot_SetAutoDelete(obj, false);
	BloodRender(obj);
	
	return obj;
	
	task BloodRender(obj)
	{
		let obj2 = CreateShotA1(x, y, 0, 90, 296, 0);
		ObjRender_SetBlendType(obj2, BLEND_SUBTRACT);
		Obj_SetRenderPriority(obj2, 0.53);
		if(!drip)
		{
			ObjRender_SetColor(obj2, 255,0,0);
			ObjShot_SetGraphic(obj2, 293);
			Obj_SetRenderPriority(obj2, 0.51);
			ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
		}
		ObjShot_SetSpellResist(obj2, true);
		ObjShot_SetIntersectionEnable(obj2, false);
		ObjShot_SetAutoDelete(obj2, false);
		let scl = 0;
	
		let sclInterp = 0;
		let cc = 0;
		Grower(obj, obj2);
		let randStarter = round(rand(0,19));
		while(!Obj_IsDeleted(obj))
		{
			ObjMove_SetPosition(obj2, ObjMove_GetX(obj), ObjMove_GetY(obj));
			ObjMove_SetAngle(obj2, ObjMove_GetAngle(obj));
			
			if(drip)
			{
				if((cc+randStarter)%20==0)
				{
					BloodDrip(ObjMove_GetX(obj), ObjMove_GetY(obj), sclInterp);
				}
			}
			cc++;
			yield;
		}
		Obj_Delete(obj2);
		
		task Grower(obj, obj2)
		{
			ascent(i in 0..growT)
			{
				scl+=1/growT;
				sclInterp = Interpolate_Overshoot(0, sclMax, sclMax *2, scl);
				ObjRender_SetScale(obj ,sclInterp);
				ObjRender_SetScale(obj2,sclInterp * 1.4);
				ObjShot_SetIntersectionScaleXY(obj, sclInterp);
				yield;
			}
		}
		task BloodDrip(x, y, scl)
		{
			let objD = CreateShotA1(x, y, speed, 90, 293, 0);
			ObjRender_SetBlendType(objD, BLEND_ADD_ARGB);
			ObjRender_SetColor(objD, 255, 0, 0);
			Obj_SetRenderPriority(objD, 0.54);
			ObjShot_SetIntersectionEnable(objD, false);
			
			let objD2 = CreateShotA1(x, y, 0, 90, 296, 0);
			ObjRender_SetBlendType(objD2, BLEND_SUBTRACT);
			Obj_SetRenderPriority(objD2, 0.53);
			ObjShot_SetSpellResist(objD2, true);
			ObjShot_SetIntersectionEnable(objD2, false);
			
			let sclI = scl*0.75;
			let t = 70;
			ascent(i in 0..t)
			{
				scl = Interpolate_Accelerate(sclI, 0, 1/t*i);
				ObjRender_SetScale(objD ,scl);
				ObjRender_SetScale(objD2,scl * 1.4);
				ObjMove_SetPosition(objD, x, y);
				ObjMove_SetPosition(objD2, x, y);
				y+=2/t*i;
				yield;
			}
			Obj_Delete(objD);
			Obj_Delete(objD2);
		}
	}
}

task Homing(obj, maxTraverse, delay, stayer)
{
	
	wait(delay);
	
	//ObjMove_SetAngle(obj, GetAngleToPlayer(obj));
	
	let ang = ObjMove_GetAngle(obj);
	let countdown = stayer;
	let homeForever = false;
	if(stayer <= 0)
	{
		countdown = 1000;
		homeForever = true;
	}
	while(!Obj_IsDeleted(obj) && countdown > 0)
	{
		let dir=-90;

			dir = atan2( GetPlayerY - ObjMove_GetY(obj), GetPlayerX - ObjMove_GetX(obj));
							
			// difference between 'dir' and 'angle'
			if(!Obj_IsDeleted(obj))
			{
				let diff = dir - ang;
				while(diff >= 180) { diff -= 360; }    // adjust the range
				while(diff < -180) { diff += 360; }

				let diffAbs = (|diff|);
				if(diffAbs < maxTraverse) {
					// if the difference is small,
					// the bullet turns to the player's character
					ang = dir;
				} else {
					// otherwise, the bullet turns 'maxTraverse' degrees
					ang += maxTraverse * diff / diffAbs;
				}
			}
			ObjMove_SetAngle(obj,ang);
			if(!homeForever)
			{
				countdown--;
			}
			yield;
	}
}

task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

