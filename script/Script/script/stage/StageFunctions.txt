
let music1 = ObjSound_Create;
let vol = 100;
let startMusic = false;

task BossMusicChange(id)
{
	MusicChange(BOSS_MUSIC_PATHS[id], BOSS_MUSIC_DATA[id][0], BOSS_MUSIC_DATA[id][1], BOSS_MUSIC_DATA[id][2]);
	if(GetCommonData("isPracticing", false)==false)
	{
		StageNameShow(BOSS_MUSIC_NAMES[id]);
	}
}
task StageMusicChange(id)
{
	MusicChange(STAGE_MUSIC_PATHS[id], STAGE_MUSIC_DATA[id][0], STAGE_MUSIC_DATA[id][1], STAGE_MUSIC_DATA[id][2]);
	if(GetCommonData("isPracticing", false)==false)
	{
		StageNameShow(STAGE_MUSIC_NAMES[id]);
	}
}

let skipMusicDisplay = false;

task SkipMusicDisplay()
{
	skipMusicDisplay = true;
}
task StageNameShow(text)
{
	let yPos = 50;
	
	let objBox = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objBox, IMG_MUSIC_BOX);
	ObjSprite2D_SetSourceRect(objBox,0, 0, 1024, 64);
	ObjSprite2D_SetDestRect(objBox,0, 0, 1024, 64);
	ObjSprite2D_SetDestCenter(objBox);
	Obj_SetRenderPriorityI(objBox, 76+10);
	ObjRender_SetPosition(objBox, GetScreenWidth/2, yPos+8, 0);
	
	let objArrows = [];
	ascent(i in 0..2)
	{
		let objArrow = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objArrow, [IMG_TALK_NAMEARROW_BOTTOM, IMG_TALK_NAMEARROW_TOP][i]);
		ObjSprite2D_SetSourceRect(objArrow,0, 464, 1024, 496);
		ObjSprite2D_SetDestRect(objArrow,0, 464, 1024, 496);
		ObjSprite2D_SetDestCenter(objArrow);
		Obj_SetRenderPriorityI(objArrow, 76+10);
		ObjRender_SetPosition(objArrow, GetScreenWidth/2, yPos+8, 0);
		if(i==0)
		{
			ObjRender_SetColor(objArrow, 0,0,0);
		}
		objArrows ~= [objArrow];
	}
	
	let obj = ObjText_Create();
	ObjText_SetFontType(obj, "Lucida Fax Demibold");
	ObjText_SetFontSize(obj, 15);
	ObjText_SetFontColorTop(obj, 255, 255, 255);
	ObjText_SetFontColorBottom(obj, 255,255,255);	
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	ObjText_SetLinePitch(obj, 7);
	Obj_SetRenderPriorityI(obj, 76+10);
	ObjText_SetText(obj, text);
	ObjText_SetSidePitch(obj, -1);
	ObjRender_SetPosition(obj,round(GetScreenWidth/2-ObjText_GetTotalWidth(obj)/2),round(yPos+2-ObjText_GetTotalHeight(obj)/2),0);
	
	let scrollDis = 25;
	let t = 60;
	ascent(i in 0..t)
	{
		let scl = 1 * sin(90/(t-1)*i);
		yPos = 50 + scrollDis - scrollDis * scl;
		
		ObjRender_SetPosition(objBox,round(GetScreenWidth/2),round(yPos+7),0);
		ObjRender_SetAlpha(objBox, 255 * scl * 0.85);
		
		ObjRender_SetAlpha(obj, 255 * scl);
		ObjRender_SetPosition(obj,round(GetScreenWidth/2-ObjText_GetTotalWidth(obj)/2),round(yPos+2-ObjText_GetTotalHeight(obj)/2),0);
		
		ascent(o in 0..2)
		{
			ObjRender_SetAlpha(objArrows[o], 255 * scl);
			ObjRender_SetPosition(objArrows[o], round(GetScreenWidth/2), round(yPos+8), 0);
		}
		yield;
	}
	ascent(i in 0..180)
	{
		if(!skipMusicDisplay)
		{
			yield;
		}
	}
	if(skipMusicDisplay)
	{
		t = 20;
		skipMusicDisplay = false;
	}
	ascent(i in 0..t)
	{
		let scl = 1 - 1 * sin(90/(t-1)*i);
		yPos = 50 + scrollDis - scrollDis * scl;
		
		ObjRender_SetPosition(objBox,round(GetScreenWidth/2),round(yPos+7),0);
		ObjRender_SetAlpha(objBox, 255 * scl * 0.85);
		
		ObjRender_SetAlpha(obj, 255 * scl);
		ObjRender_SetPosition(obj,round(GetScreenWidth/2-ObjText_GetTotalWidth(obj)/2),round(yPos+2-ObjText_GetTotalHeight(obj)/2),0);
		
		ascent(o in 0..2)
		{
			ObjRender_SetAlpha(objArrows[o], 255 * scl);
			ObjRender_SetPosition(objArrows[o], round(GetScreenWidth/2), round(yPos+8), 0);
		}
		yield;
	}
	Obj_Delete(obj);
	Obj_Delete(objBox);
	ascent(o in 0..2)
	{
		Obj_Delete(objArrows[o]);
	}
}
task MusicChange(musicPath, v, sl1, sl2)
{
	if(!Obj_IsDeleted(music1))
	{
		Obj_Delete(music1);
	}
	music1 = ObjSound_Create;
	ObjSound_Load(music1,musicPath);
	ObjSound_SetSoundDivision(music1, SOUND_BGM);
	ObjSound_SetResumeEnable(music1, true);
	ObjSound_SetLoopEnable(music1, true);	
	if(sl1>-1 && sl2 > -1)
	{
		ObjSound_SetLoopSampleCount(music1, sl1, sl2);	
	}
	ObjSound_Play(music1);
	startMusic=true;
	SetBGMVolume(v);
	forceVolumeChangeSkipFlag = true;
	yield; 
	forceVolumeChangeSkipFlag = false;
}
function SetBGMVolume(v)
{
	vol = v;
}
function GetBGMVolume()
{
	return vol;
}
task MusicFade(t)
{
	MusicVolumeChange(GetBGMVolume, 0, t);
}
let forceVolumeChangeSkipFlag = false;
task MusicVolumeChange(v1, v2, t)
{
	ascent(i in 0..t)
	{
		if(!forceVolumeChangeSkipFlag)
		{
			SetBGMVolume(Interpolate_Linear(v1, v2, 1/(t-1)*i));
			yield;
		}
	}
	forceVolumeChangeSkipFlag = false;
}
task HandleMusicVolume()
{
	if(!Obj_IsDeleted(music1))
	{
		if(GetKeyState(KEY_M)==KEY_PUSH)
		{
			SetCommonData("MuteMusic",!GetCommonData("MuteMusic",false));
		}
		if(GetCommonData("MuteMusic",false))
		{
			ObjSound_SetVolumeRate(music1,0);
		}
		else
		{
			ObjSound_SetVolumeRate(music1,vol*GetCommonData("MusicVolume",1));
		}
	}
}
task HandleMusicEvent(eventType)
{
	if(!Obj_IsDeleted(music1))
	{
		if(eventType==EV_PAUSE_ENTER)
		{
			if(startMusic==true)
			{
				ObjSound_Stop(music1);
			}
		}
		if(eventType==EV_PAUSE_LEAVE)
		{
			if(startMusic==true)
			{
				ObjSound_Play(music1);
			}
		}	
	}
}

task DeleteMusicObj()
{
	if(!Obj_IsDeleted(music1))
	{
		Obj_Delete(music1);
	}
}

task BGTransition(a1, a2, t)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj,9);
	
	ObjPrim_SetTexture(obj,IMG_PIXEL);
	ObjSprite2D_SetSourceRect(obj,0,0,1024,1024);
	ObjSprite2D_SetDestRect(obj,0,0,1024,1024);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	ascent(i in 0..t)
	{
		Obj_SetRenderPriorityI(obj,9);
		ObjRender_SetAlpha(obj, Interpolate_Linear(a1, a2, 1/(t-1)*i));
		ObjRender_SetPosition(obj,GetScreenWidth/2, GetScreenHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}


task BGTransition(a1, a2, t, rp)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj,rp);
	
	ObjPrim_SetTexture(obj,IMG_PIXEL);
	ObjSprite2D_SetSourceRect(obj,0,0,1024,1024);
	ObjSprite2D_SetDestRect(obj,0,0,1024,1024);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	ascent(i in 0..t)
	{
		Obj_SetRenderPriorityI(obj,rp);
		ObjRender_SetAlpha(obj, Interpolate_Linear(a1, a2, 1/(t-1)*i));
		ObjRender_SetPosition(obj,GetScreenWidth/2, GetScreenHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}
task EndStage
{
	loop
	{
		if(GetPlayerState()==STATE_END)
		{
			DeleteMusicObj();
			loop(160){yield;}
			CloseStgScene();
		}
		yield;
	}
}

let stageInProgress = false;

task EndStageHistoryRecord()
{
	stageInProgress = false;
}

task RecordStageHistory(stage, diff){
	
	WriteLog("RECORDING STAGE HISTORY");
	stageInProgress = true;
	
	//DEBUG
	if(!IsCommonDataAreaExists("History")){
		CreateCommonDataArea("History");
	}
	LoadCommonDataAreaA2("History", DATA_HISTORY_PATH);

	let player = GetPlayerID;

	let sp_id = (stage) ~ "|stage|" ~ (diff);
	let SpellDataAttempt = sp_id ~ "|" ~ player ~ "|Attempt";
	let SpellDataGet = sp_id ~ "|" ~ player ~ "|Get";
	
	let SpellDataLives = sp_id ~ "|" ~ player ~ "|Lives";
	let SpellDataBombs = sp_id ~ "|" ~ player ~ "|Bombs";
	/*
	if(GetAreaCommonData("System", "IsPractice", false)){
		SpellDataAttempt = SpellDataAttempt ~ "Prac";
		SpellDataGet = SpellDataGet ~ "Prac";
	}
	*/
	//This is actually the common data retrieval
	let SpellValueAttempt = GetAreaCommonData("History", SpellDataAttempt, 0);
	let SpellValueGet = GetAreaCommonData("History", SpellDataGet, 0);

	SpellValueAttempt++;
	SetAreaCommonData("History", SpellDataAttempt, SpellValueAttempt);
	SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
	
	WriteLog(sp_id);
	WriteLog(SpellDataAttempt);
	WriteLog(SpellValueAttempt);
	WriteLog(SpellDataGet);
	WriteLog(SpellValueGet);
	
	let isFailed = false;
	let recordedPlayerLife = GetPlayerLife;
	let recordedPlayerSpell = GetPlayerSpell;
	
	let totalLivesLost = GetAreaCommonData("History", SpellDataLives, 0);
	let totalBombsUsed = GetAreaCommonData("History", SpellDataBombs, 0);

	SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
	
	while(stageInProgress){
		if(recordedPlayerLife != GetPlayerLife){ //if the player has bombed or died
			isFailed = true;
			recordedPlayerLife = GetPlayerLife;
			totalLivesLost++;
			SetAreaCommonData("History", SpellDataLives, totalLivesLost);
			SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
		}
		if(recordedPlayerSpell != GetPlayerSpell){ //if the player has bombed or died
			isFailed = true;
			recordedPlayerSpell = GetPlayerSpell;
			totalBombsUsed++;
			SetAreaCommonData("History", SpellDataBombs, totalBombsUsed);
			SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
		}
		yield;
	}

	if(!isFailed){
		SpellValueGet++;
		SetAreaCommonData("History", SpellDataGet, SpellValueGet);
		SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
	}
}