
let music1 = ObjSound_Create;
let vol = 100;
let startMusic = false;
task MusicChange(musicPath, v, sl1, sl2)
{
	if(!Obj_IsDeleted(music1))
	{
		Obj_Delete(music1);
	}
	music1 = ObjSound_Create;
	ObjSound_Load(music1,musicPath);
	ObjSound_SetSoundDivision(music1, SOUND_BGM);
	ObjSound_SetResumeEnable(music1, true);
	ObjSound_SetLoopEnable(music1, true);	
	if(sl1>-1 && sl2 > -1)
	{
		ObjSound_SetLoopSampleCount(music1, sl1, sl2);	
	}
	ObjSound_Play(music1);
	startMusic=true;
	vol = v;
}
function SetBGMVolume(v)
{
	vol = v;
}
function GetBGMVolume()
{
	return vol;
}
let forceVolumeChangeSkipFlag = false;
task MusicVolumeChange(v1, v2, t)
{
	ascent(i in 0..t)
	{
		SetBGMVolume(Interpolate_Linear(v1, v2, 1/(t-1)*i));
		if(!forceVolumeChangeSkipFlag)
		{
			yield;
		}
	}
	forceVolumeChangeSkipFlag = false;
}
task HandleMusicVolume()
{
	if(!Obj_IsDeleted(music1))
	{
		ObjSound_SetVolumeRate(music1,vol*GetCommonData("MusicVolume",1));
	}
}
task HandleMusicEvent(eventType)
{
	if(!Obj_IsDeleted(music1))
	{
		if(eventType==EV_PAUSE_ENTER)
		{
			if(startMusic==true)
			{
				ObjSound_Stop(music1);
			}
		}
		if(eventType==EV_PAUSE_LEAVE)
		{
			if(startMusic==true)
			{
				ObjSound_Play(music1);
			}
		}	
	}
}

task DeleteMusicObj()
{
	if(!Obj_IsDeleted(music1))
	{
		Obj_Delete(music1);
	}
}

task BGTransition(a1, a2, t)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj,9);
	
	ObjPrim_SetTexture(obj,IMG_PIXEL);
	ObjSprite2D_SetSourceRect(obj,0,0,1024,1024);
	ObjSprite2D_SetDestRect(obj,0,0,1024,1024);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	ascent(i in 0..t)
	{
		Obj_SetRenderPriorityI(obj,9);
		ObjRender_SetAlpha(obj, Interpolate_Linear(a1, a2, 1/(t-1)*i));
		ObjRender_SetPosition(obj,GetScreenWidth/2, GetScreenHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}

task EndStage
{
	loop
	{
		if(GetPlayerState()==STATE_END)
		{
			DeleteMusicObj();
			loop(160){yield;}
			CloseStgScene();
		}
		yield;
	}
}

let stageInProgress = false;

task EndStageHistoryRecord()
{
	stageInProgress = false;
}

task RecordStageHistory(stage, diff){
	
	WriteLog("RECORDING STAGE HISTORY");
	stageInProgress = true;
	
	//DEBUG
	if(!IsCommonDataAreaExists("History")){
		CreateCommonDataArea("History");
	}
	LoadCommonDataAreaA2("History", DATA_HISTORY_PATH);

	let player = GetPlayerID;

	let sp_id = (stage) ~ "|stage|" ~ (diff);
	let SpellDataAttempt = sp_id ~ "|" ~ player ~ "|Attempt";
	let SpellDataGet = sp_id ~ "|" ~ player ~ "|Get";
	
	let SpellDataLives = sp_id ~ "|" ~ player ~ "|Lives";
	let SpellDataBombs = sp_id ~ "|" ~ player ~ "|Bombs";
	/*
	if(GetAreaCommonData("System", "IsPractice", false)){
		SpellDataAttempt = SpellDataAttempt ~ "Prac";
		SpellDataGet = SpellDataGet ~ "Prac";
	}
	*/
	//This is actually the common data retrieval
	let SpellValueAttempt = GetAreaCommonData("History", SpellDataAttempt, 0);
	let SpellValueGet = GetAreaCommonData("History", SpellDataGet, 0);

	SpellValueAttempt++;
	SetAreaCommonData("History", SpellDataAttempt, SpellValueAttempt);
	SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
	
	WriteLog(sp_id);
	WriteLog(SpellDataAttempt);
	WriteLog(SpellValueAttempt);
	WriteLog(SpellDataGet);
	WriteLog(SpellValueGet);
	
	let isFailed = false;
	let recordedPlayerLife = GetPlayerLife;
	let recordedPlayerSpell = GetPlayerSpell;
	
	let totalLivesLost = GetAreaCommonData("History", SpellDataLives, 0);
	let totalBombsUsed = GetAreaCommonData("History", SpellDataBombs, 0);

	SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
	
	while(stageInProgress){
		if(recordedPlayerLife != GetPlayerLife){ //if the player has bombed or died
			isFailed = true;
			recordedPlayerLife = GetPlayerLife;
			totalLivesLost++;
			SetAreaCommonData("History", SpellDataLives, totalLivesLost);
			SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
		}
		if(recordedPlayerSpell != GetPlayerSpell){ //if the player has bombed or died
			isFailed = true;
			recordedPlayerSpell = GetPlayerSpell;
			totalBombsUsed++;
			SetAreaCommonData("History", SpellDataBombs, totalBombsUsed);
			SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
		}
		yield;
	}

	if(!isFailed){
		SpellValueGet++;
		SetAreaCommonData("History", SpellDataGet, SpellValueGet);
		SaveCommonDataAreaA2("History", DATA_HISTORY_PATH);
	}
}