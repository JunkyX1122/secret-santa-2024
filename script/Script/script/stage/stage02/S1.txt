#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["S1"]
#Text["S1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 65;
let finalSpellBool = false;

let objEnemy2 = CreateFamiliar;
//let objEnemy3 = CreateFamiliar;

@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(65);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	
	ObjMove_SetPosition(objEnemy, GetCommonData("BossX", 0), GetCommonData("BossY", 0));
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderYuuma(objEnemy);

	ObjMove_SetPosition(objEnemy2, GetCommonData("objEnemy2_Position", [0,0])[0], GetCommonData("objEnemy2_Position", [0,0])[1]);
	//ObjMove_SetPosition(objEnemy3, GetCommonData("objEnemy3_Position", [0,0])[0], GetCommonData("objEnemy3_Position", [0,0])[1]);
	renderYuuma(objEnemy2);
	//renderYuuma(objEnemy3);
	HitCirc(objEnemy2);
	//HitCirc(objEnemy3);
	ObjMove_SetDestAtFrameWeight(objEnemy2, GetStgFrameWidth/2-400, 150, 60);
	//ObjMove_SetDestAtFrameWeight(objEnemy3, GetStgFrameWidth/2+100, 150, 40);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Valley of Greed &quot;Rising Grudge&quot;","", LENEN, 255,0,0);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	
}


@MainLoop
{
	if(!Obj_IsDeleted(objEnemy2))
	{
		SetCommonData("objEnemy2_Position", [ObjMove_GetX(objEnemy2),ObjMove_GetY(objEnemy2)]);
	}
	//SetCommonData("objEnemy3_Position", [ObjMove_GetX(objEnemy3),ObjMove_GetY(objEnemy3)]);
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}
let objStaff;
let staffXY = [0,0];
task Fire
{
	let bit = 1-2*round(rand(0,1));
	staffXY = [ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy)];
	StaffHandle(bit);
}
let objFire = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_SCYLLASTAFF, [0,0,512,32], BLEND_ALPHA, 0.48);
task StaffHandle(bit)
{
	objStaff = CreateFamiliar;
	ObjPrim_SetTexture(objStaff, IMG_SCYLLASTAFF);
	Obj_SetRenderPriorityI(objStaff, 49);
	ObjSprite2D_SetSourceRect(objStaff,0, 0, 512, 32);
	ObjSprite2D_SetDestRect(objStaff,0, 0, 512, 32);
	ObjSprite2D_SetDestCenter(objStaff);
	ObjRender_SetScale(objStaff,0.5);
	ObjMove_SetPosition(objStaff, staffXY[0], staffXY[1]);
	
	let ang = 0;
	let spnAm = 3.213*bit;
	let cc = 0;
	while(!Obj_IsDeleted(objEnemy))
	{
		ang = ObjRender_GetAngleZ(objStaff);
		ObjRender_SetAngleZ(objStaff,ang + spnAm);
		if(cc%30==0)
		{
			Fader(staffXY[0], staffXY[1], ang, bit);
		}
		cc++;
		yield;
	}
	Obj_Delete(objStaff);
	
	task Fader(x, y, ang, bit)
	{
		let startAlpha = 128;
		ascent(i in 0..60)
		{
			RenderFade(ang+180/60*i*bit, startAlpha-startAlpha/60*i);
		}
		
		task RenderFade(ang, alpha)
		{
			let t = 32;
			ascent(o in 0..t)
			{
				ObjParticleList_SetAlpha(objFire, alpha - alpha/t*o);
				ObjParticleList_SetScale(objFire, 0.5, 0.5,0);
				ObjParticleList_SetPosition(objFire, x, y,0);
				ObjParticleList_SetAngleZ(objFire,ang);
				ObjParticleList_AddInstance(objFire);
				yield;
			}
	
		}
	}
}
task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

task HitCirc(objTarget)
{
	while(!Obj_IsDeleted(objEnemy))
	{
		ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 32);
		ObjEnemy_SetIntersectionCircleToPlayer(objTarget, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 24);
		yield;
	}
	/*
	ScreenShake(60,20); 
	SE_PlayLen(BossEnd,80);
	loop(20)
	{
		ascent(i in 0..15)
		{
			ExplodeObject01(round(rand(0,4)),ObjMove_GetX(objTarget),ObjMove_GetY(objTarget),rand(1,5)*i,rand(0,360));
		}
	}
	*/
	Obj_Delete(objTarget);
}
