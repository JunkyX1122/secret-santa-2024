#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Nocturne &quot;Night Slash&quot;"]
#Text["S3"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 100;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult((225*0.7)/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(100);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 90, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderYuuma(objEnemy);
	
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Nocturne &quot;Night Slash&quot;","", LENEN, 0,145,255);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	
}
let isBossTangible = true;

@MainLoop
{
	if(isBossTangible)
	{
		ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
		ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	}
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		//ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}
task Fire
{
	GoToMiddle();
	HandleSlash();
	TeleportOut(60);
	wait(60);
	ObjMove_SetPosition(objEnemy,GetStgFrameWidth/2,GetStgFrameHeight/2);
}
task GoToMiddle()
{
	SE_PlayLen(LaserDelLong,60);
	let ang1 = -90;
	let ang2 = -90;
	let x = GetStgFrameWidth/2;
	let y = GetStgFrameHeight/2;
	let spnAm = 9.9213;
	let tot = 7;
	let dis = 600;
	
	while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		SE_PlayLen(Shot1,40);
		ascent(i in 0..tot)
		{
			let objS1 = ShotA2(x+dis*cos(ang1),y+dis*sin(ang1),0.5,ang1,0.08,10,399,399,40,2,BLEND_SUBTRACT,true);
			ObjRender_SetBlendType(objS1,BLEND_SUBTRACT);
			
			let objS2 = ShotA2(x+dis*cos(ang2),y+dis*sin(ang2),0.5,ang2,0.08,10,399,399,40,2,BLEND_SUBTRACT,true);
			ObjRender_SetBlendType(objS2,BLEND_SUBTRACT);
			
			ObjShot_SetSpellResist(objS1,true);
			ObjShot_SetSpellResist(objS2,true);
			ang1+=360/tot;
			ang2+=360/tot;
		}
		dis = dis * 0.97 + 175 * 0.03;
		ang1+=spnAm;
		ang2-=spnAm;
		wait(3);
	}
}
let allStarsMove = false;
let teleInTime = 80;
task HandleSlash()
{
	wait(60*4);
	ObjEnemy_SetDamageRate(objEnemy, (0.09/3)/1.5, (0.09/3)/3);
	let bit = 1-2*round(rand(0,1));
	
	while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		bit*=-1;
		let angleT = 90;
		allStarsMove = false;
		wait(60);
		loop(3)
		{
			if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
			{
				Slash(GetPlayerX,GetPlayerY,angleT+rand(10,-10),teleInTime);
	
				angleT+=90+10.10123*bit;

				wait(80);
			}
		}
		wait(40);
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
		{
			angleT = 90-100*bit;
			let x = GetStgFrameWidth/2;
			let y = GetStgFrameHeight/2;
			loop(2)
			{
				Slash(x,y,angleT,teleInTime);
				angleT+=70*bit;
			}
			TeleportIn(x,y,teleInTime);
			angleT+=90+10.10123*bit;
			wait(teleInTime);
			wait(10);
		}
		let ccc = 0;
		ascent(p in 0..2)
		{
			ascent(i in 0..60*(3+p))
			{
				if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
				{
					if(ccc%40==0)
					{
						KunaiWall(GetAngleToPlayer(objEnemy));
					}
					if(ccc%10==0)
					{
						let dis = 20;
						let spd = 0.7;
						SE_PlayLen(shot1,60);
						loop(4)
						{
							let objW = ShotA1(ObjMove_GetX(objEnemy)+dis*cos(angleT),ObjMove_GetY(objEnemy)+dis*sin(angleT),spd,angleT,122,122,10,2,BLEND_ALPHA,true);
							Obj_SetRenderPriority(objW,0.49);
							ObjShot_SetDeleteFrameA6(objW,60*4,0.5);
							angleT+=360/4;
						}
						angleT-=10.32432*bit;
					}
					ccc++;
					yield;
				}
			}
			allStarsMove = true;
		}
		
		TeleportOut(30);
		wait(30);
	}
}

task KunaiWall(ang)
{
	let dis = 10;
	ascent(i in 0..7)
	{
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
		{
			SE_PlayLen(shot1,60);
			ascent(o in 0..2)
			{
				if(i>0||o==0)
				{
					let angleT = ang+14/6*i*(1-2*o);
					let spd = 0.8-0.4/6*i;
					let objW = ShotA1(ObjMove_GetX(objEnemy)+dis*cos(angleT),ObjMove_GetY(objEnemy)+dis*sin(angleT),spd,angleT,122,122,10,2,BLEND_ALPHA,true);
					Obj_SetRenderPriority(objW,0.49);
				}
			}
			wait(3);
		}
	}
}


task TeleportOut(t)
{
	isBossTangible = false;
	SE_PlayLen(boon1,60);
	let bit = 1-2*round(rand(0,1));
	let bossX = ObjMove_GetX(objEnemy);
	let bossY = ObjMove_GetY(objEnemy);
	let bitArray = [bit,0,-bit];
	ascent(i in 0..t)
	{
		let d = (60/t*i)*bitArray[i%3];
		ObjMove_SetX(objEnemy,bossX+d);
		yield;
	}
	
	ObjRender_SetAlpha(objEnemy,0);
	ObjMove_SetPosition(objEnemy,bossX,bossY);
}
task TeleportIn(x,y,t)
{
	SE_PlayLen(boon1,60);
	let bit = 1-2*round(rand(0,1));
	let bitArray = [bit,0,-bit];
	
	ObjRender_SetAlpha(objEnemy,255);
	descent(i in 0..t)
	{
		let d = (60/t*i)*bitArray[i%3];
		ObjMove_SetX(objEnemy,x+d);
		ObjMove_SetY(objEnemy,y);
		yield;
	}
	isBossTangible = true;
	ObjMove_SetPosition(objEnemy,x,y);
}

task Slash(x,y,angleT,waiter)
{
	let X = x;
	let Y = y;
	
	let speed = 90;
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		SE_PlayLen(charge0,60);	
		S_Laser2((X-400*cos(angleT)),(Y-400*sin(angleT)),angleT,speed*cos(angleT),speed*sin(angleT),waiter,1,50,399,0.5,50,true,7,BLEND_ADD_ARGB);
		ascent(i in 1..7)
		{
			S_Laser2((X-400*cos(angleT))+(1*i*cos(angleT+90)),(Y-400*sin(angleT))+(1*i*sin(angleT+90)),angleT-i/2,speed*cos(angleT),speed*sin(angleT),waiter,1,20,399,0.5,50,false,7,BLEND_SUBTRACT);
			S_Laser2((X-400*cos(angleT))-(1*i*cos(angleT+90)),(Y-400*sin(angleT))-(1*i*sin(angleT+90)),angleT+i/2,speed*cos(angleT),speed*sin(angleT),waiter,1,20,399,0.5,50,false,7,BLEND_SUBTRACT);
			
		}
	}
	wait(waiter);
	let tot  = 30;
	let spd = 3;
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		ascent(i in 0..tot)
		{
			let dis = -400 + 800/(tot-1)*i;
			ascent(o in 0..2)
			{
				let ang = angleT + 90 + 180*o;
				let objW = ShotA2(X+dis*cos(angleT),Y+dis*sin(angleT),spd,ang,-spd/30,0,232,232,10,2,BLEND_SUBTRACT,false);
				ObjRender_SetBlendType(objW,BLEND_SUBTRACT);
				Obj_SetRenderPriority(objW,0.48);
				ObjRender_SetScale(objW,1.5);
				AllMove(objW);
				
				let objW2 = ShotA2(X+dis*cos(angleT),Y+dis*sin(angleT),spd,ang,-spd/30,0,232,232,10,2,BLEND_ADD_ARGB,false);
				ObjRender_SetBlendType(objW2,BLEND_ADD_ARGB);
				Obj_SetRenderPriority(objW2,0.49);
				AllMove(objW2);
			}
		}
	}
}
task AllMove(obj)
{
	while(!allStarsMove&&!Obj_IsDeleted(obj)){yield;}
	ObjMove_SetMaxSpeed(obj,-2);
	ObjMove_SetAcceleration(obj,-2/(60*4));
}
task Fader(objFade)
{
	let Alpha = 32;
	loop(30)
	{
		ObjRender_SetAlpha(objFade,Alpha);
		Alpha-=32/30;	
		yield;
	}
	Obj_Delete(objFade);
}

task S_Laser2(X,Y,angle,xmove,ymove,growdeley,deley,stay,ID,scaleX,scaleY,bouncebool,sizehit,BT)
{
	let obj = CreateShotA1(X,Y,0,angle,ID,0);
	ObjRender_SetBlendType(obj,BT);
	ObjShot_SetIntersectionEnable(obj,false);
	ObjShot_SetSpellResist(obj,true);
	ObjShot_SetAutoDelete(obj,false);
	//318
	let scaleYIn = 0;
	let xmove2 = xmove;
	let ymove2 = ymove;
	let totaldeley = growdeley+deley;

	ascent(i in 0..growdeley)
	{
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleXYZ(obj,i/growdeley*(scaleX/5),i/growdeley*scaleY,1);
			scaleYIn+=scaleY/growdeley;
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
	loop(deley)
	{
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
		{
			//ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			//xmove-=xmove2/totaldeley;
			//ymove-=ymove2/totaldeley;
			yield;
		}
	}
		let scaleXIn = scaleX/5;
		scaleX/=5;
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		SE_PlayLen(LaserFireShort,70);
		
	}
	loop(4)
	{
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
		{
			loop(1)
			{
				let objFade = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,angle,ID,0);
				ObjRender_SetBlendType(objFade,BLEND_ADD_ARGB);
				ObjShot_SetIntersectionEnable(objFade,false);
				ObjRender_SetScaleXYZ(objFade,scaleX,scaleY,1);
				Fader(objFade);
			}
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX+=(scaleXIn*4)/4;
			
			yield;
		}
	}
	loop(stay)
	{
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
		{
			loop(1)
			{
				let objFade = CreateShotA1(ObjMove_GetX(obj),ObjMove_GetY(obj),0,angle,ID,0);
				ObjRender_SetBlendType(objFade,BLEND_ADD_ARGB);
				ObjShot_SetIntersectionEnable(objFade,false);
				ObjRender_SetScaleXYZ(objFade,scaleX,scaleY,1);
				Fader(objFade);
			}
			if(bouncebool==true)
			{

			}
			
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			ObjRender_SetScaleX(obj,scaleX);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			yield;
		}
	}
	loop(20)
	{
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
		{
			ObjMove_SetPosition(obj,ObjMove_GetX(obj)+xmove,ObjMove_GetY(obj)+ymove);
			HitboxSingle(obj,sizehit*scaleY,sizehit*scaleX);
			ObjRender_SetScaleX(obj,scaleX);
			scaleX-=(scaleXIn*5)/20;
			yield;
		}
	}
	Obj_Delete(obj);
}
task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	TeleportOut(60);
	SE_PlayLen(BossDead,50);
	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetAutoDeleteObject(true);
		SetCommonData("SpellCardBG1",false);
		yield;
	}
	TeleportIn(GetStgFrameWidth/2,100,30);
	wait(31);
	
	
	Obj_Delete(objEnemy);
	
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

