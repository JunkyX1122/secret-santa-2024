#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns3"]
#Text["Ns3"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2;
let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 90*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(90);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 100, 40);
	renderBossUnanimated(objEnemy, IMG_BOSS_HIROYUKI, 30);
	RecordAttackHistory("05", "Ns3", DIFFICULTY_NAMES[DIFFICULTY]);

	end;
	SetCommonData("SpellCardBG1",false);
	
}
@MainLoop
{
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	let ang = 90;
	while(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(charge0,60);
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+200*bit, 100, 50);
	
		AquaJet(GetStgFrameWidth/2, GetStgFrameHeight-175,GetStgFrameWidth/2+200*bit, 100,50,40,bit);
		wait(70+50+30);
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(charge0,60);
			AquaJet(GetStgFrameWidth/2-200*bit, 100, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),50,40,bit);
			wait(70+50+30);
		}
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(charge0,60);
			AquaJet(GetStgFrameWidth/2, 100, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),120,80,bit);
		}
		wait(70+120);
		keepFiring = true;
		if(!Obj_IsDeleted(objEnemy)) 
		{
			PassiveFire(bit);
		}
		wait(225);
		keepFiring = false;
		bit*=-1;
		ObjEnemy_SetDamageRate(objEnemy, (0.09)/1.5, (0.09)/3);
	}
}
let keepFiring = true;
task PassiveFire(bit)
{
	let positions = [];
	let dis = 100;
	let centreScale = 1.2;
	let ang = 0;
	let size = 1;
	let startAng = 90;
	ascent(i in 0..4)
	{
		ascent(o in 0..2)
		{
			let x1 = dis * centreScale * cos(ang-45*bit+90*o*bit) * size;
			let y1 = dis * centreScale * sin(ang-45*bit+90*o*bit) * size;
			
			let x2 = dis * 2 * cos(ang) * size;
			let y2 = dis * 2 * sin(ang) * size;
			
			let angS = Get_PointAngle(x2,y2,x1,y1);
			let pAm = 4;
			ascent(p in 0..pAm)
			{
				if(p<pAm-1||o==1)
				{
					let x3 = Interpolate_Linear(x1,x2,1/(pAm-1)*p);
					let y3 = Interpolate_Linear(y1,y2,1/(pAm-1)*p);
					if(p==pAm-1)
					{
						angS = ang;
					}
					positions = positions ~ [[x3,y3]];
				}
				
			}
		}
		ang+=90*bit;
	}
	while(!Obj_IsDeleted(objEnemy)&&keepFiring)
	{
		ascent(i in 0..10)
		{
			if(!Obj_IsDeleted(objEnemy)&&keepFiring)
			{
				SE_PlayLen(shot1,60);
				ascent(p in 0..length(positions))
				{
					let spdScl = Get_Distance(0,0,positions[p][0],positions[p][1])/100;
					let ang = Get_PointAngle(positions[p][0],positions[p][1],0,0) + startAng;
					let spd = 2 * spdScl;
					
					
					let x = ObjMove_GetX(objEnemy) + positions[p][0] * 0.3;
					let y = ObjMove_GetY(objEnemy) + positions[p][1] * 0.3;
					
					let xy = Rotate2D(x,y,startAng,ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy));
					
					let objS = ShotA1(xy[0],xy[1],spd,ang,277,420,10,2,BLEND_ADD_ARGB,false);
					
				}
				startAng-=0.42321*bit;
				wait(3);
			}
		}
		startAng+=9.12321*bit;
		wait(5);
	}
}
task AquaJet(x,y,xI,yI,d,t,bit)
{
	let sprd = 70;
	let ang = Get_PointAngle(x,y,xI,yI)+180;
	WarningLaser(xI,yI,ang+180,d);
	ascent(o in 0..4)
	{
		let iii = 1/3*o;
		ascent(i in 0..3)
		{
			let ang2 = ang-sprd+(sprd*2)/2*i;
			WarningLaser(Interpolate_Decelerate(xI,x,iii),Interpolate_Decelerate(yI,y,iii),ang2,d);
		}
	}
	wait(d);
	let shur = 6;
	if(!Obj_IsDeleted(objEnemy)) 
	{
		loop(shur)
		{
			CreateShuriken(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),1.5,ang,3,0.3,-6*bit,bit);
			ang+=360/shur;
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x,y, t);
		ascent(i in 0..3)
		{
			let ang2 = ang-sprd+(sprd*2)/2*i;
			CreateJetStream(ang2,t);
		}
	}
}
let shtIDA = [427,275,275,277,277,80,295];
task CreateJetStream(ang,t)
{
	SE_PlayLen(spawnfm3,60);
	SE_PlayLen(slash,60);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(Shot1,60);
			ascent(o in 0..5)
			{
				let randIntens = rand(0,1);
				let ang2 = ang -40 + 80*randIntens;
				let dis = 60;
				let x = ObjMove_GetX(objEnemy)+dis*cos(ang2);
				let y = ObjMove_GetY(objEnemy)+dis*sin(ang2);
				let spd = rand(4,5)*(3-2/(t-1)*i);
				
				let whiteScl = sin(180*randIntens);
				
				let xs = spd*cos(ang-4+8*randIntens);
				let ys = spd*sin(ang-4+8*randIntens);
				let shtID = shtIDA[round(rand(0,length(shtIDA)*2))%length(shtIDA)];
				
				
				
				let objS = ShotB2(x,y,xs,ys,0,0.1,0,100,shtID,420,5,3,BLEND_ADD_ARGB,false);
				ObjRender_SetBlendType(objS,BLEND_ADD_ARGB);
				
				let witt = 100+155*whiteScl;
				ObjRender_SetColor(objS,witt,witt,255);
			}
			yield;
		}
	}
}

task WarningLaser(x,y,ang,t)
{
	
	let slashWidth = 35;
	let dis = 800;
	ascent(i in 0..t)
	{
		let sideDis = 50*sin(90/(t-1)*i);
		ascent(o in 0..2)
		{
			if(i>0||o==0&&!Obj_IsDeleted(objEnemy))
			{
				let laser = CreateStraightLaserA1(x+sideDis*cos(ang+90-180*o),y+sideDis*sin(ang+90-180*o),ang,810*2,slashWidth,0,404,9000);
				ObjRender_SetBlendType(laser,BLEND_ADD_ARGB);
				ObjShot_SetAutoDelete(laser,false);
				ObjStLaser_SetSource(laser,false);
				LaserGrowFade(laser,dis,128-128/t*i);
			}
		}
		yield;
	}
}

task CreateShuriken(x,y,speed,ang,pAm,size,spinAmount,bit)
{
	let maxTraverse = 0.25;
	let del = 10;

	let objSourceShot = ShotA1(x,y,0,ang,295,420,del,4,BLEND_ADD_ARGB,false);
	ObjShot_SetSpellResist(objSourceShot,true);
	ObjRender_SetBlendType(objSourceShot,BLEND_ADD_ARGB);
	let shurikenPoints = [];
	let tips = [];
	let dis = 50;
	let centreScale = 0.75;

	ascent(i in 0..4)
	{
		ascent(o in 0..2)
		{
			let x1 = x + dis * centreScale * cos(ang-45*bit+90*o*bit) * size;
			let y1 = y + dis * centreScale * sin(ang-45*bit+90*o*bit) * size;
			
			let x2 = x + dis * 2 * cos(ang) * size;
			let y2 = y + dis * 2 * sin(ang) * size;
			
			let angS = Get_PointAngle(x2,y2,x1,y1);
			
			ascent(p in 0..pAm)
			{
				if(p<pAm-1||o==1)
				{
					let x3 = Interpolate_Linear(x1,x2,1/(pAm-1)*p);
					let y3 = Interpolate_Linear(y1,y2,1/(pAm-1)*p);
					if(p==pAm-1)
					{
						angS = ang;
					}
					let objS = ShotA1(x3,y3,0,angS,427,420,del,4,BLEND_ADD_ARGB,false);
					ObjShot_SetSpellResist(objS,true);
					ObjShot_SetAutoDelete(objS,false);
					ObjRender_SetBlendType(objS,BLEND_ADD_ARGB);
					shurikenPoints = shurikenPoints ~ [objS];
					if(p==pAm-1)
					{
						tips = tips ~ [objS];
					}
					
				}
				
			}
		}
		ang+=90*bit;
	}
	wait(del);
	let xSpd = speed*cos(ang);
	let ySpd = speed*sin(ang);
	let cc = 0;
	let shid = 0;
	let shid2 = 0;
	while(!Obj_IsDeleted(objSourceShot)&&CheckInWalls(objSourceShot))
	{
		ascent(i in 0..length(shurikenPoints))
		{
			let obj = shurikenPoints[i];
			if(!Obj_IsDeleted(obj))
			{
				let rotatedPos = Rotate2D(ObjMove_GetX(obj),ObjMove_GetY(obj),spinAmount,ObjMove_GetX(objSourceShot),ObjMove_GetY(objSourceShot));
				ObjMove_SetPosition(obj,rotatedPos[0]+xSpd,rotatedPos[1]+ySpd);
				ObjMove_SetAngle(obj,ObjMove_GetAngle(obj)+spinAmount);
			}
		}
		ObjMove_SetPosition(objSourceShot,ObjMove_GetX(objSourceShot)+xSpd,ObjMove_GetY(objSourceShot)+ySpd);
		
		loop(1)
		{
			if(cc%3==0)
			{
				let id= 64; 
	
				let spdd = 1;
				ascent(o in 0..2)
				{
					let objW = ShotA2(ObjMove_GetX(objSourceShot),ObjMove_GetY(objSourceShot),0,ObjMove_GetAngle(objSourceShot)-180+(20-40*o),spdd/120,spdd,id,id,5,2,BLEND_ADD_ARGB,false);
					ObjRender_SetBlendType(objW,BLEND_ADD_ARGB);
					if(cc%(3*11)>0)
					{
						ObjShot_SetDeleteFrameA6(objW,40,1);
					}
					else
					{
						SE_PlayLen(chime1,60);
					}
				}
				shid2++;
			}
		}
		loop(1)
		{
			let dir=-90;

			dir = atan2( GetPlayerY - ObjMove_GetY(objSourceShot), GetPlayerX - ObjMove_GetX(objSourceShot));
							
			// difference between 'dir' and 'angle'
			if(!Obj_IsDeleted(objSourceShot))
			{
				let diff = dir - ang;
				while(diff >= 180) { diff -= 360; }    // adjust the range
				while(diff < -180) { diff += 360; }

				let diffAbs = (|diff|);
				if(diffAbs < maxTraverse) {
					// if the difference is small,
					// the bullet turns to the player's character
					ang = dir;
				} else {
					// otherwise, the bullet turns 'maxTraverse' degrees
					ang += maxTraverse * diff / diffAbs;
				}
			}
			ObjMove_SetAngle(objSourceShot,ang);
			xSpd = speed*cos(ang);
			ySpd = speed*sin(ang);
		}
		cc++;
		
		yield;
	}
	ObjShot_SetDeleteFrameA5(objSourceShot,0,2);
	
	ascent(i in 0..length(shurikenPoints))
	{
		if(!Obj_IsDeleted(shurikenPoints[i]))
		{
			ObjShot_SetDeleteFrameA6(shurikenPoints[i],0,1);
		}
	}
	
}
function CheckInWalls(obj)
{
	let x = ObjMove_GetX(obj);
	let y = ObjMove_GetY(obj);
	if(x<0)
	{
		ObjMove_SetX(obj,0);
		return false;
	}
	if(y<0)
	{
		ObjMove_SetY(obj,0);
		return false;
	}
	if(x>GetStgFrameWidth)
	{
		ObjMove_SetX(obj,GetStgFrameWidth);
		return false;
	}
	if(y>GetStgFrameHeight)
	{
		ObjMove_SetY(obj,GetStgFrameHeight);
		return false;
	}
	return true;
}
task LaserGrowFade(obj,dis,alpha)
{
	ObjLaser_SetItemDistance(obj, 1000);
	let t = 60;
	ascent(i in 0..t)
	{
		ObjLaser_SetLength(obj,dis/t*i);
		ObjRender_SetAlpha(obj,alpha-alpha/t*i);
		yield;
	}
	Obj_Delete(obj);
}


task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 
task move
{
	wait(150);
	let cc = 1;
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
        ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(100,10)*cc, rand(80,120), 140);
		cc*=-1;
		wait(280);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

