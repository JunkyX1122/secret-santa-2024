#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Celebration &quot;Festive Flash Bomb&quot;"]
#Text["S4"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"


let objEnemy;
let count = 0;
let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 80;
let finalSpellBool = false;


@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(225/3);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(80);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}


@Initialize
{
	InitialiseIndiv();
	timer;
	SetAutoDeleteObject(true);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 100, 40);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_HIROYUKI, 30);
	magiccircle(objEnemy,1);
	RecordAttackHistory("05", "S4", DIFFICULTY_NAMES[DIFFICULTY]);
	
	end;

	ObjEnemyBossScene_StartSpell(GetEnemyBossSceneObjectID);
	ObjCutin_LaunchS3("", "Normal");
	ObjCutin_SetSpellcardS4("Celebration &quot;Festive Flash Bomb&quot;","", LENEN, 0,145,255);
	
	ScreenShake(60,4);

	SE_PlayLen(compositespellcard,75);
	SE_PlayLen(BossSpell,75);
	SetCommonData("BossName", "Hiroyuki");
}


@MainLoop
{
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count < 95)	
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		SetCommonData("SpellCardBG1",true);
	}
    if(count == 95)
    {
		ObjEnemy_SetDamageRate(objEnemy, (0.05/3)/1.5, (0.05/3)/3);
		Fire;
		
        //count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
    count++;
    yield;
}


@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	
	PassiveFire(bit);
	Bomber(bit);
}
task PassiveFire(bit)
{
	let cc = 0;
	let angGo = 0;
	let angGo2 = 0;
	while(!Obj_IsDeleted(objEnemy))
	{
		if(cc%4==0 && cc%40<[12,16][DIFFICULTY])
		{
			if(cc%40==0)
			{
				angGo-=0.123;
				angGo2+=3.123;
			}
			SE_PlayLen(shot1,60);
			let dis = 50;
			let tot = [5,6][DIFFICULTY];
			ascent(i in 0..tot)
			{
				let ang = cc*0.423213*bit+360/tot*i*bit+angGo*bit;
				//let objSourceShot = ShotA1(ObjMove_GetX(objEnemy)+dis*cos(ang),ObjMove_GetY(objEnemy)+dis*sin(ang),1,ang,128,420,10,2,BLEND_ALPHA,false);
				CreateShurikenSmall(ObjMove_GetX(objEnemy)+dis*cos(ang),ObjMove_GetY(objEnemy)+dis*sin(ang),16,ang,5,bit);
			}
			ascent(i in 0..tot)
			{
				let ang = -cc*3.323213*bit-360/tot*i*bit-angGo2*bit;
				let objSourceShot = ShotA1(ObjMove_GetX(objEnemy)+dis*cos(ang),ObjMove_GetY(objEnemy)+dis*sin(ang),1.3,ang,162,421,10,2,BLEND_ALPHA,false);
				Obj_SetRenderPriority(objSourceShot,0.49);
			}
		}
		cc++;
		yield;
	}
}
task Bomber(bit)
{
	while(!Obj_IsDeleted(objEnemy))
	{
		let dis = 200;
		let ang = 0;
		ascent(i in 0..2)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				ang = 90-90*bit-180*i*bit;
				CreateFlashBomb(ObjMove_GetX(objEnemy)+dis*cos(ang),ObjMove_GetY(objEnemy)+dis*sin(ang),50,15,13,[2,6][DIFFICULTY],3,[0.3,0.4][DIFFICULTY]);
				wait(10);
			}

		}
		wait(60*4);
		ascent(o in 0..3)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				SE_PlayLen(charge0,60);
				dis = 100 + (40+60*o)*o;
				let ang1 = 90+(180/6)*bit+(360/6)/2*o*bit;
				ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(30,-30), 100+rand(30,-30), 70);
				ascent(i in 0..6)
				{
					if(!Obj_IsDeleted(objEnemy))
					{
						ang = ang1+360/6*i*bit;
						CreateFlashBomb(ObjMove_GetX(objEnemy)+dis*cos(ang),ObjMove_GetY(objEnemy)+dis*sin(ang),90,5+o*5,3+o*5,[1,3][DIFFICULTY],floor(1+o/3),0.4-o*(0.1));
						wait(7);
					}
				}
				wait(70);
			}
		}
		wait(60*4);
		ObjEnemy_SetDamageRate(objEnemy, (0.07/3)/1.5, (0.07/3)/3);
	}
}
task CreateFlashBomb(x,y,d,spd1,spd2,startAm,amPlus,multiplier)
{
	SE_PlayLen(spawnfm1,60);
	let objSourceShot = ShotA1(ObjMove_GetX(objEnemy),ObjMove_GetY(objEnemy),0,90,295,420,10,2,BLEND_ALPHA,false);
	ObjShot_SetSpellResist(objSourceShot,true);
	ObjShot_SetAutoDelete(objSourceShot,false);
	wait(10);
	ObjMove_SetDestAtFrameWeight(objSourceShot, x, y, d);
	wait(d);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(explode,60);
	}
	let ang = ObjMove_GetAngle(objSourceShot);
	let hueue = rand(0,360);
	//let multiplier = 0.6;
	if(!Obj_IsDeleted(objSourceShot)&&!Obj_IsDeleted(objEnemy))
	{
		ascent(i in 0..7)
		{
			let spd = spd1-spd2/6*i;
			let am = startAm+amPlus*i;
			ascent(o in 0..am)
			{
				ascent(p in 0..3)
				{
					let obj = ShotA2(ObjMove_GetX(objSourceShot),ObjMove_GetY(objSourceShot),spd,ang+360/(am)*o+180,-spd/20,0.1,432,432,0,2,BLEND_ADD_ARGB,false);
					ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
					
					ObjMove_AddPatternA2(obj,120,NO_CHANGE,NO_CHANGE,(spd*multiplier)/130,spd*multiplier,0);
					if(p<2)
					{
						ObjRender_SetColorHSV(obj,(hueue+360/6*i)%360,255,255);
						ObjRender_SetScale(obj,1.25+0.25*p);
						ObjRender_SetAlpha(obj,128);
					}
				}
			}	
		}
		
	ObjShot_SetDeleteFrameA5(objSourceShot,0,2);
	}
	
}
task CreateShurikenSmall(x,y,speed,ang,spinAmount,bit)
{
	let del = 8;
	let objSourceShot = ShotA1(x,y,0,ang,80,420,del,2,BLEND_ADD_ARGB,false);
	Obj_SetRenderPriority(objSourceShot,0.49);
	ObjRender_SetBlendType(objSourceShot,BLEND_ALPHA);
	let shurikenPoints = [];
	let dis = 13;
	let centreScale = 0.75;

	ascent(i in 0..4)
	{
		ascent(o in 0..1)
		{
			let x2 = x + dis * cos(ang);
			let y2 = y + dis * sin(ang);
			
			
			let angS = ang;
			
			let objS = ShotA1(x2,y2,0,angS,128,420,del,2,BLEND_ADD_ARGB,false);
			ObjShot_SetAutoDelete(objS,false);
			Obj_SetRenderPriority(objS,0.49);
			shurikenPoints = shurikenPoints ~ [objS];

			
		}
		ang+=90*bit;
	}
	wait(del);
	
	let xSpd = cos(ang);
	let ySpd = sin(ang);
	
	while(!Obj_IsDeleted(objSourceShot))
	{
		
		ascent(i in 0..length(shurikenPoints))
		{
			let obj = shurikenPoints[i];
			if(!Obj_IsDeleted(obj))
			{
				let rotatedPos = Rotate2D(ObjMove_GetX(obj),ObjMove_GetY(obj),spinAmount,ObjMove_GetX(objSourceShot),ObjMove_GetY(objSourceShot));
				ObjMove_SetPosition(obj,rotatedPos[0]+xSpd*speed,rotatedPos[1]+ySpd*speed);
				ObjMove_SetAngleR(obj,ObjMove_GetAngle(obj)+spinAmount);
			}
		}
		ObjMove_SetPosition(objSourceShot,ObjMove_GetX(objSourceShot)+xSpd*speed,ObjMove_GetY(objSourceShot)+ySpd*speed);
		if(speed>1)
		{
			speed-=15/25;
		}
		else
		{
			speed = 1;
		}
		yield;
	}
	ascent(i in 0..length(shurikenPoints))
	{
		if(!Obj_IsDeleted(shurikenPoints[i]))
		{
			ObjShot_SetDeleteFrameA6(shurikenPoints[i],0,1);
		}
	}
}
task timer
{
    loop(TIME-10)
    {
        wait(60);
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}


task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}

	SE_PlayLen(BossDead,50);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);
	SetCommonData("SpellCardBG1",false);
	wait(140);
	
	CloseScript(GetOwnScriptID());
	return;
	
} 
task move
{
    while(ObjEnemy_GetInfo(objEnemy,INFO_LIFE)>0)
    {
		let angz = rand(0,360);
		let dis = rand(10,30);
		let x = ObjMove_GetX(objEnemy)+dis*cos(angz);
		let y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		if(x<GetStgFrameWidth/2-100 || x>GetStgFrameWidth/2+100)
		{
			angz = 180-angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		
		if(y<75 || y>150)
		{
			angz = -1*angz;
			x = ObjMove_GetX(objEnemy)+dis*cos(angz);
			y = ObjMove_GetY(objEnemy)+dis*sin(angz);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, x, y, 100);
        wait(200);
    }
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

