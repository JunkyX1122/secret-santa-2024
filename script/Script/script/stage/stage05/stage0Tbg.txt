#include "./../../lib/lib_stageall.txt"
let GCSD=GetCurrentScriptDirectory();
let bSpell = false;
let current = GetCurrentScriptDirectory();
let fo = 0;
let adder = 0;
let fogStart = 270;
let fogEnd = 325;
let fogR = 0;
let fogG = 0;
let fogB = 0;
@Initialize
{
	TCallBg;
	ResetBG;
	SetAutoDeleteObject(true);
}

@MainLoop
{

	yield;
}
let counter = 0;
task TCallBg
{
	SpellBG;
	Normal();
}
task ResetBG
{
	SetCameraFocusX(0);
	SetCameraFocusY(0);
	SetCameraFocusZ(0);
	
	SetCameraRadius(300);
	SetCameraAzimuthAngle(90);
	SetCameraElevationAngle(-75);
	SetFogParam(fogStart, fogEnd, fogR, fogG, fogB);

}

task Normal {

	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriority(obj, 0.21);
	ObjPrim_SetTexture(obj, IMG_STAGE_05_SKY);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 384, 268);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj, 320, 64, 0);
	ObjRender_SetScaleXYZ(obj, 2, 1, 0);
	ObjSprite2D_SetDestCenter(obj);
	let obj2 = ObjPrim_Create(OBJ_SPRITE_3D);
	Obj_SetRenderPriority(obj2, 0.20);
	ObjPrim_SetTexture(obj2, IMG_STAGE_05_WATER);
	ObjRender_SetPosition(obj2, 0, -194, 0);
	let c = 0;
	
	loop 
	{
		ObjSprite3D_SetSourceDestRect(obj2, 0, c, 512, 512 + c);
		c++;
		yield;
	}
}
task SpellBGFlatColor
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 24); //描画優先度を設定
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory~"./../../../img/background/BG1/pixel.png"); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	let alpha1 = 0;
	while(true)
	{
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
			if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		ObjRender_SetAlpha(obj,128*alpha1);
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}

task SpellBG
{
	SpellBGFlatColor;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj, 22); 
	ObjPrim_SetTexture(obj, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj,1.5,1.5,0);
	ObjRender_SetAngleZ(obj,-90);
	//ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj2, 22); 
	ObjPrim_SetTexture(obj2, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj2, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj2, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj2);
	ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj2,-1.5,1.5,0);
	ObjRender_SetAngleZ(obj2,-90);
	//ObjRender_SetBlendType(obj2,BLEND_ADD_ARGB);
	
	let vertexCount = 512;
	let obj3 = ObjPrim_Create(OBJ_PRIMITIVE_2D); 
	ObjPrim_SetPrimitiveType(obj3,PRIMITIVE_TRIANGLESTRIP);
	Obj_SetRenderPriorityI(obj3, 23); 
	ObjPrim_SetVertexCount(obj3,vertexCount);
	ObjPrim_SetTexture(obj3, IMG_YUUMA_BG2); 
	ObjRender_SetBlendType(obj3,BLEND_SUBTRACT);
	ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	
	let objRings = [];
	ascent(i in 0..3)
	{
		let objR = ObjPrim_Create(OBJ_SPRITE_2D); 
		objRings ~= [objR];
		Obj_SetRenderPriorityI(objRings[i], 24); 
		ObjPrim_SetTexture(objRings[i], IMG_YUUMA_BG3); 
		ObjSprite2D_SetSourceRect(objRings[i], 0, 0,1024, 1024);
		ObjSprite2D_SetDestRect(objRings[i], 0, 0, 1024, 1024);
		ObjSprite2D_SetDestCenter(objRings[i]);
		ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetBlendType(objRings[i],BLEND_SUBTRACT);
		
	}
	ObjRender_SetScale(objRings[0],1);
	ObjRender_SetScale(objRings[1],0.72);
	ObjRender_SetScale(objRings[2],0.5185);
	
	ascent(i in 0..vertexCount/2)
	{
		let index = i*2;
		let angle = 360/((vertexCount/2)-1)*i+90;
		let dis = 550;
		ObjPrim_SetVertexPosition(obj3,index,0,0,0);
		ObjPrim_SetVertexPosition(obj3,index+1,dis*cos(angle),dis*sin(angle),0);
		ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, 0);
		ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512);
		ObjPrim_SetVertexAlpha(obj3,index,0);
		ObjPrim_SetVertexColor(obj3,index,0,0,0);
		
	}
	
	let alpha1 = 0;
	let c1 = 0;
	let c2 = 0;
	let c3 = 0;
	let tm1 = rand(0.5,1);
	let tm2 = rand(0.5,1);
	let tv1 = tm1;
	let tv2 = tm2;
	
	while(true)
	{
		if(c3%180 == 0)
		{
			tv1 = rand(0.5,2)/2;
			tv2 = rand(0.5,2)/2;
		}
		tm1 = tm1 * 0.999 + tv1 * 0.001;
		tm2 = tm2 * 0.999 + tv2 * 0.001;
		
		ObjRender_SetAlpha(obj,(128+128*sin(c3/3))*alpha1);
		ObjRender_SetAlpha(obj2,(128+128*sin(c3/3+180))*alpha1);
		ObjRender_SetAlpha(obj3,255*alpha1);
		
		ascent(i in 0..3)
		{
			ObjRender_SetAlpha(objRings[i],(64-32/2*i)*alpha1);
			ObjRender_SetAngleZ(objRings[i],c3*(1-2*(i%2))*0.025);
		}
		
	
		ObjSprite2D_SetSourceRect(obj, 0, 0+c1,512, 512+c1);
		ObjSprite2D_SetSourceRect(obj2, 0, 0-c2,512, 512-c2);
		ascent(i in 0..vertexCount/2)
		{
			let index = i*2;
			ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, c3*0.5);
			ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512+c3*0.5);
		}
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
		if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ascent(i in 0..3)
		{
			ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);		
		}
		c1+=tm1;
		c2+=tm2;
		c3++;
		yield;
	}

	
}
