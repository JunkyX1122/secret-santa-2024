#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns1"]
#Text["Ns1"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2 = CreateFamiliar;

let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*60;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(60);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	
	renderBossUnanimated(objEnemy, IMG_BOSS_DAISUKE, 7);

	
	renderBossUnanimated(objEnemy2, IMG_BOSS_SULLEN, 15);
	
	if(GetCommonData("isPracticing", true)==true)
	{
		ObjMove_SetPosition(objEnemy, GetStgFrameWidth/2,100+100 );
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 60);
	
		ObjMove_SetPosition(objEnemy2, GetStgFrameWidth/2, 100);
		ObjMove_SetDestAtFrame(objEnemy2, -100,-100, 120, LERP_SMOOTHER);
	}
	else
	{	
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2, 150, 60);
		ObjMove_SetDestAtFrame(objEnemy2, -100,-100, 120, LERP_SMOOTHER);
	}
	HitCirc(objEnemy2);
	RecordAttackHistory("04a", "Ns1", DIFFICULTY_NAMES[DIFFICULTY]);
	end;
	SetCommonData("SpellCardBG1",false);
	SetCommonData("BossName", "Daisuke");
}
@MainLoop
{
	if(!Obj_IsDeleted(objEnemy2))
	{
		SetCommonData("objEnemy2_Position", [ObjMove_GetX(objEnemy2),ObjMove_GetY(objEnemy2)]);
	}
	
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.065)/1.5, (0.065)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	while(!Obj_IsDeleted(objEnemy))
	{
		ascent(i in 0..6)
		{
			ascent(o in 0..2)
			{
				let innrBit = [1,-1][o]*bit;
				let ang = 90 - 135*innrBit+ 18*i*innrBit;
				let x = ObjMove_GetX(objEnemy)+30*cos(ang);
				let y = ObjMove_GetY(objEnemy)+30*sin(ang);
				CreateVine(x,y,ang,bit);
			}
		}
		ascent(i in 0..8)
		{
			let ang = 90+rand(5,-5);
			let sprdAm = 20;
			ascent(o in 0..sprdAm)
			{
				let ang2 = ang - 70*bit + 140/(sprdAm-1)*o*bit;
				let dis = 10 + 10*i;
				let spd = 2+0.5*i;
				let spd2 = (1+0.75*i)/2;
				let x = ObjMove_GetX(objEnemy) + dis*cos(ang2);
				let y = ObjMove_GetY(objEnemy) + dis*sin(ang2);
				let obj = ShotA2(x,y,spd,ang2,-spd/40,0,52,52,5,2,BLEND_ALPHA,false);
				ObjMove_AddPatternA2(obj,40+60,0,NO_CHANGE,spd2/120,spd2,0);
				ObjRender_SetScaleX(obj,0.8);
				ObjRender_SetScaleY(obj,1.5);
			}
			
		}
		ascent(i in 0..8)
		{
			let ang = -90;
			if(i%2==1)
			{
				let sprdAm = 34;
				ascent(o in 0..sprdAm)
				{
					let ang2 = ang - 110*bit + 220/(sprdAm-1)*o*bit;
					let dis = 10 + 10*i;
					let spd = 1+0.5*i;
					let spd2 = (1+0.75*i)/2;
					let x = ObjMove_GetX(objEnemy) + dis*cos(ang2);
					let y = ObjMove_GetY(objEnemy) + dis*sin(ang2);
					
					
					let obj = ShotA2(x,y,spd,ang2,-spd/40,1,57,423,5,2,BLEND_ALPHA,false);
					ObjRender_SetColor(obj,255,255,200);
					if(o==1||o==sprdAm-2||i==3)
					{
						ObjRender_SetColor(obj,225,128,128);
					}
					if(o==0||o==sprdAm-1||i==1)
					{
						ObjRender_SetColor(obj,128,255,128);
					}
		
				}
			}
		}
		
		wait(100);
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(chime1,60);
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(50,-50), 150+rand(20,0), 60);
		wait(140);
		bit*=-1;
	}
}//44

task CreateVine(x,y,ang,bit)
{
	let spd = 12;
	let cc = 0;
	let angChange = round(rand(5,10));
	let randThorn = round(rand(0,3));
	while(x>-16 && x<GetStgFrameWidth+16 && y>-16 && y<GetStgFrameHeight+16 && !Obj_IsDeleted(objEnemy))
	{
		if(cc%4==randThorn)
		{
			ascent(i in 0..2)
			{
				SE_PlayLen(shot1,60);
				let obj = ShotA2(x,y,3,ang+90*bit-180*bit*i,-3/10,0,56,56,20,2,BLEND_ALPHA,false);
				ObjMove_AddPatternA2(obj,20+60,0,NO_CHANGE,2/120,2,0);
			}
			angChange--;
		}
		if(cc%1==0)
		{
			SE_PlayLen(Shot1,60);
			let obj = ShotA1(x,y,0,rand(0,360),84,422,20,2,BLEND_ALPHA,false);
			ObjShot_SetDeleteFrameA6(obj,100,1);
			WaitVineSound();
			angChange--;
		}
		if(angChange<=0)
		{
			angChange = round(rand(1,10));
			let am = max(30-cc/30,0);
			let randam = rand(-1,1)*am;
			if(absolute(((ang+randam)%360) - 90) < 30)
			{
				ang-=randam;
			}
			else
			{
				ang+=randam;
			}
		}
		
		x+=spd*cos(ang);
		y+=spd*sin(ang);
		cc++;
		yield;
	}
	
	task WaitVineSound()
	{
		wait(100);
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(shot1,60);
		}
	}
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 

task HitCirc(objTarget)
{
	while(!Obj_IsDeleted(objEnemy))
	{
		ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 32);
		ObjEnemy_SetIntersectionCircleToPlayer(objTarget, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 24);
		yield;
	}
	Obj_Delete(objTarget);
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

