#include "./../../lib/lib_stageall.txt"
let GCSD=GetCurrentScriptDirectory();
let bSpell = false;
let current = GetCurrentScriptDirectory();
let fo = 0;
let adder = 0;

@Initialize
{
	TCallBg;
	ResetBG;
	SetAutoDeleteObject(true);
}

@MainLoop
{
	globalscroll+=acceleration;
	pathscroll+=acceleration;
	yield;
}
let counter = 0;
task TCallBg
{
	StartNamelessPath;
	SpellBG;
}
task ResetBG
{
	SetCameraFocusXYZ(0, -60, 80);
	SetViewFrom(10, -90, 30+15*cos(camanglemodifier));

	SetCameraPerspectiveClip(0,7000);
	SetFogParam(350, 750, 57, 67, 81); 
}
function SetViewFrom(radius, azimuth, elevation){

	SetCameraRadius(radius);
	SetCameraAzimuthAngle(azimuth);
	SetCameraElevationAngle(elevation);
	
}
let tiltangle = 30;
let time = 0;
let objtreesright = [];
let objtreesleft = [];

let globalscroll = 0.5;
let pathscroll = 0;
let camanglemodifier = 180; //set to 0 for effect
let treeoffset = -1110;
let acceleration = 1; //usually starts at 0.5
let accelChangeRate = 0.025/2; //change this to make acceleration slower
let bgtime = 0;

let field = IMG_STAGE_04_FIELD;
let fogback = IMG_STAGE_04_FOGBACK;
let trail = IMG_STAGE_04_TRAIL;
let trees = IMG_STAGE_04_TREE;
task StartNamelessPath{
	
	SetCommonData("BGTransition", true);
	SetCommonData("BGSpeed", 2.000000);
	let obj = ObjPrim_Create(OBJ_SPRITE_3D);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj,17);
	ObjPrim_SetTexture(obj,field);
	ObjSprite3D_SetSourceDestRect(obj, 0, 0+pathscroll, 500, 1500+pathscroll);
	ObjRender_SetAngleXYZ(obj, 90, 0, 0);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	ObjRender_SetPosition(obj, 0, -300, 600);

	let obj2 = ObjPrim_Create(OBJ_SPRITE_3D);
	ObjRender_SetBlendType(obj2, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj2,18);
	ObjPrim_SetTexture(obj2,trail);
	ObjSprite3D_SetSourceDestRect(obj2, 0, 0+pathscroll, 512, 1500+pathscroll);
	ObjRender_SetAngleXYZ(obj2, 90, 0, 0);
	ObjRender_SetScaleXYZ(obj2, 0.5, 1, 1);
	ObjRender_SetPosition(obj2, 0, -300, 600);
	
	let obj5 = ObjPrim_Create(OBJ_SPRITE_3D);
	ObjRender_SetBlendType(obj5, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj5,16);
	ObjPrim_SetTexture(obj5,fogback);
	ObjSprite3D_SetSourceDestRect(obj5, 1, 1, 256, 256);
	ObjRender_SetAngleXYZ(obj5, 0, 180, 180);
	ObjRender_SetScaleXYZ(obj5, 10, 10, 1);
	ObjRender_SetPosition(obj5, 0, 0, 1900); 
	let totalTrees = 2;
	descent(i in 1..totalTrees+1)
	{
		treeoffset = -1110;
		loop(11)
		{
			let obj3 = ObjPrim_Create(OBJ_SPRITE_3D);
			ObjRender_SetBlendType(obj3, BLEND_ALPHA);
			Obj_SetRenderPriorityI(obj3,19);
			ObjPrim_SetTexture(obj3,trees);
			ObjSprite3D_SetSourceDestRect(obj3, 0, 0, 512, 700);
			ObjRender_SetAngleXYZ(obj3, 0, 0, 180);
			ObjRender_SetScaleXYZ(obj3, 0.5, 0.5, 1);
			ObjRender_SetPosition(obj3, 160*i, -50, 1200-globalscroll+treeoffset);
			
			objtreesright = objtreesright ~ [obj3];
			
			let obj4 = ObjPrim_Create(OBJ_SPRITE_3D);
			ObjRender_SetBlendType(obj4, BLEND_ALPHA);
			Obj_SetRenderPriorityI(obj4,19);
			ObjPrim_SetTexture(obj4,trees);
			ObjSprite3D_SetSourceDestRect(obj4, 0, 0, 512, 700);
			ObjRender_SetAngleXYZ(obj4, 0, 0, 180);
			ObjRender_SetScaleXYZ(obj4, 0.5,0.5, 1);
			ObjRender_SetPosition(obj4, -160*i, -50, 1200-globalscroll+treeoffset);
			
			objtreesleft = objtreesleft ~ [obj4];
			treeoffset-=110;
		}
	}
	treeoffset = 0;
	
	loop
	{
	
		globalscroll%=110;		
		time++;
		ObjRender_SetBlendType(obj, BLEND_ALPHA);
		ObjPrim_SetTexture(obj,field);
		ObjSprite3D_SetSourceDestRect(obj, 0, 0+pathscroll, 1400, 1500+pathscroll);
		ObjRender_SetAngleXYZ(obj, 90, 0, 0);
		ObjRender_SetScaleXYZ(obj, 1, 1, 1);
		ObjRender_SetPosition(obj, 0, -300, 600);

		ObjRender_SetBlendType(obj2, BLEND_ALPHA);
		ObjSprite3D_SetSourceDestRect(obj2, 0, 0+pathscroll, 512, 1500+pathscroll);
		ObjRender_SetAngleXYZ(obj2, 90, 0, 0);
		ObjRender_SetScaleXYZ(obj2, 0.5, 1, 1);
		ObjRender_SetPosition(obj2, 0, -300, 600);

		ascent(i in 0..length(objtreesright))
		{
			if(i%(length(objtreesright)/totalTrees)==0)
			{
				treeoffset = 0;	
			}
			ObjRender_SetPosition(objtreesright[i], ObjRender_GetX(objtreesright[i]), -150, 1200-globalscroll+treeoffset);
			ObjRender_SetPosition(objtreesleft[i], ObjRender_GetX(objtreesleft[i]), -150, 1200-globalscroll+treeoffset);
			treeoffset-=110;
		}
		treeoffset = 0;	
		wait(1);
	}
}







task SpellBGFlatColor
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(obj, 24); //描画優先度を設定
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory~"./../../../img/background/BG1/pixel.png"); //テクスチャを設定
	ObjSprite2D_SetSourceRect(obj, 0, 0,GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj,0,0,0);
	let alpha1 = 0;
	while(true)
	{
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
			if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		ObjRender_SetAlpha(obj,128*alpha1);
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		yield;
	}
	Obj_Delete(obj);
}

task SpellBG
{
	SpellBGFlatColor;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj, 22); 
	ObjPrim_SetTexture(obj, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj,1.5,1.5,0);
	ObjRender_SetAngleZ(obj,-90);
	//ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D); 
	Obj_SetRenderPriorityI(obj2, 22); 
	ObjPrim_SetTexture(obj2, IMG_YUUMA_BG1); 
	ObjSprite2D_SetSourceRect(obj2, 0, 0,512, 512);
	ObjSprite2D_SetDestRect(obj2, 0, 0, 512, 512);
	ObjSprite2D_SetDestCenter(obj2);
	ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	ObjRender_SetScaleXYZ(obj2,-1.5,1.5,0);
	ObjRender_SetAngleZ(obj2,-90);
	//ObjRender_SetBlendType(obj2,BLEND_ADD_ARGB);
	
	let vertexCount = 512;
	let obj3 = ObjPrim_Create(OBJ_PRIMITIVE_2D); 
	ObjPrim_SetPrimitiveType(obj3,PRIMITIVE_TRIANGLESTRIP);
	Obj_SetRenderPriorityI(obj3, 23); 
	ObjPrim_SetVertexCount(obj3,vertexCount);
	ObjPrim_SetTexture(obj3, IMG_YUUMA_BG2); 
	ObjRender_SetBlendType(obj3,BLEND_SUBTRACT);
	ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
	
	let objRings = [];
	ascent(i in 0..3)
	{
		let objR = ObjPrim_Create(OBJ_SPRITE_2D); 
		objRings ~= [objR];
		Obj_SetRenderPriorityI(objRings[i], 24); 
		ObjPrim_SetTexture(objRings[i], IMG_YUUMA_BG3); 
		ObjSprite2D_SetSourceRect(objRings[i], 0, 0,1024, 1024);
		ObjSprite2D_SetDestRect(objRings[i], 0, 0, 1024, 1024);
		ObjSprite2D_SetDestCenter(objRings[i]);
		ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetBlendType(objRings[i],BLEND_SUBTRACT);
		
	}
	ObjRender_SetScale(objRings[0],1);
	ObjRender_SetScale(objRings[1],0.72);
	ObjRender_SetScale(objRings[2],0.5185);
	
	ascent(i in 0..vertexCount/2)
	{
		let index = i*2;
		let angle = 360/((vertexCount/2)-1)*i+90;
		let dis = 550;
		ObjPrim_SetVertexPosition(obj3,index,0,0,0);
		ObjPrim_SetVertexPosition(obj3,index+1,dis*cos(angle),dis*sin(angle),0);
		ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, 0);
		ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512);
		ObjPrim_SetVertexAlpha(obj3,index,0);
		ObjPrim_SetVertexColor(obj3,index,0,0,0);
		
	}
	
	let alpha1 = 0;
	let c1 = 0;
	let c2 = 0;
	let c3 = 0;
	let tm1 = rand(0.5,1);
	let tm2 = rand(0.5,1);
	let tv1 = tm1;
	let tv2 = tm2;
	
	while(true)
	{
		if(c3%180 == 0)
		{
			tv1 = rand(0.5,2)/2;
			tv2 = rand(0.5,2)/2;
		}
		tm1 = tm1 * 0.999 + tv1 * 0.001;
		tm2 = tm2 * 0.999 + tv2 * 0.001;
		
		ObjRender_SetAlpha(obj,(128+128*sin(c3/3))*alpha1);
		ObjRender_SetAlpha(obj2,(128+128*sin(c3/3+180))*alpha1);
		ObjRender_SetAlpha(obj3,255*alpha1);
		
		ascent(i in 0..3)
		{
			ObjRender_SetAlpha(objRings[i],(64-32/2*i)*alpha1);
			ObjRender_SetAngleZ(objRings[i],c3*(1-2*(i%2))*0.025);
		}
		
	
		ObjSprite2D_SetSourceRect(obj, 0, 0+c1,512, 512+c1);
		ObjSprite2D_SetSourceRect(obj2, 0, 0-c2,512, 512-c2);
		ascent(i in 0..vertexCount/2)
		{
			let index = i*2;
			ObjPrim_SetVertexUVT(obj3, index, 1024/(vertexCount/2)*i, c3*0.5);
			ObjPrim_SetVertexUVT(obj3, index+1, 1024/(vertexCount/2)*i, 512+c3*0.5);
		}
		if(GetCommonData("SpellCardBG1",false)==true)
		{
			if(alpha1 < 1)
			{ 
				alpha1 += 1/10;
			}
		} 
		else
		{
		if(alpha1>0)
			{
				alpha1 -= 1/40;
			}
		}
		
		ObjRender_SetPosition(obj,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj2,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ObjRender_SetPosition(obj3,GetStgFrameWidth/2,GetStgFrameHeight/2,0);
		ascent(i in 0..3)
		{
			ObjRender_SetPosition(objRings[i],GetStgFrameWidth/2,GetStgFrameHeight/2,0);		
		}
		c1+=tm1;
		c2+=tm2;
		c3++;
		yield;
	}

	
}
