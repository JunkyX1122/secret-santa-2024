#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Ns3"]
#Text["Ns3"]
#Background["./stage0Tbg.txt"]
#System["./../../lib/system/System.txt"]
#include "./../../lib/lib_stageall.txt"
#include "./../Initiate.txt"

let objEnemy;
let objEnemy2 = CreateFamiliar;

let count = 0;
   let objScene=GetEnemyBossSceneObjectID();
let c = 0;
let TIME = 60*85;
@Event{
 alternative(GetEventType())
 case(EV_REQUEST_LIFE){
  SetScriptResult(215);
        }
 case(EV_REQUEST_TIMER){
  SetScriptResult(85);
 }
 case(EV_REQUEST_SPELL_SCORE){
  SetScriptResult(1000000);
 }

}

@Initialize
{
	InitialiseIndiv();
	timer;
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	
	SetAutoDeleteObject(true);
	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);
	ObjEnemy_SetDamageRate(objEnemy,0,0);
	ObjMove_SetPosition(objEnemy, GetCommonData("BossX", 0), GetCommonData("BossY", 0));
	ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2, 150, 60, LERP_SMOOTHER);
	renderBossUnanimated(objEnemy, IMG_BOSS_SULLEN, 15);
	
	

	ObjMove_SetPosition(objEnemy2, GetStgFrameWidth+100,-100);
	ObjMove_SetDestAtFrameWeight(objEnemy2, GetStgFrameWidth/2, 250, 60);
	renderBossUnanimated(objEnemy2, IMG_BOSS_DAISUKE, 7);
	HitCirc(objEnemy2);
	RecordAttackHistory("04a", "Ns3", DIFFICULTY_NAMES[DIFFICULTY]);
	end;
	SetCommonData("SpellCardBG1",false);
	SetCommonData("BossName", "Daisuke & Sullen");
}
@MainLoop
{
	if(!Obj_IsDeleted(objEnemy2))
	{
		SetCommonData("objEnemy2_Position", [ObjMove_GetX(objEnemy2),ObjMove_GetY(objEnemy2)]);
	}
	
    ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
        SetAutoDeleteObject(true);
    }
	else
	{
		SetCommonData("BossX", ObjMove_GetX(objEnemy));
		SetCommonData("BossY", ObjMove_GetY(objEnemy));
	}
	if(count == 0)
	{
		
	}
    if(count < 95)
    {
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    }
    if(count == 95)
    {
		//move;
		Fire;	
		magiccircle(objEnemy,1);
		magiccircle(objEnemy2,1);
		SizeCircle();
		ObjEnemy_SetDamageRate(objEnemy, (0.05)/1.5, (0.05)/3);
        count = 1111;
    }
    if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
    {
       
    }
	
    count++;
    yield;
}
@Finalize
{
}

task Fire
{
	let bit = 1-2*round(rand(0,1));
	while(!Obj_IsDeleted(objEnemy))
	{
		SullenFire(bit);
		wait(20);
		if(!Obj_IsDeleted(objEnemy)) 
		{
			DaisukeFire(bit);
		}
		wait(60*5);
		ObjEnemy_SetDamageRate(objEnemy, (0.07)/1.5, (0.07)/3);
	}
}

task DaisukeFire(bit)
{
	if(!Obj_IsDeleted(objEnemy))
	{
		
		SE_PlayLen(charge1,60);
		let pX = GetPlayerX;
		let pY = GetPlayerY - 85;
		
		ascent(i in 0..60+30)
		{
			if(!Obj_IsDeleted(objEnemy)) 
			{
				if(i%3==0)
				{
					CreateLine(pX,pY,100,60);
				}
				if(i==30)
				{
					ObjMove_SetDestAtFrameWeight(objEnemy2, pX, pY, 50);
				}
				yield;
			}
		}
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(Bone,60);
			SE_PlayLen(explode,50);
		}
		let bit2 = GetPlayerX > ObjMove_GetX(objEnemy) ? 1 : -1;
		ascent(i in 0..10)
		{
			if(!Obj_IsDeleted(objEnemy)) 
			{
				ScreenShake(5,2);
				SE_PlayLen(shot1,80);
				let x = ObjMove_GetX(objEnemy2)+50*bit2+rand(20,-20);
				let y = ObjMove_GetY(objEnemy2)+30+rand(5,-15);
				let ang = rand(0,360);
				let spd = rand(8,10);
				ascent(o in 0..10)
				{
					let obj = ShotA2(x,y,spd,ang+360/10*o*bit,-spd/10,0,293,293,5,2,BLEND_ADD_ARGB,false);
					ObjShot_SetDeleteFrameA6(obj,15,1);
				}
				ascent(o in 0..20)
				{
					let obj = ShotA2(x,y,spd*1.2,ang+360/20*o*bit,-spd/10,1,140,140,5,2,BLEND_ADD_ARGB,false);
					//ObjShot_SetDeleteFrameA6(obj,15,1);
				}
				wait(5);
			}
			bit2*=-1;
		}
		bit2 = GetPlayerX > ObjMove_GetX(objEnemy2) ? 1 : -1;
		if(!Obj_IsDeleted(objEnemy)) 
		{
			ScreenShake(60*2.5,3);
			SE_PlayLen(Burst2,50);
		}
		let x = ObjMove_GetX(objEnemy2);
		let y = ObjMove_GetY(objEnemy2);
		let ang = 90;
		ascent(i in 0..80)
		{
			if(!Obj_IsDeleted(objEnemy)) 
			{
				let t = 190 * (1 - (1 - 1/79*i)^11);
				ObjMove_SetY(objEnemy2, y - t);
				let spd = 6;
				if(i<30)
				{
					let dis = 50-50/30*i;
					let obj = ShotA2(ObjMove_GetX(objEnemy2)+dis*cos(ang),ObjMove_GetY(objEnemy2)+dis*sin(ang),spd,ang,-spd/10,0.4,293,293,0,2,BLEND_ADD_ARGB,false);
					ObjMove_AddPatternA2(obj,120,NO_CHANGE,NO_CHANGE,3/100,3,0);
					ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
					let scl = 2-1/30*i;
					ObjShot_SetIntersectionScaleXY(obj,scl,scl);
					ObjRender_SetScale(obj,scl);
					
					if(i%3>0)
					{
						ObjShot_SetDeleteFrameA6(obj,120,scl*2);
					}
					ang-=135/30*bit2;
				}
				
				yield;
			}
		}
		if(!Obj_IsDeleted(objEnemy)) 
		{
			SE_PlayLen(charge0,60);
		}
		wait(60*2);
	}
}


task CreateLine(x,y,d,t)
{
	let objLine = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objLine,PRIMITIVE_LINESTRIP);
	ObjPrim_SetVertexCount(objLine, 33);
	Obj_SetRenderPriorityI(objLine,38);
	
	ObjRender_SetAngleZ(objLine,rand(0,360));
	ObjRender_SetPosition(objLine, x, y, 0);
	ObjRender_SetColor(objLine, 255, 128, 128);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			let scl = sin(90/(t-1)*i);
			let dis = d*scl * 1.5;
			
			ascent(o in 0..33)
			{
				let ang2 = 360/32*o;
				ObjPrim_SetVertexPosition(objLine , o, dis*cos(ang2), dis*sin(ang2),0);
			}
			ObjRender_SetAlpha(objLine,200-200*scl);
			
			yield;
		}
	}
	Obj_Delete(objLine);
}

task SullenFire(bit)
{
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(charge0,60);
		let am = 3;
		ascent(i in 0..am)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				TrinityKnot(ObjMove_GetX(objEnemy) - 200 * bit + (200*2*bit)/(am-1)*i ,ObjMove_GetY(objEnemy)+100-100*sin(180/(am-1)*i),-90,bit);
				wait(30);
			}
		}
		ObjMove_SetDestAtFrameWeight(objEnemy, GetStgFrameWidth/2+rand(40,-40), 150+rand(10,-10), 90);
		wait(60*5);
		bit*=-1;
	}
}
task TrinityKnot(sourceX,sourceY,angS,bit)
{
	let DELAY_KNOT = 100;
	let dis = 100;
	ascent(i in 0..3)
	{
		TrinityKnotPoint(angS+360/3*i*bit,dis,bit,103);
	}
	dis *= 0.85;
	let am = 15;
	ascent(i in 0..am)
	{
		if(!Obj_IsDeleted(objEnemy))
		{
			SE_PlayLen(Shot1,60);
			ascent(o in 0..3)
			{
				let ang = angS+(360/3)/am*i*bit + (360/3*o*bit);
				let x = sourceX+dis*cos(ang);
				let y = sourceY+dis*sin(ang);
				let shot = ShotA1(x,y,0,ang+90*bit,89,89,10,2,BLEND_ADD_ARGB,false);
				ObjMove_AddPatternA2(shot,DELAY_KNOT-i,0,NO_CHANGE,2/100,2,0);
			}
		}
		//ObjRender_SetBlendType(shot,BLEND_ADD_ARGB);
		yield;
	}
	wait(DELAY_KNOT-am);
	if(!Obj_IsDeleted(objEnemy))
	{
		SE_PlayLen(chime1,60);
	}
	task TrinityKnotPoint(ang,dis,bit,id)
	{

		let t = 30;
		ascent(i in 0..t)
		{
			if(!Obj_IsDeleted(objEnemy))
			{
				SE_PlayLen(Shot1,60);
				let x = sourceX+dis*0.66*cos(ang+180/3*bit);
				let y = sourceY+dis*0.66*sin(ang+180/3*bit);
				
				let x1 = sourceX+dis*cos(ang);
				let y1 = sourceY+dis*sin(ang);
				
				let dis2 = Get_Distance(x1,y1,x,y);
				let ang2 = Get_PointAngle(x1,y1,x,y);
				let ang2Dis = (ang - 360/3*bit) - ang2;
				ang2Dis = modCustom(ang2Dis + 180, 360) - 180;

				let ang3 = ang2 + (ang2Dis*2)/(t-1)*i;
				
				let x2 = x + dis2 * cos(ang3);
				let y2 = y + dis2 * sin(ang3);
				
				let ang4 = ang + (360/3)/(t-1)*i*bit;
				let shot = ShotA1(x2,y2,0,ang4,id,id,10,2,BLEND_ADD_ARGB,false);
				
				ObjMove_AddPatternA2(shot,DELAY_KNOT-i,0,NO_CHANGE,2/100,2,0);
				yield;
			}
		}
	}

}

function modCustom(a, n)
{
	return a - floor(a/n) * n;
}
task timer
{
    while(TIME>60*10)
    {
        TIME--;
		yield;
    }
    loop(5)
    {
        if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout1,60);
			wait(60);
        }   
    }
    loop(5)
    {
		if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
        {
            SE_PlayLen(timeout2,60);
			wait(60);
        }  
    }
}
task end
{
    while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		yield;
	}
	SE_PlayLen(BossDead,50);
	Obj_SetValue(objEnemy,"cast",0);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
	Obj_Delete(objEnemy);

	loop(60)
	{
		DeleteShotAll(TYPE_ALL, TYPE_ITEM);
		yield;
	}
	
    CloseScript(GetOwnScriptID());
	return;
} 

task HitCirc(objTarget)
{
	while(!Obj_IsDeleted(objEnemy))
	{
		ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 32);
		ObjEnemy_SetIntersectionCircleToPlayer(objTarget, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 24);
		yield;
	}
	Obj_Delete(objTarget);
}

function GetCenterX{
     return GetStgFrameWidth/2;
}
function GetCenterY{
     return GetStgFrameHeight/2;
}

