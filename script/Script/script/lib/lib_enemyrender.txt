task EnemyMarker(x,count)
{ 
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj,79);
	ObjPrim_SetTexture(obj,IMG_PIXEL);
	ObjSprite2D_SetSourceRect(obj,0,0,50,1);
	ObjSprite2D_SetDestRect(obj,0,0,50,1);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetAlpha(obj,((256-64)+32*cos(count)));
	//ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	ObjRender_SetPosition(obj,x,GetStgFrameHeight,0);
	yield;
	
	Obj_Delete(obj);
}

let BossAlpha = 255;
let BossRGB = 255;
let BossAngle = 0;
let TeamMember = 1;

function ObjPrim_SetDestCenter(obj,x1,y1,x2,y2)
{//指定域の画像の中心をobjの中心に設定する(よく使うタイプ)
	ObjPrim_SetVertexPosition(obj, 0, -(x2-x1)/2, -(y2-y1)/2, -0);
	ObjPrim_SetVertexPosition(obj, 1, (x2-x1)/2, -(y2-y1)/2, -0);
	ObjPrim_SetVertexPosition(obj, 2, (x2-x1)/2, (y2-y1)/2, 0);
	ObjPrim_SetVertexPosition(obj, 3, -(x2-x1)/2, (y2-y1)/2, 0);

	ObjPrim_SetVertexUVT(obj, 0, x1, y1);
	ObjPrim_SetVertexUVT(obj, 1, x2, y1);
	ObjPrim_SetVertexUVT(obj, 2, x2, y2);
	ObjPrim_SetVertexUVT(obj, 3, x1, y2);
}


let bossLookAngle = 90;
let bossLookDepth = 10;
task renderBoss(obj,path)
{
	Obj_SetValue(obj,"cast",0);
	
	let circleV = 6;
	let cr = 1;
	let objC = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objC, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(objC, circleV);
	Obj_SetRenderPriorityI(objC,30);
	ObjRender_SetColor(objC,0,0,0);
	ascent(i in 0..circleV)
	{
		ObjPrim_SetVertexPosition(objC, i, 60*cos(-90+360/circleV*i), 60*sin(-90+360/circleV*i), 0);
	}
	
	let objC2 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objC2, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(objC2, circleV);
	Obj_SetRenderPriorityI(objC2,30);
	ascent(i in 0..circleV)
	{
		ObjPrim_SetVertexPosition(objC2, i, 50*cos(-90+360/circleV*i), 50*sin(-90+360/circleV*i), 0);
	}
	
	let objC3 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objC3, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(objC3, 64);
	Obj_SetRenderPriorityI(objC3,30);
	ObjRender_SetColor(objC3,0,0,0);
	ascent(i in 0..64)
	{
		ObjPrim_SetVertexPosition(objC3, i, 40*cos(-90+360/64*i),40*sin(-90+360/64*i), 0);
	}
	
	let objC4 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objC4, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(objC4, 64);
	Obj_SetRenderPriorityI(objC4,30);
	ascent(i in 0..64)
	{
		ObjPrim_SetVertexPosition(objC4, i, 25*cos(-90+360/64*i),25*sin(-90+360/64*i), 0);
	}
	
	let objC5 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objC5, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(objC5, 64);
	Obj_SetRenderPriorityI(objC5,30);
	ObjRender_SetColor(objC5,0,0,0);
	ascent(i in 0..64)
	{
		ObjPrim_SetVertexPosition(objC5, i, 22*cos(-90+360/64*i),22*sin(-90+360/64*i), 0);
	}
	
	let objC6 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objC6, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(objC6, 64);
	Obj_SetRenderPriorityI(objC6,30);
	ascent(i in 0..64)
	{
		ObjPrim_SetVertexPosition(objC6, i, 10*cos(-90+360/64*i),10*sin(-90+360/64*i), 0);
	}
	while(!Obj_IsDeleted(obj))
	{	
		bossLookAngle = GetAngleToPlayer(obj);
		ObjRender_SetAngleZ(objC,ObjRender_GetAngleZ(objC)+0.5);
		ObjRender_SetAngleZ(objC2,ObjRender_GetAngleZ(objC2)-0.5);

		ObjRender_SetPosition(objC,ObjMove_GetX(obj),ObjMove_GetY(obj),0);
		ObjRender_SetPosition(objC2,ObjMove_GetX(obj),ObjMove_GetY(obj),0);
		ObjRender_SetPosition(objC3,ObjMove_GetX(obj),ObjMove_GetY(obj),0);
		ObjRender_SetPosition(objC4,ObjMove_GetX(obj)+bossLookDepth*cos(bossLookAngle),ObjMove_GetY(obj)+bossLookDepth*sin(bossLookAngle),0);
		ObjRender_SetPosition(objC5,ObjRender_GetX(objC4),ObjRender_GetY(objC4),0);
		ObjRender_SetPosition(objC6,ObjRender_GetX(objC4)+10,ObjRender_GetY(objC4)-10,0);
		EnemyMarker(ObjMove_GetX(obj),45);
		yield;	
	}
}

task RenderTazue(objTarget, usePreviousPosition) {
	let OptionX = [];
	let OptionY = [];
		
	let TOTAL_SEGMENTS = GetCommonData("PlayerTazueSegments", 16);
	let MAX_SNAKEDIST = 16;
	let TAZUE_HIND_LEGS_ID = TOTAL_SEGMENTS-8;
	let defaultSegments = [];
	ascent(i in 0..TOTAL_SEGMENTS)
	{
		defaultSegments ~= [-1000];
	}
	ascent(i in 0..TOTAL_SEGMENTS)
	{
		OptionX ~= [usePreviousPosition ? GetCommonData("TazueSegmentsX", defaultSegments)[i] : ObjMove_GetX(objTarget)];
		OptionY ~= [usePreviousPosition ? GetCommonData("TazueSegmentsY", defaultSegments)[i] : ObjMove_GetY(objTarget) - 100*i];
	}
    let D_OptionX = [];
    let D_OptionY = [];

	ascent(i in 0..length(OptionX))
	{
		D_OptionX ~= [OptionX[i]];
		D_OptionY ~= [OptionY[i]];
	}
	let targetX = ObjMove_GetX(objTarget);
	let targetY = ObjMove_GetY(objTarget);

	let dampn = 0.95;
	let traverse = 3;
	RenderTazueSegments(objTarget);
    while (!Obj_IsDeleted(objTarget)) 
	{
		targetX = ObjMove_GetX(objTarget);
		targetY = ObjMove_GetY(objTarget);
		
		D_OptionX[0] = targetX;
		D_OptionY[0] = targetY;
	
		ascent(i in 0..(TOTAL_SEGMENTS)-1)
		{
			let x1 = D_OptionX[i+1];
			let y1 = D_OptionY[i+1];
			
			let x2 = D_OptionX[i];
			let y2 = D_OptionY[i];
			
			let angTo = Get_PointAngle(x1,y1,x2,y2);
			let disTo = Get_Distance(x1,y1,x2,y2);
	
			D_OptionX[i+1] = D_OptionX[i] + MAX_SNAKEDIST * cos(angTo);
			D_OptionY[i+1] = D_OptionY[i] + MAX_SNAKEDIST * sin(angTo);
			
		}
		
		ascent(i in 0..(TOTAL_SEGMENTS))
		{
			OptionX[i]=D_OptionX[i];
			OptionY[i]=D_OptionY[i];
		}
		SetCommonData("TazueSegmentsX", OptionX);
		SetCommonData("TazueSegmentsY", OptionY);
        yield;
    }
	
	
	task RenderTazueSegments(objTarget) {

		ascent(i in 0..length(OptionX)-1)
		{
			DrawOption(i);
		}

		task DrawOption(num)
		{
			let path;
			let scale=1.2;
			let widthScl = 1;
			let rp = 39;
			if(num==0)
			{
				path = IMG_BOSS_TAZUE_HEAD;
				
			}
			else
			{
				path = IMG_BOSS_TAZUE_BODY;
				rp = rp-1;
			}
			if(num==TAZUE_HIND_LEGS_ID)
			{
				path = IMG_BOSS_TAZUE_LEGS;
			}
			if(num > TAZUE_HIND_LEGS_ID)
			{
				widthScl = 1 - 1/(TAZUE_HIND_LEGS_ID + 2)*(num-TAZUE_HIND_LEGS_ID);
			}
			let obj = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(obj, path);	
			Obj_SetRenderPriorityI(obj,rp);
			ObjSprite2D_SetSourceRect(obj, 0, 0, 128, 128);
			ObjSprite2D_SetDestCenter(obj);
			ObjRender_SetTextureFilter(obj, FILTER_POINT,FILTER_POINT,FILTER_POINT);
			ObjRender_SetBlendType(obj, BLEND_ALPHA);
			
			let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(obj2, IMG_BOSS_TAZUE_BODY_BACK);	
			Obj_SetRenderPriorityI(obj2,rp-1);
			ObjSprite2D_SetSourceRect(obj2, 0, 0, 128, 128);
			ObjSprite2D_SetDestCenter(obj2);
			ObjRender_SetTextureFilter(obj2, FILTER_POINT,FILTER_POINT,FILTER_POINT);
			ObjRender_SetBlendType(obj2, BLEND_ALPHA);

			while(!Obj_IsDeleted(objTarget))
			{
				let iniAng = 0;
				
				if(num>0)
				{
					iniAng = Get_PointAngle(OptionX[num-1], OptionY[num-1],OptionX[num], OptionY[num])+180;
					ObjRender_SetPosition(obj, OptionX[num],OptionY[num], 0);
					ObjRender_SetPosition(obj2, OptionX[num],OptionY[num], 0);
				}
				else
				{
					ObjRender_SetPosition(obj, OptionX[num],OptionY[num], 0);
				}
				ObjRender_SetAngleZ(obj, iniAng);
				ObjRender_SetAngleZ(obj2, iniAng);
				ObjRender_SetScaleXYZ(obj,scale,scale*widthScl,1);
				ObjRender_SetScaleXYZ(obj2,scale,scale*widthScl,1);

				ObjRender_SetAlpha(obj,ObjRender_GetAlpha(objTarget));
				ObjRender_SetAlpha(obj2,ObjRender_GetAlpha(objTarget));
				if(num==0)
				{
					ObjRender_SetAlpha(obj2,0);
				}
				yield;
			}
			Obj_Delete(obj);
			Obj_Delete(obj2);
		}
	}
}

task renderGyro(obj,type){

	let wi = 128;
	let he = 128;
	
	let dir;
	let speed;
	let whichway = 1;
	
	let path = [IMG_BOSS_GYRO_BLAST, IMG_BOSS_GYRO_FUNCTION, IMG_BOSS_GYRO_SHRED, IMG_BOSS_GYRO_SNEAK][type%4];
	
	ObjPrim_SetTexture(obj,path);
	ObjSprite2D_SetSourceRect(obj,0,0,wi,he);
	ObjSprite2D_SetDestCenter(obj);
	
	ObjRender_SetAngleXYZ(obj,0,180,0);
	ObjRender_SetTextureFilterMin(obj,FILTER_NONE);
	ObjRender_SetTextureFilterMag(obj,FILTER_NONE);
	ObjRender_SetTextureFilterMip(obj,FILTER_NONE);
	
	ascent(i in 0..3)
	{
		Propellor(360/3*i);
	}
	//ObjRender_SetScaleXYZ(obj,0.5,0.5,0.5);
	
	while(!Obj_IsDeleted(obj)){
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);
		if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		ObjRender_SetAngleXYZ(obj,0,90+90*whichway,0);
		yield;
		
	}
	
	task Propellor(angStart)
	{
		let angSpin = angStart;
		let objProp = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetPrimitiveType(objProp,PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(objProp,16);
		Obj_SetRenderPriorityI(objProp, Obj_GetRenderPriorityI(obj));
		ObjRender_SetColor(objProp, 64,64,96);
		
		let objPropLine = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetPrimitiveType(objPropLine,PRIMITIVE_LINESTRIP);
		ObjPrim_SetVertexCount(objPropLine,16+1);
		Obj_SetRenderPriorityI(objPropLine, Obj_GetRenderPriorityI(obj));
		ObjRender_SetColor(objPropLine,0,0,0);
		//ObjRender_SetScaleXYZ(obj,0.5,0.5,0.5);

		while(!Obj_IsDeleted(obj)){
			dir = ObjMove_GetAngle(obj);
			speed = ObjMove_GetSpeed(obj);
			ObjRender_SetPosition(objProp, ObjMove_GetX(obj), ObjMove_GetY(obj)-30, 0);
			angSpin+=15.2131;
			ascent(i in 0..8)
			{
				let ang2 = angSpin - 10+20/7*i;
				let dis1 = 4;
				let dis2 = 20;
				let cosAng = cos(ang2);
				let sinAng = sin(ang2);
				ObjPrim_SetVertexPosition(objProp,i*2+0,dis1*cosAng*2,dis1*sinAng*0.5,0);
				ObjPrim_SetVertexPosition(objProp,i*2+1,dis2*cosAng*2,dis2*sinAng*0.5,0);
				
				if(i==0)
				{
					ObjPrim_SetVertexPosition(objPropLine,16,dis1*cosAng*2,dis1*sinAng*0.5,0);
				}
				ObjPrim_SetVertexPosition(objPropLine,i,dis1*cosAng*2,dis1*sinAng*0.5,0);
				ObjPrim_SetVertexPosition(objPropLine,15-i,dis2*cosAng*2,dis2*sinAng*0.5,0);
			}
			Obj_SetRenderPriorityI(objProp, Obj_GetRenderPriorityI(obj));
			Obj_SetRenderPriorityI(objPropLine, Obj_GetRenderPriorityI(obj));
			if(sin(angSpin) > 0)
			{
				Obj_SetRenderPriorityI(objProp, Obj_GetRenderPriorityI(obj)-1);
				Obj_SetRenderPriorityI(objPropLine, Obj_GetRenderPriorityI(obj)-1);
			}
			let whichway = 1;
			if(cos(dir) < 0){whichway=-1;}
			else if(cos(dir) > 0){whichway=1;}
		
			ObjRender_SetPosition(objProp, 		round(ObjMove_GetX(obj)+1*whichway), round(ObjMove_GetY(obj)-30), 0);
			ObjRender_SetPosition(objPropLine, 	round(ObjMove_GetX(obj)+1*whichway), round(ObjMove_GetY(obj)-30), 0);
			ObjRender_SetAlpha(objProp, 	ObjRender_GetAlpha(obj));
			ObjRender_SetAlpha(objPropLine, ObjRender_GetAlpha(obj));
			yield;
			
		}
		Obj_Delete(objProp);
		Obj_Delete(objPropLine);
	}
	
}

task renderBossUnanimated(obj, path, tiltAmount){
	
	let wi = path == IMG_BOSS_REDRIN ? 256 : 128;
	let he = 128;
	let dir;
	let speed;
	let whichway = 1;
	let angMove = 0;
	
	ObjPrim_SetTexture(obj,path);
	ObjSprite2D_SetSourceRect(obj,0,0,wi,he);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj,1,1,0);
	Obj_SetRenderPriorityI(obj,39);
	ObjRender_SetTextureFilterMin(obj,FILTER_NONE);
	ObjRender_SetTextureFilterMag(obj,FILTER_NONE);
	ObjRender_SetTextureFilterMip(obj,FILTER_NONE);
	
	while(!Obj_IsDeleted(obj)){
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);
		
		if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		
		let targetAng = 0;
		if(speed!=0)
		{
			if(whichway == 1)
			{
				targetAng = tiltAmount;
			}
			else if(whichway == -1)
			{
				targetAng = -tiltAmount;
			}
		}
		angMove = angMove * 0.9 + targetAng * 0.1;
		
		ObjRender_SetAngleZ(obj, angMove);
		
		Obj_SetValue(obj, "isHittable", ObjRender_GetAlpha(obj) > 0 ? true : false);
		
		
		EnemyMarker(ObjMove_GetX(obj),45);
		yield;	
	}
}


let ShowMarker = true;

task renderNitoriDS(obj){

	let wi = 64;
	let he = 80;
	
	let dir;
	let speed;
	let whichway = 0;
	let frame = 0;
	let idleframe = 0;
	let castframe = 0;
	Obj_SetValue(obj,"cast",0);
	ObjPrim_SetTexture(obj,IMG_NITORI_SPRITE);
	ObjSprite2D_SetSourceRect(obj,0,0,wi,he);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj,1,1,0);
	ObjRender_SetAngleXYZ(obj,0,180,0);
	Obj_SetRenderPriorityI(obj,39);
	while(!Obj_IsDeleted(obj)){
		
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);

		if(speed == 0 && frame > 0){whichway = -1;}
		else if(speed == 0 && frame < 0){whichway = 1;}
		else if(speed == 0 && frame == 0){whichway = 0;}

		else if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		
		if(Obj_GetValueD(obj,"cast",0) == 0 && speed == 0 && frame == 0){

			castframe = 0;
			if(idleframe >= 0 && idleframe < 10){ObjSprite2D_SetSourceRect(obj,0,0,wi,he);}
			else if(idleframe >= 10 && idleframe < 20){ObjSprite2D_SetSourceRect(obj,wi,0,wi*2,he);}
			else if(idleframe >= 20 && idleframe < 30){ObjSprite2D_SetSourceRect(obj,wi*2,0,wi*3,he);}
			else if(idleframe >= 30 && idleframe < 40){ObjSprite2D_SetSourceRect(obj,wi*3,0,wi*4,he);}
			
			if(idleframe < 40){idleframe++;}
			else if(idleframe == 40){idleframe=0;}
			
		}
		
		else if(Obj_GetValueD(obj,"cast",0) == 1 && speed == 0 && frame == 0){
			
			idleframe=0;
			frame=0;
			if(castframe >= 0 && castframe < 8){ObjSprite2D_SetSourceRect(obj,0,he*2,wi,he*3);}
			if(castframe >= 8 && castframe < 16){ObjSprite2D_SetSourceRect(obj,wi,he*2,wi*2,he*3);}
			if(castframe >= 16 && castframe < 24){ObjSprite2D_SetSourceRect(obj,wi*2,he*2,wi*3,he*3);}
			if(castframe >= 24 && castframe < 25){ObjSprite2D_SetSourceRect(obj,wi*3,he*2,wi*4,he*3);}
			if(castframe < 25){castframe++;}
		}

		else if(speed != 0 || frame != 0){
		
			if(frame < 0 && frame >= -8){ObjSprite2D_SetSourceRect(obj,0,he,wi,he*2); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -8 && frame >= -16){ObjSprite2D_SetSourceRect(obj,wi,he,wi*2,he*2); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -16 && frame >= -24){ObjSprite2D_SetSourceRect(obj,wi*2,he,wi*3,he*2); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -24 && frame >= -25){ObjSprite2D_SetSourceRect(obj,wi*3,he,wi*4,he*2); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame > 0 && frame <= 8){ObjSprite2D_SetSourceRect(obj,0,he,wi,he*2); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 8 && frame <= 16){ObjSprite2D_SetSourceRect(obj,wi,he,wi*2,he*2); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 16 && frame <= 24){ObjSprite2D_SetSourceRect(obj,wi*2,he,wi*3,he*2); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 24 && frame <= 25){ObjSprite2D_SetSourceRect(obj,wi*3,he,wi*4,he*2); ObjRender_SetAngleXYZ(obj,0,0,0);}
			idleframe=0;
			castframe=0;
			
		}
		EnemyMarker(ObjMove_GetX(obj),45);
		frame=frame+whichway;
		if(frame > 25){frame=25;}
		if(frame < -25){frame=-25;}
		Obj_SetValue(obj, "isHittable", ObjRender_GetAlpha(obj) > 0 ? true : false);
		
		yield;
		
	}
	
}

task renderYuuma(obj)
{
	let wi = 80;
	let he = 72;
	
	let dir;
	let speed;
	let whichway = 0;
	let frame = 0;
	let idleframe = 0;
	let castframe = 0;
	Obj_SetValue(obj,"phase",0);

	ObjPrim_SetTexture(obj,IMG_YUUMA);

	ObjSprite2D_SetSourceRect(obj,0+wi*0,  0,0+wi*(0+1),he);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj,1,1,0);
	
	Obj_SetRenderPriorityI(obj,39);
	ObjRender_SetTextureFilterMin(obj,FILTER_NONE);
	ObjRender_SetTextureFilterMag(obj,FILTER_NONE);
	ObjRender_SetTextureFilterMip(obj,FILTER_NONE);
	
	let frameSpeed = 5;
	let castframe2 = 0;
	while(!Obj_IsDeleted(obj))
	{
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);
		
		if(speed == 0 && frame > 0){whichway = -1;}
		else if(speed == 0 && frame < 0){whichway = 1;}
		else if(speed == 0 && frame == 0){whichway = 0;}

		else if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		
		frameSpeed = 5;
		if(Obj_GetValueD(obj,"cast",0) == 0 && speed == 0 && frame == 0)
		{
			ObjRender_SetScaleXYZ(obj,1,1,0);
			castframe = 0;
			castframe2 = 0;
			let spriteX = floor(idleframe/frameSpeed)%8;
			ObjSprite2D_SetSourceRect(		 obj,0+wi*spriteX,   he*0,0+wi*(spriteX+1),he);
			idleframe++;
		}
		else if(Obj_GetValueD(obj,"cast",0) == 1 && speed == 0 && frame == 0)
		{
			frameSpeed = 3;
			idleframe=0;
			castframe2 = 0;
			frame=0;
			let spriteX = floor(castframe/5)%2;
			ObjSprite2D_SetSourceRect(		 obj,0+112*spriteX,   he*4,0+112*(spriteX+1),he*4+106-1);
			castframe++;
		}
		else if(Obj_GetValueD(obj,"cast",0) == 2 && speed == 0 && frame == 0)
		{
			castframe = 0;
			frameSpeed = 3;
			idleframe=0;
			frame=0;
			let spriteX = floor(castframe2/frameSpeed)+2;
			ObjSprite2D_SetSourceRect(		 obj,0+112*spriteX,   he*4,0+112*(spriteX+1),he*4+106-1);
			castframe2 = min(castframe2 + 1, frameSpeed*2);
			
		}
		else if(speed != 0 || frame != 0)
		{
			ObjRender_SetScaleXYZ(obj,1,1,0);
			if(frame<0)
			{
				let framer = absolute(frame);
				let spriteX = 4-floor(framer/frameSpeed);
				ObjSprite2D_SetSourceRect(		 obj,0+wi*spriteX,   he*1,0+wi*(spriteX+1),he*2);
			}
			if(frame>0)
			{
				let framer = absolute(frame);
				let spriteX = 4-floor(framer/frameSpeed);
				ObjSprite2D_SetSourceRect(		 obj,0+wi*spriteX,   he*2,0+wi*(spriteX+1),he*3);
			}
			idleframe=0;
			castframe = 0;
			castframe2 = 0;
		}
		ObjSprite2D_SetDestCenter(obj);
		if(ShowMarker)
		{
			EnemyMarker(ObjMove_GetX(obj),45);
		}
		frame=frame+whichway;
		if(frame > frameSpeed*2){frame=frameSpeed*2;}
		if(frame < -frameSpeed*2){frame=-frameSpeed*2;}
		Obj_SetValue(obj, "isHittable", ObjRender_GetAlpha(obj) > 0 ? true : false);
		
		yield;
		
	}
}

function CreateFamiliar
{
	let Enemy=ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(Enemy);
	Targeting(Enemy);
	return(Enemy);
	
	task Targeting(BaseObj)
	{
		while(!Obj_IsDeleted(BaseObj))
		{
			ObjEnemy_SetIntersectionCircleToShot(BaseObj,ObjMove_GetX(BaseObj),ObjMove_GetY(BaseObj),0);
			//ObjEnemy_SetIntersectionCircleToPlayer(BaseObj,ObjMove_GetX(BaseObj),ObjMove_GetY(BaseObj),0);
			yield;
		}
	}
}
function Ghost(x, y, type, killtime,scale)
{
    let angle=0;
    let k=1;
    let obj=CreateFamiliar;
    ObjMove_SetPosition(obj, x, y);
    ObjMove_SetDestAtWeight(obj, x, y, 10, 3);
    ObjPrim_SetTexture(obj, IMG_GHOSTORIN);
    ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
    ObjRender_SetScaleXYZ(obj, scale*1.3, scale*1.3, 0);
	Obj_SetRenderPriorityI(obj,52);
	ObjRender_SetAlpha(obj,255);
	
    Animation;
    return(obj);
    task Animation
    {
        let t=0;
        let m=32;
        let s=1;
		let ammm = 0;
		let cKill = 0;
        if (killtime>0)
        {
			while(!Obj_IsDeleted(obj)&&cKill<killtime)
            {
				if(ammm%3==0&&!Obj_IsDeleted(obj))
				{
					GhostlyTrail;
				}
				ammm++;
                t+=s;
				cKill++;
                if (t>67)
                {
					s*=-1;
                }
                ObjSprite2D_SetSourceRect(obj, t*m, type*m, (t+1)*m, (type+1)*m);
                ObjSprite2D_SetDestCenter(obj);
				if(!Obj_IsDeleted(obj))
				{
					wait(4);
				}
				else
				{
					 Obj_Delete(obj);
				}
			}
           
        }
        else
        {
			while(!Obj_IsDeleted(obj))
            {
                if(ammm%3==0&&!Obj_IsDeleted(obj))
				{
					GhostlyTrail;
				}
				ammm++;
                t+=s;
                if (t>67)
                {
					s*=-1;
                }

                ObjSprite2D_SetSourceRect(obj, t*m, type*m, (t+1)*m, (type+1)*m);
                ObjSprite2D_SetDestCenter(obj);
				if(!Obj_IsDeleted(obj))
				{
					wait(4);
				}
				else
				{
					 Obj_Delete(obj);
				}
			}
            Obj_Delete(obj);
        }
    }
    task GhostlyTrail
    {
        let x=ObjMove_GetX(obj)+rand(-2,2);
        let y=ObjMove_GetY(obj)+rand(-2,2);
        let trail=ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(trail, IMG_GHOSTORIN);
        ObjRender_SetBlendType(trail, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(trail,52);
        let s=scale*0.9;
        let st=1;
        let m=32;
        let t=0;
		ObjRender_SetAlpha(trail,128);
        loop(30)
        {
			if(!Obj_IsDeleted(obj))
			{
				t+=st;
				if (t>6)
				{
					st*=-1;
				}
				s-=(scale*0.9)/30;
				ObjSprite2D_SetSourceRect(trail, t*m, type*m, (t+1)*m, (type+1)*m);
				ObjSprite2D_SetDestCenter(trail);
				y-=1*scale;
				ObjRender_SetScaleXYZ(trail, s, s, 0);
				ObjRender_SetPosition(trail, x, y, 0);
				yield;
			}
        }
        Obj_Delete(trail);
    }
}

task renderGrannyGoreF(obj,type){

	let wi = 96/2;
	let he = 64/2;
	
	let dir;
	let speed;
	let whichway = 0;
	let frame = 0;
	let idleframe = 0;
	let turnframe = 0;
	let ph = 0;
	if(type == 1){ph=0;}
	if(type == 2){ph=he*3;}

	ObjPrim_SetTexture(obj,IMG_GORE_FAIRY);
	ObjSprite2D_SetSourceRect(obj,0,0,wi,he);
	ObjSprite2D_SetDestCenter(obj);
	//ObjRender_SetScaleXYZ(obj,0.5,0.5,0);
	ObjRender_SetAngleXYZ(obj,0,180,0);
	
	while(!Obj_IsDeleted(obj)){
		
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);

		if(speed == 0 && frame > 0){whichway = -1;}
		else if(speed == 0 && frame < 0){whichway = 1;}
		else if(speed == 0 && frame == 0){whichway = 0;}

		else if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		
		if(speed == 0 && frame == 0){

			turnframe = 0;
			if(idleframe >= 0 && idleframe < 10){ObjSprite2D_SetSourceRect(obj,0,ph,wi,he+ph);}
			else if(idleframe >= 10 && idleframe < 20){ObjSprite2D_SetSourceRect(obj,wi,ph,wi*2,he+ph);}
			else if(idleframe >= 20 && idleframe < 30){ObjSprite2D_SetSourceRect(obj,wi*2,ph,wi*3,he+ph);}
			else if(idleframe >= 30 && idleframe < 40){ObjSprite2D_SetSourceRect(obj,wi*3,ph,wi*4,he+ph);}
			
			if(idleframe < 40){idleframe++;}
			else if(idleframe == 40){idleframe=0;}
			
		}

		if(speed != 0 || frame != 0){
		
			if(frame < 0 && frame >= -10){ObjSprite2D_SetSourceRect(obj,0,he+ph,wi,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -10 && frame >= -20){ObjSprite2D_SetSourceRect(obj,wi,he+ph,wi*2,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -20 && frame >= -30){ObjSprite2D_SetSourceRect(obj,wi*2,he+ph,wi*3,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame == -30){ObjSprite2D_SetSourceRect(obj,wi*3,he+ph,wi*4,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame > 0 && frame <= 10){ObjSprite2D_SetSourceRect(obj,0,he+ph,wi,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 10 && frame <= 20){ObjSprite2D_SetSourceRect(obj,wi,he+ph,wi*2,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 20 && frame <= 30){ObjSprite2D_SetSourceRect(obj,wi*2,he+ph,wi*3,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame == 30){ObjSprite2D_SetSourceRect(obj,wi*3,he+ph,wi*4,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			idleframe=0;
			
		}
		
		if(frame == 35 || frame == -35){
			
			if(turnframe > 0 && turnframe <= 10){ObjSprite2D_SetSourceRect(obj,0,he*2+ph,wi,he*3+ph);}
			if(turnframe > 10 && turnframe <= 20){ObjSprite2D_SetSourceRect(obj,wi,he*2+ph,wi*2,he*3+ph);}
			if(turnframe > 20 && turnframe <= 30){ObjSprite2D_SetSourceRect(obj,wi*2,he*2+ph,wi*3,he*3+ph);}
			if(turnframe > 30 && turnframe <= 40){ObjSprite2D_SetSourceRect(obj,wi*3,he*2+ph,wi*4,he*3+ph);}
			if(turnframe < 40){turnframe++;}
			else if(turnframe == 40){turnframe=0;}
			
		}
		
		frame=frame+whichway;
		if(frame > 35){frame=35;}
		if(frame < -35){frame=-35;}
		yield;
		
	}
	
}

task renderRedheadGoreF(obj,type){

	let wi = 96/2;
	let he = 96/2;
	
	let dir;
	let speed;
	let whichway = 0;
	let frame = 0;
	let idleframe = 0;
	let turnframe = 0;
	let back = 1024/2-(wi*4);
	let ph = 0;
	if(type == 1){ph=0;}
	if(type == 2){ph=he*3;}

	ObjPrim_SetTexture(obj,IMG_GORE_FAIRY);
	ObjSprite2D_SetSourceRect(obj,0,0,wi,he);
	ObjSprite2D_SetDestCenter(obj);
	//ObjRender_SetScaleXYZ(obj,0.5,0.5,0);
	ObjRender_SetAngleXYZ(obj,0,180,0);
	
	while(!Obj_IsDeleted(obj)){
		
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);

		if(speed == 0 && frame > 0){whichway = -1;}
		else if(speed == 0 && frame < 0){whichway = 1;}
		else if(speed == 0 && frame == 0){whichway = 0;}

		else if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		
		if(speed == 0 && frame == 0){

			turnframe = 0;
			if(idleframe >= 0 && idleframe < 10){ObjSprite2D_SetSourceRect(obj,back,ph,back+wi,he+ph);}
			else if(idleframe >= 10 && idleframe < 20){ObjSprite2D_SetSourceRect(obj,back+wi,ph,back+wi*2,he+ph);}
			else if(idleframe >= 20 && idleframe < 30){ObjSprite2D_SetSourceRect(obj,back+wi*2,ph,back+wi*3,he+ph);}
			else if(idleframe >= 30 && idleframe < 40){ObjSprite2D_SetSourceRect(obj,back+wi*3,ph,back+wi*4,he+ph);}
			
			if(idleframe < 40){idleframe++;}
			else if(idleframe == 40){idleframe=0;}
			
		}

		if(speed != 0 || frame != 0){
		
			if(frame < 0 && frame >= -10){ObjSprite2D_SetSourceRect(obj,back,he+ph,back+wi,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -10 && frame >= -20){ObjSprite2D_SetSourceRect(obj,back+wi,he+ph,back+wi*2,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -20 && frame >= -30){ObjSprite2D_SetSourceRect(obj,back+wi*2,he+ph,back+wi*3,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame == -30){ObjSprite2D_SetSourceRect(obj,back+wi*3,he+ph,back+wi*4,he*2+ph); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame > 0 && frame <= 10){ObjSprite2D_SetSourceRect(obj,back,he+ph,back+wi,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 10 && frame <= 20){ObjSprite2D_SetSourceRect(obj,back+wi,he+ph,back+wi*2,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 20 && frame <= 30){ObjSprite2D_SetSourceRect(obj,back+wi*2,he+ph,back+wi*3,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame == 30){ObjSprite2D_SetSourceRect(obj,back+wi*3,he+ph,back+wi*4,he*2+ph); ObjRender_SetAngleXYZ(obj,0,0,0);}
			idleframe=0;
			
		}
		
		if(frame == 35 || frame == -35){
			
			if(turnframe > 0 && turnframe <= 10){ObjSprite2D_SetSourceRect(obj,back,he*2+ph,back+wi,he*3+ph);}
			if(turnframe > 10 && turnframe <= 20){ObjSprite2D_SetSourceRect(obj,back+wi,he*2+ph,back+wi*2,he*3+ph);}
			if(turnframe > 20 && turnframe <= 30){ObjSprite2D_SetSourceRect(obj,back+wi*2,he*2+ph,back+wi*3,he*3+ph);}
			if(turnframe > 30 && turnframe <= 40){ObjSprite2D_SetSourceRect(obj,back+wi*3,he*2+ph,back+wi*4,he*3+ph);}
			if(turnframe < 40){turnframe++;}
			else if(turnframe == 40){turnframe=0;}
			
		}
		
		frame=frame+whichway;
		if(frame > 35){frame=35;}
		if(frame < -35){frame=-35;}
		yield;
		
	}
	
}

task renderSunflowerGoreF(obj){

	let wi = 128/2;
	let he = 128/2;
	
	let dir;
	let speed;
	let whichway = 0;
	let frame = 0;
	let idleframe = 0;
	let turnframe = 0;
	let bm = 1024/2-he;

	ObjPrim_SetTexture(obj,IMG_GORE_FAIRY);
	ObjSprite2D_SetSourceRect(obj,0,0,wi,he);
	ObjSprite2D_SetDestCenter(obj);

	ObjRender_SetAngleXYZ(obj,0,180,0);
	//ObjRender_SetScaleXYZ(obj,0.5,0.5,0.5);	
	while(!Obj_IsDeleted(obj)){
		
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);

		if(speed == 0 && frame > 0){whichway = -1;}
		else if(speed == 0 && frame < 0){whichway = 1;}
		else if(speed == 0 && frame == 0){whichway = 0;}

		else if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		
		if(speed == 0 && frame == 0){

			turnframe = 0;
			if(idleframe >= 0 && idleframe < 10){ObjSprite2D_SetSourceRect(obj,0,bm,wi,he+bm);}
			else if(idleframe >= 10 && idleframe < 20){ObjSprite2D_SetSourceRect(obj,wi,bm,wi*2,he+bm);}
			else if(idleframe >= 20 && idleframe < 30){ObjSprite2D_SetSourceRect(obj,wi*2,bm,wi*3,he+bm);}
			else if(idleframe >= 30 && idleframe < 40){ObjSprite2D_SetSourceRect(obj,wi*3,bm,wi*4,he+bm);}
			else if(idleframe >= 40 && idleframe < 50){ObjSprite2D_SetSourceRect(obj,wi*4,bm,wi*5,he+bm);}

		
			if(idleframe < 50){idleframe++;}
			else if(idleframe == 50){idleframe=0;}
			
		}

		if(speed != 0 || frame != 0){
		
			if(frame < 0 && frame >= -10){ObjSprite2D_SetSourceRect(obj,wi*4,bm,wi*5,he+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -10 && frame >= -20){ObjSprite2D_SetSourceRect(obj,wi*5,bm,wi*6,he+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -20 && frame >= -30){ObjSprite2D_SetSourceRect(obj,wi*6,bm,wi*7,he+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame == -30){ObjSprite2D_SetSourceRect(obj,wi*7,bm,wi*8,he+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame > 0 && frame <= 10){ObjSprite2D_SetSourceRect(obj,wi*4,bm,wi*5,he+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 10 && frame <= 20){ObjSprite2D_SetSourceRect(obj,wi*5,bm,wi*6,he+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 20 && frame <= 30){ObjSprite2D_SetSourceRect(obj,wi*6,bm,wi*7,he+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame == 30){ObjSprite2D_SetSourceRect(obj,wi*7,bm,wi*8,he+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			idleframe=0;
			
		}
		
		if(frame == 35 || frame == -35){
			
			if(turnframe > 0 && turnframe <= 10){ObjSprite2D_SetSourceRect(obj,wi*6,bm-he*2,wi*7,bm-he);}
			if(turnframe > 10 && turnframe <= 20){ObjSprite2D_SetSourceRect(obj,wi*7,bm-he*2,wi*8,bm-he);}
			if(turnframe > 20 && turnframe <= 30){ObjSprite2D_SetSourceRect(obj,wi*6,bm-he,wi*7,bm);}
			if(turnframe > 30 && turnframe <= 40){ObjSprite2D_SetSourceRect(obj,wi*7,bm-he,wi*8,bm);}
			if(turnframe < 40){turnframe++;}
			else if(turnframe == 40){turnframe=0;}
			
		}
		
		frame=frame+whichway;
		if(frame > 35){frame=35;}
		if(frame < -35){frame=-35;}
		yield;
		
	}
	
}

task renderTinyGoreF(obj,type){

	let wi = 64/2;
	let he = 64/2;
	
	let dir;
	let speed;
	let whichway = 0;
	let frame = 0;
	let idleframe = 0;
	let turnframe = 0;
	let bm = 1024/2-128/2-(he*1);
	let ph = 0;
	if(type == 1){ph=0;}
	if(type == 2){ph=he;}
	if(type == 3){ph=he*2;}
	if(type == 4){ph=he*3;}
	if(type == 5){ph=he*4;}

	ObjPrim_SetTexture(obj,IMG_GORE_FAIRY);
	ObjSprite2D_SetSourceRect(obj,0,0,wi,he);
	ObjSprite2D_SetDestCenter(obj);
	
	ObjRender_SetAngleXYZ(obj,0,180,0);
	
	//ObjRender_SetScaleXYZ(obj,0.5,0.5,0.5);
	while(!Obj_IsDeleted(obj)){
		
		dir = ObjMove_GetAngle(obj);
		speed = ObjMove_GetSpeed(obj);

		if(speed == 0 && frame > 0){whichway = -1;}
		else if(speed == 0 && frame < 0){whichway = 1;}
		else if(speed == 0 && frame == 0){whichway = 0;}

		else if(cos(dir) < 0){whichway=-1;}
		else if(cos(dir) > 0){whichway=1;}
		
		if(speed == 0 && frame == 0){

			turnframe = 0;
			if(idleframe >= 0 && idleframe < 10){ObjSprite2D_SetSourceRect(obj,0,bm+ph,wi,he+ph+bm);}
			else if(idleframe >= 10 && idleframe < 20){ObjSprite2D_SetSourceRect(obj,wi,bm+ph,wi*2,he+ph+bm);}
			else if(idleframe >= 20 && idleframe < 30){ObjSprite2D_SetSourceRect(obj,wi*2,bm+ph,wi*3,he+ph+bm);}
			else if(idleframe >= 30 && idleframe < 40){ObjSprite2D_SetSourceRect(obj,wi*3,bm+ph,wi*4,he+ph+bm);}
			
			if(idleframe < 40){idleframe+=1;}
			else if(idleframe == 40){idleframe=0;}
			
		}

		if(speed != 0 || frame != 0){
		
			if(frame < 0 && frame >= -10){ObjSprite2D_SetSourceRect(obj,wi*4,bm+ph,wi*5,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -10 && frame >= -20){ObjSprite2D_SetSourceRect(obj,wi*5,bm+ph,wi*6,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame < -20 && frame >= -30){ObjSprite2D_SetSourceRect(obj,wi*6,bm+ph,wi*7,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame == -30){ObjSprite2D_SetSourceRect(obj,wi*7,bm+ph,wi*8,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,180,0);}
			if(frame > 0 && frame <= 10){ObjSprite2D_SetSourceRect(obj,wi*4,bm+ph,wi*5,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 10 && frame <= 20){ObjSprite2D_SetSourceRect(obj,wi*5,bm+ph,wi*6,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame > 20 && frame <= 30){ObjSprite2D_SetSourceRect(obj,wi*6,bm+ph,wi*7,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			if(frame == 30){ObjSprite2D_SetSourceRect(obj,wi*7,bm+ph,wi*8,he+ph+bm); ObjRender_SetAngleXYZ(obj,0,0,0);}
			idleframe=0;
			
		}
		
		if(frame == 35 || frame == -35){
			
			if(turnframe > 0 && turnframe <= 10){ObjSprite2D_SetSourceRect(obj,wi*8,bm+ph,wi*9,he+ph+bm);}
			if(turnframe > 10 && turnframe <= 20){ObjSprite2D_SetSourceRect(obj,wi*9,bm+ph,wi*10,he+ph+bm);}
			if(turnframe > 20 && turnframe <= 30){ObjSprite2D_SetSourceRect(obj,wi*10,bm+ph,wi*11,he+ph+bm);}
			if(turnframe > 30 && turnframe <= 40){ObjSprite2D_SetSourceRect(obj,wi*11,bm+ph,wi*12,he+ph+bm);}
			if(turnframe < 40){turnframe+=1;}
			else if(turnframe == 40){turnframe=0;}
			
		}
		
		frame=frame+whichway;
		if(frame > 35){frame=35;}
		if(frame < -35){frame=-35;}
		yield;
		
	}
	
}

