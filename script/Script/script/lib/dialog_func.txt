let RP = 10;
let IMG_DIALOGBOX = GetCurrentScriptDirectory~"./../../img/talk/diabox.png";
function randLR
{
	let bitn = round(rand(0,1));
	if(bitn==0){bitn=-1;}
	return bitn;
}
let dialogue_text = "";
let widthGl = 0;
let speakerColor = [0,0,0];

let playerobjects = [];
let enemyobjects = [];

let playereyesobjects = [];
let enemyeyesobjects = [];

let playermouthobjects = [];
let enemymouthobjects = [];

let playerfaceoffsets = []; //coordinate offsets for player potraits
let enemyfaceoffsets = []; //coordinate offsets for enemy potraits 

let portrait_player = [];
let portrait_enemy = [];

let player_yRot = [];
let enemy_yRot = [];

let playeroffsets = []; //coordinate offsets for player potraits
let enemyoffsets = []; //coordinate offsets for enemy potraits

let playerscales = []; //scales for player potraits
let enemyscales = []; //scales for enemy potraits

const DEFAULT_DIALOGUE_TEXTSIZE = 16;
let textSize = 16;

let voiceVolume = 55;
function SetDialogueTextSize(t)
{
	textSize = t;
}

let isSkippable = true;

function SetDialogueSkippable(t)
{
	isSkippable = t;
}

let isAutoContinue = false;

function SetDialogueAutoContinue(t)
{
	isAutoContinue = t;
}

let autoContinueWait = 0;

function SetDialogueAutoContinueWait(t)
{
	autoContinueWait = t;
}

function SetPortraitNumber(numplayer, numenemy)
{
	ascent(i in 0 .. numplayer)
	{
		let obj = CreatePortrait;
		playerobjects = playerobjects ~ [obj];
		
		let obje = CreatePortrait;
		playereyesobjects = playereyesobjects ~ [obje];
		
		let objm = CreatePortrait;
		playermouthobjects = playermouthobjects ~ [objm];
		
		playerscales = playerscales ~ [1];
		playeroffsets = playeroffsets ~ [[0, 0]];
		playerfaceoffsets = playerfaceoffsets ~ [[0, 0]];
		player_yRot = player_yRot ~ [0];
	}
	ascent(i in 0 .. numenemy){
		let obj = CreatePortrait;
		enemyobjects = enemyobjects ~ [obj];
		
		let obje = CreatePortrait;
		enemyeyesobjects = enemyeyesobjects ~ [obje];
		
		let objm = CreatePortrait;
		enemymouthobjects = enemymouthobjects ~ [objm];
		
		enemyscales = enemyscales ~ [1];
		enemyoffsets = enemyoffsets ~ [[0, 0]];
		enemyfaceoffsets = enemyfaceoffsets ~ [[0, 0]];
		enemy_yRot = enemy_yRot ~ [0];
	}

	ascent(i in 0 .. numplayer){
		let path = "";
		portrait_player = portrait_player ~ [path];
	}
	ascent(i in 0 .. numenemy){
		let path = "";
		portrait_enemy = portrait_enemy ~ [path];
	}
}
function CreatePortrait
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, "");
	ObjSprite2D_SetSourceRect(obj, 0, 0, GetTextureWidth(""), GetTextureHeight(""));
	ObjSprite2D_SetDestCenter(obj);
	//ObjRender_SetScaleXYZ(obj, 0.5, 0.5, 0);
	Obj_SetRenderPriorityI(obj, 75+RP);
	return obj;
}

task StartDialog()
{
	StartDialog(false);
}

task StartDialog(isNameless)
{
	SetDialogueTextSize(DEFAULT_DIALOGUE_TEXTSIZE);
	let y = GetScreenHeight - 50;
	let width = 240/2;
	widthGl = width+185;
	let dialogBoxObj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(dialogBoxObj, IMG_TALK_BOX);
	ObjSprite2D_SetSourceRect(dialogBoxObj,0, 0, 1024, 1024);
	ObjSprite2D_SetDestRect(dialogBoxObj,0, 0, 1024, 1024);
	ObjSprite2D_SetDestCenter(dialogBoxObj);
	Obj_SetRenderPriorityI(dialogBoxObj, 75+RP);
	//ObjRender_SetBlendType(dialogBoxObj, BLEND_SUBTRACT);
	ObjRender_SetPosition(dialogBoxObj, GetScreenWidth/2, GetScreenHeight/2, 0);
	
	let objArrows = [];
	ascent(i in 0..2)
	{
		let objArrow = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objArrow, [IMG_TALK_NAMEARROW_BOTTOM, IMG_TALK_NAMEARROW_TOP][i]);
		ObjSprite2D_SetSourceRect(objArrow,0, 0, 1024, 512);
		ObjSprite2D_SetDestRect(objArrow,0, 0, 1024, 512);
		ObjSprite2D_SetDestCenter(objArrow);
		Obj_SetRenderPriorityI(objArrow, 76+RP);
		ObjRender_SetPosition(objArrow, GetScreenWidth/2, GetScreenHeight/2, 0);
		if(i==0)
		{
			ObjRender_SetColor(objArrow, speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		}
		objArrows ~= [objArrow];
	}
	let timeTotal = 30;
	ascent(t in 0 .. timeTotal+1)
	{
		let a = 255/timeTotal*t;
		ObjRender_SetAlpha(dialogBoxObj, a*0.85);
		ascent(i in 0..2)
		{
			ObjRender_SetAlpha(objArrows[i], isNameless ? 0 : a);
		}
		ObjRender_SetColor(objArrows[0], speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		yield;
	}
	while(GetCommonData("IsDialogueSequenceActive", true)==true)
	{
		ObjRender_SetColor(objArrows[0], speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		yield;
	}
	timeTotal = 30;
	descent(t in 0 .. timeTotal+1)
	{	
		let a = 255/timeTotal*t;
		ObjRender_SetAlpha(dialogBoxObj, a*0.85);
		ascent(i in 0..2)
		{
			ObjRender_SetAlpha(objArrows[i], isNameless ? 0 : a);
		}
		ObjRender_SetColor(objArrows[0], speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		yield;
	}
	Obj_Delete(dialogBoxObj);
	ascent(i in 0..2)
	{
		Obj_Delete(objArrows[i]);
	}
}

task SE_PlayTalkSound(s, p)
{
	let soundType = GetCommonData("TalkSound", 0);
	let vMult = 1;
	if(soundType == 1)
	{
		s = TALK_DEFAULT;
		
	}
	if(soundType == 2)
	{
		vMult = 0;
	}
	SE_PlayLen(s, voiceVolume * vMult, p);
}

function SetDialogueTextA2(	speaker, text, color , spkP, spkE, imgS, imgE, imgM, iS, xm, ym,textScrollSound)
{ //event will advance only upon button press
	SetDialogueTextA3(		speaker, text, color , spkP, spkE, imgS, imgE, imgM, iS, xm, ym,textScrollSound, 1, 0, 2);
}
function SetDialogueTextA3(	speaker, text, color , spkP, spkE, imgS, imgE, imgM, iS, xm, ym,textScrollSound, basePitch, randPitchRange, textDelay)
{ 
	SetDialogueTextA4(		speaker, text, color , spkP, spkE, imgS, imgE, imgM, iS, xm, ym,textScrollSound, basePitch, randPitchRange, textDelay, 1);
}

function SetDialogueTextA4(speaker, text, color , spkP, spkE, imgS, imgE, imgM, iS, xm, ym,textScrollSound, basePitch, randPitchRange, textDelay, yFlip)
{ //added pitch changing
	let y = GetScreenHeight - 48*2;
	SetSpeaker(spkP,spkE);
	
	if(spkP>=0&&spkE>=0)
	{
	}
	else if(spkP>=0)
	{
		SetNewPlayerPort(imgS, imgE, imgM[0], iS, xm, ym, 0, -1, yFlip);
	}
	else if(spkE>=0)
	{
		SetNewEnemyPort(imgS, imgE, imgM[0], iS, xm, ym, 0, -1, yFlip);
	}

	dialogue_text = text;
	
	let newCol = [(color[0]), (color[1]), (color[2])];
	
	
	let obj = ObjText_Create();
	ObjText_SetFontType(obj, "Lucida Fax Demibold");
	ObjText_SetFontSize(obj, textSize);
	ObjText_SetFontColorTop(obj, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(obj, 255,255,255);	
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	ObjText_SetLinePitch(obj, 7);
	ObjText_SetMaxWidth(obj, widthGl*2-20);
	Obj_SetRenderPriorityI(obj, 76+RP);
	ObjRender_SetPosition(obj, GetScreenWidth/2-widthGl+10, y+8, 0);

	let objName = ObjText_Create();
	ObjText_SetFontType(objName, "Lucida Fax Demibold");
	ObjText_SetFontSize(objName, 22);
	ObjText_SetFontColorTop(objName, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(objName, 255,255,255);	
	ObjText_SetFontBorderType(objName, BORDER_FULL);
	ObjText_SetFontBorderWidth(objName, 1);
	ObjText_SetFontBorderColor(objName, 0, 0, 0);
	ObjText_SetLinePitch(objName, 7);
	ObjText_SetMaxWidth(objName, widthGl*2);
	Obj_SetRenderPriorityI(objName, 76+RP);
	ObjRender_SetPosition(objName, GetScreenWidth/2-widthGl+32+8, y-24, 0);
	ObjText_SetText(objName, speaker);
	
	let stringThing = SplitString(text,"|");
	let scrollT = [];
	let c = 0;
	let textSkips = false;
	ascent(j in 0..length(stringThing))
	{
		ascent(i in 0..length(stringThing[j]))
		{
			let modiWait = 1;
			scrollT = scrollT ~ [stringThing[j][i]];
			if([stringThing[j][i]]==" " || [stringThing[j][i]]==")" || [stringThing[j][i]]=="(")
			{
				
			}
			else if([stringThing[j][i]]=="." || [stringThing[j][i]]=="!" || [stringThing[j][i]]=="!")
			{
				SE_PlayTalkSound(textScrollSound, basePitch + rand(-randPitchRange, randPitchRange));
				modiWait = 12;
			}
			else if([stringThing[j][i]]==",")
			{
				SE_PlayTalkSound(textScrollSound, basePitch + rand(-randPitchRange, randPitchRange));
				modiWait = 6;
			}
			else
			{
				SE_PlayTalkSound(textScrollSound, basePitch + rand(-randPitchRange, randPitchRange));
			}
			if([stringThing[j][i]]=="&" && [stringThing[j][i+1]]=="q"){textSkips = true;}
			if([stringThing[j][i]]==";"){textSkips = false;}
			
			dialogue_text = scrollT;
			ObjText_SetText(obj, dialogue_text);
			
			if((j != length(stringThing)-1 || i != length(stringThing[j])-1) && !textSkips )
			{
				loop(textDelay * modiWait)
				{
					if(spkP>=0&&spkE>=0)
					{
					}
					else if(spkP>=0)
					{
						ObjPrim_SetTexture(playermouthobjects[iS],imgM[floor(c/8)%2]);
						if(modiWait>6)
						{
							ObjPrim_SetTexture(playermouthobjects[iS],imgM[0]);
						}
					}
					else if(spkE>=0)
					{
						ObjPrim_SetTexture(enemymouthobjects[iS],imgM[floor(c/8)%2]);
						if(modiWait>6)
						{
							ObjPrim_SetTexture(enemymouthobjects[iS],imgM[0]);
						}
					}
					
					c++;
					if((GetVirtualKeyState(VK_OK) != KEY_PUSH&&GetVirtualKeyState(VK_CANCEL) == KEY_FREE) || !isSkippable)
					{
						yield;
					}
				}
			}
			
		}
		scrollT =  scrollT ~  "[r]";
	}
	//SE_PlayLen(title_cursor, 75);
	if(spkP>=0&&spkE>=0)
	{
	}
	else if(spkP>=0)
	{
		ObjPrim_SetTexture(playermouthobjects[iS],imgM[0]);
	}
	else if(spkE>=0)
	{
		ObjPrim_SetTexture(enemymouthobjects[iS],imgM[0]);
	}
	if(isAutoContinue)
	{
		wait(autoContinueWait);
	}
	else
	{
		yield;
		while(GetVirtualKeyState(VK_OK) != KEY_PUSH)
		{
			if(GetVirtualKeyState(VK_CANCEL) == KEY_HOLD){break;}
			yield;
		}
	}
	SE_PlayLen(title_cursor, 75);
	yield;
	Obj_Delete(obj);
	Obj_Delete(objName);
}

function SetDialogueTextB4(speaker, text, color , spkP, spkE, imgS, imgE, imgM, iS, xm, ym,textScrollSounds, basePitch, randPitchRange, textDelay, yFlip)
{
	let y = GetScreenHeight - 48*2;
	SetSpeaker(spkP,spkE);
	
	if(spkP>=0)
	{
		SetNewPlayerPort(imgS[0], imgE[0], imgM[0][0], iS[0], xm[0], ym[0], 0, -1, yFlip[0]);
	}
	if(spkE>=0)
	{
		SetNewEnemyPort(imgS[1], imgE[1], imgM[1][0], iS[1], xm[1], ym[1], 0, -1, yFlip[1]);
	}

	dialogue_text = text;
	
	let newCol = [(color[0]), (color[1]), (color[2])];
	
	
	let obj = ObjText_Create();
	ObjText_SetFontType(obj, "Lucida Fax Demibold");
	ObjText_SetFontSize(obj, textSize);
	ObjText_SetFontColorTop(obj, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(obj, 255,255,255);	
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	ObjText_SetLinePitch(obj, 7);
	ObjText_SetMaxWidth(obj, widthGl*2-20);
	Obj_SetRenderPriorityI(obj, 76+RP);
	ObjRender_SetPosition(obj, GetScreenWidth/2-widthGl+10, y+8, 0);

	let objName = ObjText_Create();
	ObjText_SetFontType(objName, "Lucida Fax Demibold");
	ObjText_SetFontSize(objName, 22);
	ObjText_SetFontColorTop(objName, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(objName, 255,255,255);	
	ObjText_SetFontBorderType(objName, BORDER_FULL);
	ObjText_SetFontBorderWidth(objName, 1);
	ObjText_SetFontBorderColor(objName, 0, 0, 0);
	ObjText_SetLinePitch(objName, 7);
	ObjText_SetMaxWidth(objName, widthGl*2);
	Obj_SetRenderPriorityI(objName, 76+RP);
	ObjRender_SetPosition(objName, GetScreenWidth/2-widthGl+32+8, y-24, 0);
	ObjText_SetText(objName, speaker);
	
	let stringThing = SplitString(text,"|");
	let scrollT = [];
	let c = 0;
	let textSkips = false;
	ascent(j in 0..length(stringThing))
	{
		ascent(i in 0..length(stringThing[j]))
		{
			let modiWait = 1;
			scrollT = scrollT ~ [stringThing[j][i]];
			if([stringThing[j][i]]==" " || [stringThing[j][i]]==")" || [stringThing[j][i]]=="(")
			{
				
			}
			else if([stringThing[j][i]]=="." || [stringThing[j][i]]=="!" || [stringThing[j][i]]=="!")
			{
				ascent(p in 0..length(textScrollSounds))
				{
					SE_PlayTalkSound(textScrollSounds[p], basePitch + rand(-randPitchRange, randPitchRange));
				}
				modiWait = 12;
			}
			else if([stringThing[j][i]]==",")
			{
				ascent(p in 0..length(textScrollSounds))
				{
					SE_PlayTalkSound(textScrollSounds[p], basePitch + rand(-randPitchRange, randPitchRange));
				}
				modiWait = 6;
			}
			else
			{
				ascent(p in 0..length(textScrollSounds))
				{
					SE_PlayTalkSound(textScrollSounds[p], basePitch + rand(-randPitchRange, randPitchRange));
				}
			}
			if([stringThing[j][i]]=="&" && [stringThing[j][i+1]]=="q"){textSkips = true;}
			if([stringThing[j][i]]==";"){textSkips = false;}
			
			dialogue_text = scrollT;
			ObjText_SetText(obj, dialogue_text);
			
			if((j != length(stringThing)-1 || i != length(stringThing[j])-1) && !textSkips )
			{
				loop(textDelay * modiWait)
				{
					if(spkP>=0)
					{
						ObjPrim_SetTexture(playermouthobjects[iS[0]],imgM[0][floor(c/8)%2]);
						if(modiWait>6)
						{
							ObjPrim_SetTexture(playermouthobjects[iS[0]],imgM[0][0]);
						}
					}
					if(spkE>=0)
					{
						ObjPrim_SetTexture(enemymouthobjects[iS[1]],imgM[1][floor(c/8)%2]);
						if(modiWait>6)
						{
							ObjPrim_SetTexture(enemymouthobjects[iS[1]],imgM[1][0]);
						}
					}
					
					c++;
					if((GetVirtualKeyState(VK_OK) != KEY_PUSH&&GetVirtualKeyState(VK_CANCEL) == KEY_FREE) || !isSkippable)
					{
						yield;
					}
				}
			}
			
		}
		scrollT =  scrollT ~  "[r]";
	}
	//SE_PlayLen(title_cursor, 75);
	if(spkP>=0)
	{
		ObjPrim_SetTexture(playermouthobjects[iS[0]],imgM[0][0]);
	}
	if(spkE>=0)
	{
		ObjPrim_SetTexture(enemymouthobjects[iS[1]],imgM[1][0]);
	}
	if(isAutoContinue)
	{
		wait(autoContinueWait);
	}
	else
	{
		yield;
		while(GetVirtualKeyState(VK_OK) != KEY_PUSH)
		{
			if(GetVirtualKeyState(VK_CANCEL) == KEY_HOLD){break;}
			yield;
		}
	}
	SE_PlayLen(title_cursor, 75);
	yield;
	Obj_Delete(obj);
	Obj_Delete(objName);
}

function SetDialogueTextC4(speaker, text, color , spkP, spkE, imgS, imgE, imgM, iS, xm, ym,textScrollSounds, basePitch, randPitchRange, textDelay, yFlip)
{
	let y = GetScreenHeight - 48*2;
	SetSpeakerMultiple(iS[0],iS[1]);
	
	if(spkP>=0)
	{
		ascent(i in 0..length(iS[0]))
		{
			SetNewPlayerPort(imgS[0][i], imgE[0][i], imgM[0][i][0], iS[0][i], xm[0][i], ym[0][i], 0, -1, yFlip[0][i]);
		}
	}
	if(spkE>=0)
	{
		ascent(i in 0..length(iS[1]))
		{
			SetNewEnemyPort(imgS[1][i], imgE[1][i], imgM[1][i][0], iS[1][i], xm[1][i], ym[1][i], 0, -1, yFlip[1][i]);
		}
	}

	dialogue_text = text;
	
	let newCol = [(color[0]), (color[1]), (color[2])];
	
	
	let obj = ObjText_Create();
	ObjText_SetFontType(obj, "Lucida Fax Demibold");
	ObjText_SetFontSize(obj, textSize);
	ObjText_SetFontColorTop(obj, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(obj, 255,255,255);	
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	ObjText_SetLinePitch(obj, 7);
	ObjText_SetMaxWidth(obj, widthGl*2-20);
	Obj_SetRenderPriorityI(obj, 76+RP);
	ObjRender_SetPosition(obj, GetScreenWidth/2-widthGl+10, y+8, 0);

	let objName = ObjText_Create();
	ObjText_SetFontType(objName, "Lucida Fax Demibold");
	ObjText_SetFontSize(objName, 22);
	ObjText_SetFontColorTop(objName, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(objName, 255,255,255);	
	ObjText_SetFontBorderType(objName, BORDER_FULL);
	ObjText_SetFontBorderWidth(objName, 1);
	ObjText_SetFontBorderColor(objName, 0, 0, 0);
	ObjText_SetLinePitch(objName, 7);
	ObjText_SetMaxWidth(objName, widthGl*2);
	Obj_SetRenderPriorityI(objName, 76+RP);
	ObjRender_SetPosition(objName, GetScreenWidth/2-widthGl+32+8, y-24, 0);
	ObjText_SetText(objName, speaker);
	
	let stringThing = SplitString(text,"|");
	let scrollT = [];
	let c = 0;
	let textSkips = false;
	ascent(j in 0..length(stringThing))
	{
		ascent(i in 0..length(stringThing[j]))
		{
			let modiWait = 1;
			scrollT = scrollT ~ [stringThing[j][i]];
			if([stringThing[j][i]]==" " || [stringThing[j][i]]==")" || [stringThing[j][i]]=="(")
			{
				
			}
			else if([stringThing[j][i]]=="." || [stringThing[j][i]]=="!" || [stringThing[j][i]]=="!")
			{
				ascent(p in 0..length(textScrollSounds))
				{
					SE_PlayTalkSound(textScrollSounds[p], basePitch + rand(-randPitchRange, randPitchRange));
				}
				modiWait = 12;
			}
			else if([stringThing[j][i]]==",")
			{
				ascent(p in 0..length(textScrollSounds))
				{
					SE_PlayTalkSound(textScrollSounds[p], basePitch + rand(-randPitchRange, randPitchRange));
				}
				modiWait = 6;
			}
			else
			{
				ascent(p in 0..length(textScrollSounds))
				{
					SE_PlayTalkSound(textScrollSounds[p], basePitch + rand(-randPitchRange, randPitchRange));
				}
			}
			if([stringThing[j][i]]=="&" && [stringThing[j][i+1]]=="q"){textSkips = true;}
			if([stringThing[j][i]]==";"){textSkips = false;}
			
			dialogue_text = scrollT;
			ObjText_SetText(obj, dialogue_text);
			
			if((j != length(stringThing)-1 || i != length(stringThing[j])-1) && !textSkips )
			{
				loop(textDelay * modiWait)
				{
					if(spkP>=0)
					{
						ascent(o in 0..length(iS[0]))
						{
							ObjPrim_SetTexture(playermouthobjects[iS[0][o]],imgM[0][o][floor(c/8)%2]);
							if(modiWait>6)
							{
								ObjPrim_SetTexture(playermouthobjects[iS[0][o]],imgM[0][o][0]);
							}
						}
					}
					if(spkE>=0)
					{
						ascent(o in 0..length(iS[0]))
						{
							ObjPrim_SetTexture(enemymouthobjects[iS[1][o]],imgM[1][o][floor(c/8)%2]);
							if(modiWait>6)
							{
								ObjPrim_SetTexture(enemymouthobjects[iS[1][o]],imgM[1][o][0]);
							}
						}
					}
					
					c++;
					if((GetVirtualKeyState(VK_OK) != KEY_PUSH&&GetVirtualKeyState(VK_CANCEL) == KEY_FREE) || !isSkippable)
					{
						yield;
					}
				}
			}
			
		}
		scrollT =  scrollT ~  "[r]";
	}
	//SE_PlayLen(title_cursor, 75);
	if(spkP>=0)
	{
		ascent(o in 0..length(iS[0]))
		{
			ObjPrim_SetTexture(playermouthobjects[iS[0][o]],imgM[0][o][0]);
		}
	}
	if(spkE>=0)
	{
		ascent(o in 0..length(iS[0]))
		{
			ObjPrim_SetTexture(enemymouthobjects[iS[1][o]],imgM[1][o][0]);
		}
	}
	if(isAutoContinue)
	{
		wait(autoContinueWait);
	}
	else
	{
		yield;
		while(GetVirtualKeyState(VK_OK) != KEY_PUSH)
		{
			if(GetVirtualKeyState(VK_CANCEL) == KEY_HOLD){break;}
			yield;
		}
	}
	SE_PlayLen(title_cursor, 75);
	yield;
	Obj_Delete(obj);
	Obj_Delete(objName);
}

function SetPortraitData(offsetsPlayer, offsetsEnemy, scalesPlayer, scalesEnemy, offsetPlayerFace, offsetEnemyFace)
{
	playeroffsets = offsetsPlayer;
	enemyoffsets = offsetsEnemy;
	playerscales = scalesPlayer;
	enemyscales = scalesEnemy;
	playerfaceoffsets = offsetPlayerFace;
	enemyfaceoffsets = offsetEnemyFace;
}

function SetNewPlayerPort(img,imge,imgm, i,x,y,ang,alph,yFlip){ //moves in the player portrait from below
	if(img != "")
	{
		ObjPrim_SetTexture(playerobjects[i], img);
		ObjSprite2D_SetSourceRect(playerobjects[i], 0, 0, GetTextureWidth(img), GetTextureHeight(img));
		ObjSprite2D_SetDestCenter(playerobjects[i]);
	}
	if(imge != "")
	{
		ObjPrim_SetTexture(playereyesobjects[i], imge);
		ObjSprite2D_SetSourceRect(playereyesobjects[i], 0, 0, GetTextureWidth(imge), GetTextureHeight(imge));
		ObjSprite2D_SetDestCenter(playereyesobjects[i]);
	}
	if(imgm != "")
	{
		ObjPrim_SetTexture(playermouthobjects[i], imgm);
		ObjSprite2D_SetSourceRect(playermouthobjects[i], 0, 0, GetTextureWidth(imgm), GetTextureHeight(imgm));
		ObjSprite2D_SetDestCenter(playermouthobjects[i]);
	}
	let x2 = x + playeroffsets[i][0];
	let y2 = y + playeroffsets[i][1];
	ObjRender_SetPosition(playerobjects[i], round(x2), round(y2), 0); 
	ObjRender_SetAngleZ(playerobjects[i],ang);
	ObjRender_SetScaleXYZ(playerobjects[i],playerscales[i]*yFlip,playerscales[i],playerscales[i]);
	
	let faceDist = playerfaceoffsets[i][0]*playerscales[i];
	let faceAng = playerfaceoffsets[i][1];
	
	let am = 1-absolute(-1 - yFlip)/2;
	let flipFaceAng = 180 - faceAng;
	
	let faceX = Interpolate_Linear(x2 + faceDist*cos(faceAng + ang), x2 + faceDist*cos(flipFaceAng + ang), am);
	let faceY = Interpolate_Linear(y2 + faceDist*sin(faceAng + ang), y2 + faceDist*sin(flipFaceAng + ang), am);

	ObjRender_SetPosition(playereyesobjects[i], round(faceX), round(faceY), 0); 
	ObjRender_SetAngleZ(playereyesobjects[i],ang);
	ObjRender_SetScaleXYZ(playereyesobjects[i],playerscales[i]*yFlip,playerscales[i],playerscales[i]);
	
	ObjRender_SetPosition(playermouthobjects[i], round(faceX), round(faceY), 0); 
	ObjRender_SetAngleZ(playermouthobjects[i],ang);
	ObjRender_SetScaleXYZ(playermouthobjects[i],playerscales[i]*yFlip,playerscales[i],playerscales[i]);
	
	if(alph!=-1)
	{
		ObjRender_SetAlpha(playerobjects[i],alph);
		ObjRender_SetAlpha(playereyesobjects[i],alph);
		ObjRender_SetAlpha(playermouthobjects[i],alph);
	}
}

function SetNewEnemyPort(img,imge,imgm, i,x,y,ang,alph,yFlip){ //moves in the enemy portrait from below
	if(img != "")
	{
		ObjPrim_SetTexture(enemyobjects[i], img);
		ObjSprite2D_SetSourceRect(enemyobjects[i], 0, 0, GetTextureWidth(img), GetTextureHeight(img));
		ObjSprite2D_SetDestCenter(enemyobjects[i]);
	}
	if(imge != "")
	{
		ObjPrim_SetTexture(enemyeyesobjects[i], imge);
		ObjSprite2D_SetSourceRect(enemyeyesobjects[i], 0, 0, GetTextureWidth(imge), GetTextureHeight(imge));
		ObjSprite2D_SetDestCenter(enemyeyesobjects[i]);
	}
	if(imgm != "")
	{
		ObjPrim_SetTexture(enemymouthobjects[i], imgm);
		ObjSprite2D_SetSourceRect(enemymouthobjects[i], 0, 0, GetTextureWidth(imgm), GetTextureHeight(imgm));
		ObjSprite2D_SetDestCenter(enemymouthobjects[i]);
	}
	let x2 = x + enemyoffsets[i][0];
	let y2 = y + enemyoffsets[i][1];
	ObjRender_SetPosition(enemyobjects[i], round(x2), round(y2), 0); 
	ObjRender_SetAngleZ(enemyobjects[i],ang);
	ObjRender_SetScaleXYZ(enemyobjects[i],enemyscales[i]*yFlip,enemyscales[i],enemyscales[i]);
	
	let faceDist = enemyfaceoffsets[i][0]*enemyscales[i];
	let faceAng = enemyfaceoffsets[i][1];
	
	let am = 1-absolute(-1 - yFlip)/2;
	let flipFaceAng = 180 - faceAng;
	
	let faceX = Interpolate_Linear(x2 + faceDist*cos(faceAng + ang), x2 + faceDist*cos(flipFaceAng + ang), am);
	let faceY = Interpolate_Linear(y2 + faceDist*sin(faceAng + ang), y2 + faceDist*sin(flipFaceAng + ang), am);
	
	ObjRender_SetPosition(enemyeyesobjects[i], round(faceX), round(faceY), 0); 
	ObjRender_SetAngleZ(enemyeyesobjects[i],ang);
	ObjRender_SetScaleXYZ(enemyeyesobjects[i],enemyscales[i]*yFlip,enemyscales[i],enemyscales[i]);
	
	ObjRender_SetPosition(enemymouthobjects[i], round(faceX), round(faceY), 0); 
	ObjRender_SetAngleZ(enemymouthobjects[i],ang);
	ObjRender_SetScaleXYZ(enemymouthobjects[i],enemyscales[i]*yFlip,enemyscales[i],enemyscales[i]);
	if(alph!=-1)
	{
		ObjRender_SetAlpha(enemyobjects[i],alph);
		ObjRender_SetAlpha(enemyeyesobjects[i],alph);
		ObjRender_SetAlpha(enemymouthobjects[i],alph);
	}
}

function SetSpeaker(playerID,enemyID)
{
	ascent(o in 0..length(playerobjects))
	{
		if(o==playerID)
		{
			ObjRender_SetColor(playerobjects[o],255,255,255);
			Obj_SetRenderPriorityI(playerobjects[o], 75+RP);
			
			ObjRender_SetColor(playereyesobjects[o],255,255,255);
			Obj_SetRenderPriorityI(playereyesobjects[o], 75+RP);
			
			ObjRender_SetColor(playermouthobjects[o],255,255,255);
			Obj_SetRenderPriorityI(playermouthobjects[o], 75+RP);
		}
		else
		{
			ObjRender_SetColor(playerobjects[o],32,32,32);
			Obj_SetRenderPriorityI(playerobjects[o], 74+RP);
			
			ObjRender_SetColor(playereyesobjects[o],32,32,32);
			Obj_SetRenderPriorityI(playereyesobjects[o], 74+RP);
			
			ObjRender_SetColor(playermouthobjects[o],32,32,32);
			Obj_SetRenderPriorityI(playermouthobjects[o], 74+RP);
		}
	}
	ascent(o in 0..length(enemyobjects))
	{
		if(o==enemyID)
		{
			ObjRender_SetColor(enemyobjects[o],255,255,255);
			Obj_SetRenderPriorityI(enemyobjects[o], 75+RP);
			
			ObjRender_SetColor(enemyeyesobjects[o],255,255,255);
			Obj_SetRenderPriorityI(enemyeyesobjects[o], 75+RP);
			
			ObjRender_SetColor(enemymouthobjects[o],255,255,255);
			Obj_SetRenderPriorityI(enemymouthobjects[o], 75+RP);
		}
		else
		{
			ObjRender_SetColor(enemyobjects[o],32,32,32);
			Obj_SetRenderPriorityI(enemyobjects[o], 74+RP);
			
			ObjRender_SetColor(enemyeyesobjects[o],32,32,32);
			Obj_SetRenderPriorityI(enemyeyesobjects[o], 74+RP);
			
			ObjRender_SetColor(enemymouthobjects[o],32,32,32);
			Obj_SetRenderPriorityI(enemymouthobjects[o], 74+RP);
		}
	}
}

function SetSpeakerMultiple(playerIDs,enemyIDs)
{
	ascent(o in 0..length(playerobjects))
	{
		ObjRender_SetColor(playerobjects[o],32,32,32);
		Obj_SetRenderPriorityI(playerobjects[o], 74+RP);
		
		ObjRender_SetColor(playereyesobjects[o],32,32,32);
		Obj_SetRenderPriorityI(playereyesobjects[o], 74+RP);
		
		ObjRender_SetColor(playermouthobjects[o],32,32,32);
		Obj_SetRenderPriorityI(playermouthobjects[o], 74+RP);
	}
	ascent(o in 0..length(enemyobjects))
	{
		ObjRender_SetColor(enemyobjects[o],32,32,32);
		Obj_SetRenderPriorityI(enemyobjects[o], 74+RP);
		
		ObjRender_SetColor(enemyeyesobjects[o],32,32,32);
		Obj_SetRenderPriorityI(enemyeyesobjects[o], 74+RP);
		
		ObjRender_SetColor(enemymouthobjects[o],32,32,32);
		Obj_SetRenderPriorityI(enemymouthobjects[o], 74+RP);
	}
	
	ascent(o in 0..length(playerobjects))
	{
		ascent(i in 0..length(playerIDs))
		{
			if(o==playerIDs[i])
			{
				ObjRender_SetColor(playerobjects[o],255,255,255);
				Obj_SetRenderPriorityI(playerobjects[o], 75+RP);
				
				ObjRender_SetColor(playereyesobjects[o],255,255,255);
				Obj_SetRenderPriorityI(playereyesobjects[o], 75+RP);
				
				ObjRender_SetColor(playermouthobjects[o],255,255,255);
				Obj_SetRenderPriorityI(playermouthobjects[o], 75+RP);
			}
		}
	}
	ascent(o in 0..length(enemyobjects))
	{
		ascent(i in 0..length(enemyIDs))
		{
			if(o==enemyIDs[i])
			{
				ObjRender_SetColor(enemyobjects[o],255,255,255);
				Obj_SetRenderPriorityI(enemyobjects[o], 75+RP);
				
				ObjRender_SetColor(enemyeyesobjects[o],255,255,255);
				Obj_SetRenderPriorityI(enemyeyesobjects[o], 75+RP);
				
				ObjRender_SetColor(enemymouthobjects[o],255,255,255);
				Obj_SetRenderPriorityI(enemymouthobjects[o], 75+RP);
			}
		}
	}
}
task EndDialogueSequence
{
	ascent(i in 0 .. length(playerobjects))
	{
		RemovePlayerPort(i);
	}
	ascent(i in 0 .. length(enemyobjects))
	{
		RemoveEnemyPort(i);
	}
	loop(30){yield;}

	ascent(i in 0 .. length(playerobjects)){
		Obj_Delete(playerobjects[i]);
	}
	ascent(i in 0 .. length(enemyobjects)){
		Obj_Delete(enemyobjects[i]);
	}
	ascent(i in 0 .. length(playereyesobjects)){
		Obj_Delete(playereyesobjects[i]);
	}
	ascent(i in 0 .. length(enemyeyesobjects)){
		Obj_Delete(enemyeyesobjects[i]);
	}
	ascent(i in 0 .. length(playermouthobjects)){
		Obj_Delete(playermouthobjects[i]);
	}
	ascent(i in 0 .. length(enemymouthobjects)){
		Obj_Delete(enemymouthobjects[i]);
	}
	playerobjects = [];
	enemyobjects = [];
	playereyesobjects = [];
	enemyeyesobjects = [];
	playermouthobjects = [];
	enemymouthobjects = [];
}

task RemovePlayerPort(i)
{ //moves out the player portrait
	portrait_player[i] = "";

	//moveDeceleration(playerobjects[i], ObjRender_GetX(playerobjects[i]), GetStgFrameHeight + 384, 20, false);
	//wait(20);

	ObjPrim_SetTexture(playerobjects[i], "");
	ObjSprite2D_SetSourceRect(playerobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(playerobjects[i]);
	
	ObjPrim_SetTexture(playereyesobjects[i], "");
	ObjSprite2D_SetSourceRect(playereyesobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(playereyesobjects[i]);
	
	ObjPrim_SetTexture(playermouthobjects[i], "");
	ObjSprite2D_SetSourceRect(playermouthobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(playermouthobjects[i]);

}
task RemoveEnemyPort(i)
{ //moves out the enemy portrait
	portrait_enemy[i] = "";

	//moveDeceleration(enemyobjects[i], ObjRender_GetX(enemyobjects[i]), GetStgFrameHeight + 384, 20, false);
	//wait(20);

	ObjPrim_SetTexture(enemyobjects[i], "");
	ObjSprite2D_SetSourceRect(enemyobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(enemyobjects[i]);
	
	ObjPrim_SetTexture(enemyeyesobjects[i], "");
	ObjSprite2D_SetSourceRect(enemyeyesobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(enemyeyesobjects[i]);
	
	ObjPrim_SetTexture(enemymouthobjects[i], "");
	ObjSprite2D_SetSourceRect(enemymouthobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(enemymouthobjects[i]);
}








