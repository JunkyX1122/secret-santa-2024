let RP = 10;
let IMG_DIALOGBOX = GetCurrentScriptDirectory~"./../../img/talk/diabox.png";
function randLR
{
	let bitn = round(rand(0,1));
	if(bitn==0){bitn=-1;}
	return bitn;
}
let dialogue_text = "";
let widthGl = 0;
let speakerColor = [0,0,0];

let playerobjects = [];
let enemyobjects = [];

let playerfaceobjects = [];
let enemyfaceobjects = [];

let playerfaceoffsets = []; //coordinate offsets for player potraits
let enemyfaceoffsets = []; //coordinate offsets for enemy potraits 

let portrait_player = [];
let portrait_enemy = [];

let player_yRot = [];
let enemy_yRot = [];

let playeroffsets = []; //coordinate offsets for player potraits
let enemyoffsets = []; //coordinate offsets for enemy potraits

let playerscales = []; //scales for player potraits
let enemyscales = []; //scales for enemy potraits

function SetPortraitNumber(numplayer, numenemy)
{
	ascent(i in 0 .. numplayer)
	{
		let obj = CreatePortrait;
		playerobjects = playerobjects ~ [obj];
		
		let objf = CreatePortrait;
		playerfaceobjects = playerfaceobjects ~ [objf];
		
		playerscales = playerscales ~ [1];
		playeroffsets = playeroffsets ~ [[0, 0]];
		playerfaceoffsets = playerfaceoffsets ~ [[0, 0]];
		player_yRot = player_yRot ~ [0];
	}
	ascent(i in 0 .. numenemy){
		let obj = CreatePortrait;
		enemyobjects = enemyobjects ~ [obj];
		
		let objf = CreatePortrait;
		enemyfaceobjects = enemyfaceobjects ~ [objf];
		
		enemyscales = enemyscales ~ [1];
		enemyoffsets = enemyoffsets ~ [[0, 0]];
		enemyfaceoffsets = enemyfaceoffsets ~ [[0, 0]];
		enemy_yRot = enemy_yRot ~ [0];
	}

	ascent(i in 0 .. numplayer){
		let path = "";
		portrait_player = portrait_player ~ [path];
	}
	ascent(i in 0 .. numenemy){
		let path = "";
		portrait_enemy = portrait_enemy ~ [path];
	}
}
function CreatePortrait
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, "");
	ObjSprite2D_SetSourceRect(obj, 0, 0, GetTextureWidth(""), GetTextureHeight(""));
	ObjSprite2D_SetDestCenter(obj);
	//ObjRender_SetScaleXYZ(obj, 0.5, 0.5, 0);
	Obj_SetRenderPriorityI(obj, 75+RP);
	return obj;
}

task StartDialog()
{
	let y = GetScreenHeight - 50;
	let width = 240/2;
	widthGl = width+185;
	let dialogBoxObj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(dialogBoxObj, IMG_TALK_BOX);
	ObjSprite2D_SetSourceRect(dialogBoxObj,0, 0, 1024, 1024);
	ObjSprite2D_SetDestRect(dialogBoxObj,0, 0, 1024, 1024);
	ObjSprite2D_SetDestCenter(dialogBoxObj);
	Obj_SetRenderPriorityI(dialogBoxObj, 75+RP);
	//ObjRender_SetBlendType(dialogBoxObj, BLEND_SUBTRACT);
	ObjRender_SetPosition(dialogBoxObj, GetScreenWidth/2, GetScreenHeight/2, 0);
	
	let objArrows = [];
	ascent(i in 0..2)
	{
		let objArrow = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objArrow, [IMG_TALK_NAMEARROW_BOTTOM, IMG_TALK_NAMEARROW_TOP][i]);
		ObjSprite2D_SetSourceRect(objArrow,0, 0, 1024, 512);
		ObjSprite2D_SetDestRect(objArrow,0, 0, 1024, 512);
		ObjSprite2D_SetDestCenter(objArrow);
		Obj_SetRenderPriorityI(objArrow, 76+RP);
		ObjRender_SetPosition(objArrow, GetScreenWidth/2, GetScreenHeight/2, 0);
		if(i==0)
		{
			ObjRender_SetColor(objArrow, speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		}
		objArrows ~= [objArrow];
	}
	let timeTotal = 30;
	ascent(t in 0 .. timeTotal+1)
	{
		let a = 255/timeTotal*t;
		ObjRender_SetAlpha(dialogBoxObj, a*0.85);
		ascent(i in 0..2)
		{
			ObjRender_SetAlpha(objArrows[i], a);
		}
		ObjRender_SetColor(objArrows[0], speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		yield;
	}
	while(GetCommonData("IsDialogueSequenceActive", true)==true)
	{
		ObjRender_SetColor(objArrows[0], speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		yield;
	}
	timeTotal = 30;
	descent(t in 0 .. timeTotal+1)
	{	
		let a = 255/timeTotal*t;
		ObjRender_SetAlpha(dialogBoxObj, a*0.85);
		ascent(i in 0..2)
		{
			ObjRender_SetAlpha(objArrows[i], a);
		}
		ObjRender_SetColor(objArrows[0], speakerColor[0]/2, speakerColor[1]/2, speakerColor[2]/2);
		yield;
	}
	Obj_Delete(dialogBoxObj);
	ascent(i in 0..2)
	{
		Obj_Delete(objArrows[i]);
	}
}

function SetDialogueTextA2(speaker, text, color , spkP, spkE, imgS, imgF, iS, xm, ym,textScrollSound)
{ //event will advance only upon button press
	SetDialogueTextA3(speaker, text, color , spkP, spkE, imgS, imgF, iS, xm, ym,textScrollSound, 1, 0, 2);
}
function SetDialogueTextA3(speaker, text, color , spkP, spkE, imgS, imgF, iS, xm, ym,textScrollSound, basePitch, randPitchRange, textDelay)
{ 
	SetDialogueTextA4(speaker, text, color , spkP, spkE, imgS, imgF, iS, xm, ym,textScrollSound, basePitch, randPitchRange, textDelay, 1);
}

function SetDialogueTextA4(speaker, text, color , spkP, spkE, imgS, imgF, iS, xm, ym,textScrollSound, basePitch, randPitchRange, textDelay, yFlip)
{ //added pitch changing
	let y = GetScreenHeight - 48*2;
	SetSpeaker(spkP,spkE);
	
	if(spkP>=0&&spkE>=0)
	{
	}
	else if(spkP>=0)
	{
		SetNewPlayerPort(imgS, imgF[0], iS, xm, ym, 0, -1, yFlip);
	}
	else if(spkE>=0)
	{
		SetNewEnemyPort(imgS, imgF[0], iS, xm, ym, 0, -1, yFlip);
	}
	InstallFont(GetCurrentScriptDirectory~"COLUMBUS.ttf");
	dialogue_text = text;
	
	let newCol = [(color[0]), (color[1]), (color[2])];
	
	
	let obj = ObjText_Create();
	ObjText_SetFontType(obj, "Lucida Fax Demibold");
	ObjText_SetFontSize(obj, 16);
	ObjText_SetFontColorTop(obj, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(obj, 255,255,255);	
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	ObjText_SetLinePitch(obj, 7);
	ObjText_SetMaxWidth(obj, widthGl*2-20);
	Obj_SetRenderPriorityI(obj, 76+RP);
	ObjRender_SetPosition(obj, GetScreenWidth/2-widthGl+10, y+8, 0);

	let objName = ObjText_Create();
	ObjText_SetFontType(objName, "Lucida Fax Demibold");
	ObjText_SetFontSize(objName, 22);
	ObjText_SetFontColorTop(objName, 255, 255, 255);
	speakerColor = newCol;
	ObjText_SetFontColorBottom(objName, 255,255,255);	
	ObjText_SetFontBorderType(objName, BORDER_FULL);
	ObjText_SetFontBorderWidth(objName, 1);
	ObjText_SetFontBorderColor(objName, 0, 0, 0);
	ObjText_SetLinePitch(objName, 7);
	ObjText_SetMaxWidth(objName, widthGl*2);
	Obj_SetRenderPriorityI(objName, 76+RP);
	ObjRender_SetPosition(objName, GetScreenWidth/2-widthGl+32+8, y-24, 0);
	ObjText_SetText(objName, speaker);
	
	let stringThing = SplitString(text,"|");
	let scrollT = [];
	let c = 0;
	ascent(j in 0..length(stringThing))
	{
		ascent(i in 0..length(stringThing[j]))
		{
			scrollT = scrollT ~ [stringThing[j][i]];
			if([stringThing[j][i]]==" ")
			{
				
			}
			else
			{
				SE_PlayLen(textScrollSound,75, basePitch + rand(-randPitchRange, randPitchRange));
			}
			dialogue_text = scrollT;
			ObjText_SetText(obj, dialogue_text);
			
			loop(textDelay)
			{
				if(spkP>=0&&spkE>=0)
				{
				}
				else if(spkP>=0)
				{
					ObjPrim_SetTexture(playerfaceobjects[iS],imgF[floor(c/8)%2]);
				}
				else if(spkE>=0)
				{
					ObjPrim_SetTexture(enemyfaceobjects[iS],imgF[floor(c/8)%2]);
				}
				
				c++;
				if(GetVirtualKeyState(VK_OK) != KEY_PUSH&&GetVirtualKeyState(VK_CANCEL) == KEY_FREE)
				{
					yield;
				}
			}
			
		}
		scrollT =  scrollT ~  "[r]";
	}
	if(spkP>=0&&spkE>=0)
	{
	}
	else if(spkP>=0)
	{
		ObjPrim_SetTexture(playerfaceobjects[iS],imgF[0]);
	}
	else if(spkE>=0)
	{
		ObjPrim_SetTexture(enemyfaceobjects[iS],imgF[0]);
	}
	yield;
	while(GetVirtualKeyState(VK_OK) != KEY_PUSH)
	{
		if(GetVirtualKeyState(VK_CANCEL) == KEY_HOLD){break;}
		yield;
	}
	yield;
	Obj_Delete(obj);
	Obj_Delete(objName);
}

function SetPortraitData(offsetsPlayer, offsetsEnemy, scalesPlayer, scalesEnemy, offsetPlayerFace, offsetEnemyFace)
{
	playeroffsets = offsetsPlayer;
	enemyoffsets = offsetsEnemy;
	playerscales = scalesPlayer;
	enemyscales = scalesEnemy;
	playerfaceoffsets = offsetPlayerFace;
	enemyfaceoffsets = offsetEnemyFace;
}

function SetNewPlayerPort(img,imgf, i,x,y,ang,alph,yFlip){ //moves in the player portrait from below
	if(img != "")
	{
		ObjPrim_SetTexture(playerobjects[i], img);
		ObjSprite2D_SetSourceRect(playerobjects[i], 0, 0, GetTextureWidth(img), GetTextureHeight(img));
		ObjSprite2D_SetDestCenter(playerobjects[i]);
	}
	if(imgf != "")
	{
		ObjPrim_SetTexture(playerfaceobjects[i], imgf);
		ObjSprite2D_SetSourceRect(playerfaceobjects[i], 0, 0, GetTextureWidth(imgf), GetTextureHeight(imgf));
		ObjSprite2D_SetDestCenter(playerfaceobjects[i]);
	}
	let x2 = x + playeroffsets[i][0];
	let y2 = y + playeroffsets[i][1];
	ObjRender_SetPosition(playerobjects[i], round(x2), round(y2), 0); 
	ObjRender_SetAngleZ(playerobjects[i],ang);
	ObjRender_SetScaleXYZ(playerobjects[i],playerscales[i]*yFlip,playerscales[i],playerscales[i]);
	
	let faceDist = playerfaceoffsets[i][0]*playerscales[i];
	let faceAng = playerfaceoffsets[i][1];
	ObjRender_SetPosition(playerfaceobjects[i], round(x2 + faceDist*cos(faceAng + ang)), round(y2 + faceDist*sin(faceAng + ang)), 0); 
	ObjRender_SetAngleZ(playerfaceobjects[i],ang);
	ObjRender_SetScaleXYZ(playerfaceobjects[i],playerscales[i]*yFlip,playerscales[i],playerscales[i]);
	
	if(alph!=-1)
	{
		ObjRender_SetAlpha(playerobjects[i],alph);
		ObjRender_SetAlpha(playerfaceobjects[i],alph);
	}
}

function SetNewEnemyPort(img,imgf, i,x,y,ang,alph,yFlip){ //moves in the enemy portrait from below
	if(img != "")
	{
		ObjPrim_SetTexture(enemyobjects[i], img);
		ObjSprite2D_SetSourceRect(enemyobjects[i], 0, 0, GetTextureWidth(img), GetTextureHeight(img));
		ObjSprite2D_SetDestCenter(enemyobjects[i]);
	}
	if(imgf != "")
	{
		ObjPrim_SetTexture(enemyfaceobjects[i], imgf);
		ObjSprite2D_SetSourceRect(enemyfaceobjects[i], 0, 0, GetTextureWidth(imgf), GetTextureHeight(imgf));
		ObjSprite2D_SetDestCenter(enemyfaceobjects[i]);
	}
	let x2 = x + enemyoffsets[i][0];
	let y2 = y + enemyoffsets[i][1];
	ObjRender_SetPosition(enemyobjects[i], round(x2), round(y2), 0); 
	ObjRender_SetAngleZ(enemyobjects[i],ang);
	ObjRender_SetScaleXYZ(enemyobjects[i],enemyscales[i]*yFlip,enemyscales[i],enemyscales[i]);
	
	let faceDist = enemyfaceoffsets[i][0]*enemyscales[i];
	let faceAng = enemyfaceoffsets[i][1];
	ObjRender_SetPosition(enemyfaceobjects[i], round(x2 + faceDist*cos(faceAng + ang)), round(y2 + faceDist*sin(faceAng + ang)), 0); 
	ObjRender_SetAngleZ(enemyfaceobjects[i],ang);
	ObjRender_SetScaleXYZ(enemyfaceobjects[i],enemyscales[i]*yFlip,enemyscales[i],enemyscales[i]);
	
	if(alph!=-1)
	{
		ObjRender_SetAlpha(enemyobjects[i],alph);
		ObjRender_SetAlpha(enemyfaceobjects[i],alph);
	}
}

function SetSpeaker(playerID,enemyID)
{
	ascent(o in 0..length(playerobjects))
	{
		if(o==playerID)
		{
			ObjRender_SetColor(playerobjects[o],255,255,255);
			Obj_SetRenderPriorityI(playerobjects[o], 75+RP);
			ObjRender_SetColor(playerfaceobjects[o],255,255,255);
			Obj_SetRenderPriorityI(playerfaceobjects[o], 75+RP);
		}
		else
		{
			ObjRender_SetColor(playerobjects[o],32,32,32);
			Obj_SetRenderPriorityI(playerobjects[o], 74+RP);
			ObjRender_SetColor(playerfaceobjects[o],32,32,32);
			Obj_SetRenderPriorityI(playerfaceobjects[o], 74+RP);
		}
	}
	ascent(o in 0..length(enemyobjects))
	{
		if(o==enemyID)
		{
			ObjRender_SetColor(enemyobjects[o],255,255,255);
			Obj_SetRenderPriorityI(enemyobjects[o], 75+RP);
			ObjRender_SetColor(enemyfaceobjects[o],255,255,255);
			Obj_SetRenderPriorityI(enemyfaceobjects[o], 75+RP);
		}
		else
		{
			ObjRender_SetColor(enemyobjects[o],32,32,32);
			Obj_SetRenderPriorityI(enemyobjects[o], 74+RP);
			ObjRender_SetColor(enemyfaceobjects[o],32,32,32);
			Obj_SetRenderPriorityI(enemyfaceobjects[o], 74+RP);
		}
	}
}
task EndDialogueSequence
{
	ascent(i in 0 .. length(playerobjects))
	{
		RemovePlayerPort(i);
	}
	ascent(i in 0 .. length(enemyobjects))
	{
		RemoveEnemyPort(i);
	}
	loop(30){yield;}

	ascent(i in 0 .. length(playerobjects)){
		Obj_Delete(playerobjects[i]);
	}
	ascent(i in 0 .. length(enemyobjects)){
		Obj_Delete(enemyobjects[i]);
	}
	ascent(i in 0 .. length(playerfaceobjects)){
		Obj_Delete(playerfaceobjects[i]);
	}
	ascent(i in 0 .. length(enemyfaceobjects)){
		Obj_Delete(enemyfaceobjects[i]);
	}
	playerobjects = [];
	enemyobjects = [];
	playerfaceobjects = [];
	enemyfaceobjects = [];
}

task RemovePlayerPort(i)
{ //moves out the player portrait
	portrait_player[i] = "";

	//moveDeceleration(playerobjects[i], ObjRender_GetX(playerobjects[i]), GetStgFrameHeight + 384, 20, false);
	//wait(20);

	ObjPrim_SetTexture(playerobjects[i], "");
	ObjSprite2D_SetSourceRect(playerobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(playerobjects[i]);
	
	ObjPrim_SetTexture(playerfaceobjects[i], "");
	ObjSprite2D_SetSourceRect(playerfaceobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(playerfaceobjects[i]);

}
task RemoveEnemyPort(i)
{ //moves out the enemy portrait
	portrait_enemy[i] = "";

	//moveDeceleration(enemyobjects[i], ObjRender_GetX(enemyobjects[i]), GetStgFrameHeight + 384, 20, false);
	//wait(20);

	ObjPrim_SetTexture(enemyobjects[i], "");
	ObjSprite2D_SetSourceRect(enemyobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(enemyobjects[i]);
	
	ObjPrim_SetTexture(enemyfaceobjects[i], "");
	ObjSprite2D_SetSourceRect(enemyfaceobjects[i], 0, 0, 0, 0);
	ObjSprite2D_SetDestCenter(enemyfaceobjects[i]);
}








