
let mainMenu_AlphaScl = 1;
let background_AlphaScl = 1;

const MAINMENUSTATE_START 		= 0;
const MAINMENUSTATE_PRACTICE 	= 1;
const MAINMENUSTATE_OPTIONS 	= 2;
const MAINMENUSTATE_GALLERY 	= 3;
const MAINMENUSTATE_CREDITS 	= 4;
const MAINMENUSTATE_EXIT 		= 5;
const MAINMENU_TEXT = 		["Start", "Practice", "Options", "Gallery", "Credits", "Exit"];
let   mainMenu_Selectable = [   true,       true,      true,     false,     false,   true];
const TO_MAINMENU_TRANSITION = 100;
const BOX_HEIGHTOFFSET = 110;
const MAINMENU_TOTALOPTIONS = length(MAINMENU_TEXT);
let mainMenuState = MAINMENUSTATE_START;
let hasSelected = false;
let SELECTED_WAIT = 20;

let firstTimeBoot = true; // Prevents calling everything more than once.
task Title_Display()
{
	menuState = MENUSTATE_MAIN;
	mainMenu_AlphaScl = 1;
	background_AlphaScl = 1;
	hasSelected = false;
	TitleRender(!firstTimeBoot);
	if(firstTimeBoot)
	{
		RenderMenuBackground(false);
	}
	ascent(i in 0..140*2+60)
	{
		if(firstTimeBoot)
		{
			SkippableWait(1);
		}
	}
	if(firstTimeBoot)
	{
		MusicChange(BGM_TITLE, BMG_TITLE_VOLUME, 738849, 6695592);
		
	}
	
	yield;
	firstTimeBoot = false;
	
	BoxRender();
	PortraitRender();
	
	ascent(i in 0..MAINMENU_TOTALOPTIONS)
	{
		CreateMainMenuOption(i);
	}
	SkippableWait(TO_MAINMENU_TRANSITION);
	
	
	yield;
	
	SE_PlayLen(title_cursor, 60);
	while(menuState==MENUSTATE_MAIN && !hasSelected)
	{
		MainMenuSelectMove();
		if(GetVirtualKeyState(VK_CANCEL) == KEY_PUSH)
		{
			SE_PlayLen(title_cancel, 60);
			if(mainMenuState == MAINMENUSTATE_EXIT)
			{
				hasSelected = true;
			}
			mainMenuState = MAINMENUSTATE_EXIT;
		}
		if(GetVirtualKeyState(VK_OK) == KEY_PUSH)
		{
			SE_PlayLen(title_ok, 60);
			hasSelected = true;
		}
		yield;
	}
	SkippableWait(SELECTED_WAIT);
	alternative(mainMenuState)
	case(MAINMENUSTATE_START)
	{
		let t = 40;
		ascent(i in 0..t)
		{
			mainMenu_AlphaScl = 1 - 1/(t-1)*i;
			SkippableWait(1);
		}
		
		let hasCanceled = CharacterSelectScreen();
		if(hasCanceled)
		{
			Title_Display();
		}
		else
		{
			TFlash(50);
			wait(50);
			MusicVolumeChange(100, 0, 170);
			TDarkTransition(0, 1, 120);
			ascent(i in 0..180)
			{
				yield;
			}
			DeleteMusicObj();
			totalDarkness = 0;
			menuState = MENUSTATE_UNACTIVE;
			firstTimeBoot = true;
			StartStageProgression();
		}
	}
	case(MAINMENUSTATE_PRACTICE)
	{
		let t = 40;
		ascent(i in 0..t)
		{
			mainMenu_AlphaScl = 1 - 1/(t-1)*i;
			SkippableWait(1);
		}
		let hasCanceled = PracticeScreen();
		if(hasCanceled)
		{
			Title_Display();
		}
		else
		{
		}
	}
	case(MAINMENUSTATE_OPTIONS)
	{
		let t = 40;
		ascent(i in 0..t)
		{
			mainMenu_AlphaScl = 1 - 1/(t-1)*i;
			SkippableWait(1);
		}
		OptionsScreen();
		Title_Display();
	}
	case(MAINMENUSTATE_EXIT)
	{
		let t = 60;
		ascent(i in 0..t)
		{
			background_AlphaScl = 1 - 1/(t-1)*i;
			mainMenu_AlphaScl = 1 - 1/(t-1)*i;
			yield;
		}
		MusicVolumeChange(vol, 0, t);
		menuState = MENUSTATE_UNACTIVE;
		wait(60);
		ClosePackage();
	}
	others
	{
	}
}


let mainMenuHoldCounter = 0;
function MainMenuSelectMove()
{
	let hasMoved = false;
	if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH)  { 
		MoveOption(1);
		mainMenuHoldCounter = 0; 
	}
	if(GetVirtualKeyState(VK_UP)   == KEY_PUSH)  { 
		MoveOption(-1);
		mainMenuHoldCounter = 0; 
	}
	if(GetVirtualKeyState(VK_DOWN) == KEY_HOLD)  {
		mainMenuHoldCounter++;
		if(mainMenuHoldCounter > 20)
		{
			if(mainMenuHoldCounter%6==0)
			{
				MoveOption(1);
			}
		}
	}
	if(GetVirtualKeyState(VK_UP) == KEY_HOLD)  {
		mainMenuHoldCounter++;
		if(mainMenuHoldCounter > 20)
		{
			if(mainMenuHoldCounter%6==0)
			{
				MoveOption(-1);
			}
		}
	}
	if((GetVirtualKeyState(VK_DOWN) == KEY_FREE && GetVirtualKeyState(VK_UP) == KEY_FREE) || 
	   (GetVirtualKeyState(VK_DOWN) != KEY_FREE && GetVirtualKeyState(VK_UP) != KEY_FREE)) {
		mainMenuHoldCounter = 0;
	}
		
	return hasMoved;
	task MoveOption(am)
	{
		SE_PlayLen(title_cursor, 60);
		hasMoved = true;
		mainMenuState+=am;
		if(mainMenuState > MAINMENU_TOTALOPTIONS -1) { mainMenuState = 0; }
		if(mainMenuState <  0) 						 { mainMenuState = MAINMENU_TOTALOPTIONS - 1; }
		if(!mainMenu_Selectable[mainMenuState]) 	 { MoveOption(am); }
	}
}

task CreateMainMenuOption(id)
{
	let h = 70;
	let y  = GetScreenHeight/2 + BOX_HEIGHTOFFSET - h + (h*2)/(MAINMENU_TOTALOPTIONS-1)*id;
	let obj = CreateText(
		MAINMENU_TEXT[id],
		20,
		[[255,255,255],
		[255,255,200]],
		[0,0,0],
		GetScreenWidth/2,
		y,
		"Lucida Fax Demibold",
		BASE_RENDERI+7);
		
	let coll = 140;
	if(!mainMenu_Selectable[id])
	{
		coll = 32;
	}
	ObjRender_SetColor(obj, coll,coll,coll);
	
	ascent(i in 0..TO_MAINMENU_TRANSITION)
	{
		ObjRender_SetAlpha(obj, 255*sin(90/(TO_MAINMENU_TRANSITION-1)*i));
		SkippableWait(1);
	}
	
	
	let objMMBS = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objMMBS, IMG_TITLE_MAINMENU_SELECTBOX);
	Obj_SetRenderPriorityI(objMMBS, BASE_RENDERI+6);
	ObjSprite2D_SetSourceRect(objMMBS,0, 0, 512, 32);
	ObjSprite2D_SetDestRect(objMMBS,0, 0, 512, 32);
	ObjSprite2D_SetDestCenter(objMMBS);
	ObjRender_SetPosition(objMMBS,GetScreenWidth/2,y,0);
	ObjRender_SetBlendType(objMMBS, BLEND_ADD_ARGB);
	
	let objArrows = [];
	
	ascent(i in 0..2)
	{
		let objAr = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objAr, IMG_TITLE_MAINMENU_SELECTARROW);
		Obj_SetRenderPriorityI(objAr, BASE_RENDERI+6);
		ObjSprite2D_SetSourceRect(objAr,0, 0, 64, 32);
		ObjSprite2D_SetDestRect(objAr,0, 0, 64, 32);
		ObjSprite2D_SetDestCenter(objAr);
		ObjRender_SetScaleX(objAr, 1-2*i);
		ObjRender_SetBlendType(objAr, BLEND_ADD_ARGB);
		objArrows ~= [objAr];
	}

	let boxAlph = 0;
	let arrowAlph = 0;
	let c = 0;
	let selectedTimer = SELECTED_WAIT;
	while(menuState==MENUSTATE_MAIN)
	{
		let selectAlpha = 1/(SELECTED_WAIT) * selectedTimer;
		let colTarg = 140;
		let boxTarg = 0;
		let scll = cos(c*3);
		let scll2 = cos(c*3*2);
		let arrowTarg = 0;
		if(!mainMenu_Selectable[id])
		{
			colTarg = 32;
		}
		if(mainMenuState==id)
		{
			colTarg = 255;
			boxTarg = 220 + 35 * scll;
			arrowTarg = 255;
		}
		coll = coll * 0.9 + colTarg * 0.1;
		boxAlph = boxAlph * 0.8 + boxTarg * 0.2;
		arrowAlph = arrowAlph * 0.7 + arrowTarg * 0.3;
		
		ObjRender_SetAlpha(obj, 255 * selectAlpha);
		ObjRender_SetColor(obj, coll * mainMenu_AlphaScl, coll * mainMenu_AlphaScl, coll * mainMenu_AlphaScl);
		ObjRender_SetAlpha(objMMBS, boxAlph * mainMenu_AlphaScl * selectAlpha);
		ObjRender_SetScaleXYZ(objMMBS, 0.95 + 0.05 * scll);
		ascent(i in 0..2)
		{
			let bb = [1,-1][i];
			ObjRender_SetPosition(objArrows[i],GetScreenWidth/2 - 130*bb + 1 * scll2 * bb,y,0);
			ObjRender_SetAlpha(objArrows[i], arrowAlph * mainMenu_AlphaScl * selectAlpha);
		}
		if(hasSelected)
		{
			selectedTimer--;
			if(IsSkipButtonPressed)
			{
				selectedTimer = 0;
			}
			
		}
		c++;
		yield;
	}

	Obj_Delete(obj);
	Obj_Delete(objMMBS);
	ascent(i in 0..2)
	{
		Obj_Delete(objArrows[i]);
	}
}

task TitleRender(growAlpha)
{
	let objT0 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objT0, IMG_TITLE_TEXT_00);
	Obj_SetRenderPriorityI(objT0, BASE_RENDERI+10);
	ObjSprite2D_SetSourceRect(objT0,0, 0, 1024, 512);
	ObjSprite2D_SetDestRect(objT0,0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(objT0);
	ObjRender_SetPosition(objT0,GetScreenWidth/2,GetScreenHeight/2,0);
	ObjRender_SetAlpha(objT0, 0);
	
	let objT1 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objT1, IMG_TITLE_TEXT_01);
	Obj_SetRenderPriorityI(objT1, BASE_RENDERI+10);
	ObjSprite2D_SetSourceRect(objT1,0, 0, 1024, 512);
	ObjSprite2D_SetDestRect(objT1,0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(objT1);
	ObjRender_SetPosition(objT1,GetScreenWidth/2,GetScreenHeight/2,0);
	ObjRender_SetAlpha(objT1, 0);

	let t = 140;
	ascent(i in 0..t)
	{
		ObjRender_SetAlpha(objT0, 255/(t-1)*i);
		if(firstTimeBoot)
		{
			SkippableWait(1);
		}
	}
	ascent(i in 0..t)
	{
		ObjRender_SetAlpha(objT1, 255/(t-1)*i);
		if(firstTimeBoot)
		{
			SkippableWait(1);
		}
	}
	ascent(i in 0..60)
	{
		if(firstTimeBoot)
		{
			SkippableWait(1);
		}
	}
	if(growAlpha)
	{
		ObjRender_SetAlpha(objT0, 0);
		ObjRender_SetAlpha(objT1, 0);
	}
	yield;

	t = TO_MAINMENU_TRANSITION;
	ascent(i in 0..t)
	{	
		let scl = 1*sin(90/(t-1)*i);
		ObjRender_SetPosition(objT0,GetScreenWidth/2,GetScreenHeight/2-120*scl,0);
		ObjRender_SetPosition(objT1,GetScreenWidth/2,GetScreenHeight/2-120*scl,0);
		if(growAlpha)
		{
			ObjRender_SetAlpha(objT0, 255*scl);
			ObjRender_SetAlpha(objT1, 255*scl);
		}
		SkippableWait(1);
	}
	while(menuState==MENUSTATE_MAIN)
	{
		ObjRender_SetAlpha(objT0,255*mainMenu_AlphaScl);
		ObjRender_SetAlpha(objT1,255*mainMenu_AlphaScl);
		yield;
	}
	Obj_Delete(objT0);
	Obj_Delete(objT1);
}

task BoxRender()
{
	let objMMB = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objMMB, IMG_TITLE_MAINMENU_BOX);
	Obj_SetRenderPriorityI(objMMB, BASE_RENDERI+6);
	ObjSprite2D_SetSourceRect(objMMB,0, 0, 512, 256);
	ObjSprite2D_SetDestRect(objMMB,0, 0, 512, 256);
	ObjSprite2D_SetDestCenter(objMMB);
	ObjRender_SetPosition(objMMB,GetScreenWidth/2,GetScreenHeight/2+BOX_HEIGHTOFFSET,0);
	ObjRender_SetBlendType(objMMB, BLEND_SHADOW);
	ObjRender_SetScaleY(objMMB, 1.1);
	let objMMLs = [];
	ascent(i in 0..2)
	{
		ascent(o in 0..2)
		{
			let objMML = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objMML, IMG_TITLE_MAINMENU_LINES);
			Obj_SetRenderPriorityI(objMML, BASE_RENDERI+6);
			ObjSprite2D_SetDestCenter(objMML);
			ObjRender_SetPosition(objMML,GetScreenWidth/2,GetScreenHeight/2+BOX_HEIGHTOFFSET + 75*(1-2*i),0);
			ObjSprite2D_SetSourceRect(objMML,0, 0, 0, 32);
			ObjRender_SetScaleX(objMML, 1-2*o);
			ObjRender_SetScaleY(objMML, 1-2*i);
			objMMLs ~= [objMML];
		}
	}
	let t = TO_MAINMENU_TRANSITION;
	ascent(i in 0..t)
	{	
		let scl = 1*sin(90/(t-1)*i);
		ObjRender_SetColor(objMMB, 255*scl, 255*scl, 255*scl);
		let scl2 =  Interpolate_Decelerate(0,1,1/(t-1)*i);
		ascent(o in 0..4)
		{
			ObjSprite2D_SetSourceRect(objMMLs[o],0, 0, 256*scl2, 32);
			ObjSprite2D_SetDestRect(objMMLs[o],0, 0, 256*scl2, 32);
		}
		SkippableWait(1);
	}
	while(menuState==MENUSTATE_MAIN)
	{
		ObjRender_SetColor(objMMB, 255*mainMenu_AlphaScl, 255*mainMenu_AlphaScl, 255*mainMenu_AlphaScl);
		ascent(o in 0..4)
		{
			ObjRender_SetAlpha(objMMLs[o],255*mainMenu_AlphaScl);
		}
		yield;
	}
	Obj_Delete(objMMB);
	ascent(i in 0..4)
	{
		Obj_Delete(objMMLs[i]);
	}
}

task PortraitRender()
{
	let objMMC = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objMMC, IMG_TITLE_MAINMENU_CHARACTERS);
	Obj_SetRenderPriorityI(objMMC, BASE_RENDERI+5);
	ObjSprite2D_SetSourceRect(objMMC,0, 0, 1024, 512);
	ObjSprite2D_SetDestRect(objMMC,0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(objMMC);
	
	let objMMBoss = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objMMBoss, IMG_TITLE_MAINMENU_BOSSES);
	Obj_SetRenderPriorityI(objMMBoss, BASE_RENDERI);
	ObjSprite2D_SetSourceRect(objMMBoss,0, 0, 1024, 512);
	ObjSprite2D_SetDestRect(objMMBoss,0, 0, 1024, 512);
	ObjSprite2D_SetDestCenter(objMMBoss);
	ObjRender_SetBlendType(objMMBoss,BLEND_SUBTRACT);
	ObjRender_SetPosition(objMMBoss,GetScreenWidth/2,GetScreenHeight/2+50,0);
	
	let t = TO_MAINMENU_TRANSITION;
	ascent(i in 0..t)
	{	
		let scl = 1*sin(90/(t-1)*i);

		ObjRender_SetPosition(objMMC,GetScreenWidth/2,GetScreenHeight/2+60-60*scl,0);
		ObjRender_SetAlpha(objMMC, 255*scl);
		ObjRender_SetAlpha(objMMBoss, 64*scl);
		SkippableWait(1);
	}
	while(menuState==MENUSTATE_MAIN)
	{
		ObjRender_SetAlpha(objMMC, 255*mainMenu_AlphaScl);
		ObjRender_SetAlpha(objMMBoss, 64*mainMenu_AlphaScl);
		yield;
	}
	Obj_Delete(objMMC);
	Obj_Delete(objMMBoss);
}

task RenderMenuBackground(skipTransition)
{
	CloudRendering(skipTransition);
	SkyRender(skipTransition);
	SnowProgram(skipTransition);
}

let alphaScaleSnowstorm = 1;
let isRenderingBackground = true;
task SnowProgram(skipTransition)
{
	let angSand = 90;
	
	let objCloudParticle = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_STAGE_06_SNOW, [0,0,128,128], BLEND_ALPHA, BASE_RENDER+0.01);

	let scl = 5;

	let cc = 0;
	let cc2 = 0;
	while(menuState!=MENUSTATE_UNACTIVE && isRenderingBackground)
	{
		let yP = 100;
		alphaScaleSnowstorm = alphaScaleSnowstorm * 0.95 + background_AlphaScl * 0.05;

		if(cc2%10==0)
		{
			loop(3)
			{
				WindCloud(rand(1.25,3.25)/2);
			}
		}
		cc-=1.5;
		cc2++;
		yield;
		
	}
	
	Obj_Delete(objCloudParticle);
	
	task WindCloud(spd)
	{
		let randAng = rand(30,-30);
		let xC = rand(-10, GetScreenWidth+10);
		let yC = -rand(20,60);
		let alpha = rand(32,64)*1.1;
		let scaleX = rand(0.5,1.1)*(1-2*round(rand(0,1))) * 0.5;
		let scaleY = rand(0.5,1.1)*(1-2*round(rand(0,1))) * 0.5;
		let color = [255,255,255];
		let ang = rand(0,360);
		let previousAng = angSand;
		let cosAng = cos(angSand);
		let sinAng = sin(angSand);
		while(yC<GetScreenHeight+30 && menuState!=MENUSTATE_UNACTIVE && isRenderingBackground)
		{
			ObjParticleList_SetAlpha(objCloudParticle,alpha*alphaScaleSnowstorm);
			ObjParticleList_SetScale(objCloudParticle,scaleX,scaleY,0);
			ObjParticleList_SetPosition(objCloudParticle,xC,yC,0);
			ObjParticleList_SetAngleZ(objCloudParticle,ang);
			ObjParticleList_SetColor(objCloudParticle,color[0],color[1],color[2]);
			ObjParticleList_AddInstance(objCloudParticle);

			xC+=spd*cosAng;
			yC+=spd*sinAng;
			
			yield;
			
		}
	}
}
task SkyRender(skipTransition)
{
	let objSky = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objSky, IMG_STAGE_06_SKY);
	ObjSprite2D_SetSourceRect(objSky, 0, 0, 1024, 418);
	ObjSprite2D_SetDestRect(objSky, 0, 0, 1024, 418);
	ObjSprite2D_SetDestCenter(objSky);
	ObjRender_SetScaleY(objSky, 1.9);
	ObjRender_SetPosition(objSky, GetScreenWidth/2, GetScreenHeight/2-150, 0);
	Obj_SetRenderPriorityI(objSky, BASE_RENDERI);
	ObjRender_SetColor(objSky, 190, 190, 255);
	
	let t = 140;
	ascent(i in 0..t)
	{
		ObjRender_SetAlpha(objSky, 255/(t-1)*i);
		if(firstTimeBoot && skipTransition)
		{
			SkippableWait(1);
		}
	}
	while(menuState!=MENUSTATE_UNACTIVE && isRenderingBackground)
	{
		ObjRender_SetAlpha(objSky, 255*background_AlphaScl);
		yield;
	}
	Obj_Delete(objSky);
}
task CloudRendering(skipTransition)
{
	let objClouds = [];
	let randStarts = [];
	ascent(i in 0..3)
	{
		let objCloud = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objCloud, IMG_STAGE_06_CLOUD);
		ObjSprite2D_SetSourceRect(objCloud, 0, 0, 1024, 418);
		ObjSprite2D_SetDestRect(objCloud, 0, 0, 1024, 256);
		ObjRender_SetPosition(objCloud, 0, -20-40*i, 0);
		Obj_SetRenderPriorityI(objCloud, BASE_RENDERI+1);
		ObjRender_SetAlpha(objCloud, 200-25*i);
		ObjRender_SetScaleXYZ(objCloud, 2+0.4*i);
		ObjRender_SetBlendType(objCloud, BLEND_ADD_ARGB);
		ObjRender_SetTextureFilterMag(objCloud, FILTER_ANISOTROPIC);
		objClouds ~= [objCloud];
		randStarts ~= [rand(0,1024)];
	}
	let t = 140;
	let mc = 0;
	ascent(i in 0..t)
	{
		ascent(o in 0..3)
		{
			ObjRender_SetAlpha(objClouds[o], (200-25*o) * 1/(t-1)*i * 0.75);
			let movSpd = mc * 0.5;
			ObjSprite2D_SetSourceRect(objClouds[o], 0+movSpd + randStarts[o], 0, 1024+movSpd + randStarts[o], 418);
		}
		mc++;
		if(firstTimeBoot && skipTransition)
		{
			SkippableWait(1);
		}
	}
	while(menuState!=MENUSTATE_UNACTIVE && isRenderingBackground)
	{
		ascent(i in 0..3)
		{
			let movSpd = mc * 0.5;
			ObjSprite2D_SetSourceRect(objClouds[i], 0+movSpd + randStarts[i], 0, 1024+movSpd + randStarts[i], 418);
			ObjRender_SetAlpha(objClouds[i], (200-25*i) * 0.75 * background_AlphaScl);
		}
		mc++;
		yield;
	}
	ascent(i in 0..3)
	{
		Obj_Delete(objClouds[i]);
	}
}