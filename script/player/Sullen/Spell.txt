task TSpell
{
	FLASH;
	SE_PlayLen(SPELLTHING);
	
	let objManage = GetSpellManageObject();
	Obj_Delete(objManage);
	if(GetCommonData("IsStage1", false))
	{
		NotifyEventAll(EV_USER_PLAYER_BOMB_DISPLAY, "Nullify", [128,255,128]);
		SpellBasic;
	}
		else
		{
		if(GetVirtualKeyState(VK_SLOWMOVE)!=KEY_FREE)
		{
			NotifyEventAll(EV_USER_PLAYER_BOMB_DISPLAY, "Aura &quot;All-Out Sphere Attack&quot;", [128,255,128]);
			SpellSullenFocus;
		}
		else
		{
			NotifyEventAll(EV_USER_PLAYER_BOMB_DISPLAY, "Grass Art &quot;Chesnaught's Aegis&quot;", [128,255,128]);
			SpellSullenUnfocus;
		}
	}
	let amount = 3;
	loop(30)
	{
		SetCommonData("StateFaceShake",amount);
		amount-=3/30;
		yield;
	}
	SetCommonData("StateFaceShake",0);
}
task FLASH
{
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj,IMG_WHITECIRCLE_L);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(obj, 4);
	Obj_SetRenderPriorityI(obj,42);
	ObjRender_SetAngleZ(obj,0);
	let ALF=0;
	ObjRender_SetAlpha(obj,ALF);
	let scale =10;
	ObjRender_SetScaleXYZ(obj,scale,scale,scale);
	ObjPrim_SetDestCenter(obj,0,0,512,512);
	loop(20)
	{
		ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAlpha(obj,ALF);
		ALF+=255/20;
		yield;
	}
	loop(20)
	{
		ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAlpha(obj,ALF);
		ALF-=255/20;
		yield;
	}
	Obj_Delete(obj);
}

task SpellBasic()
{
	OnSpell = true;
	SetPlayerInvincibilityFrame_Special(180);
	ClimaxCircle(GetPlayerX,GetPlayerY,4,0.05,80,0,0,0,rand(0,360),255);
	DARKNESS(0,0,0,BLEND_ALPHA,128,4,180);
	SpellcardBomb_th10();
	wait(180);
	SE_PlayLen(BARRIERON);
	OnSpell=false;
}

task SpellcardBomb_th10
{
	let objManage = GetSpellManageObject;
	let spellTime = 0;
	let spellHitSize = 0;
	
	let spellX = GetPlayerX;
	let spellY = GetPlayerY;
	
	let mainAlpha = 255;
	
	let spellRise = 1;      //Reimu - 1    Marisa - 1.5
	let spellSize = 75;    //Reimu - 180  Marisa - 130
	let maxSpellTime = 90;
	
	let objSpell = ObjSpell_Create();
	ObjSpell_Regist(objSpell);
	ObjSpell_SetDamage(objSpell, 10);
	ObjSpell_SetEraseShot(objSpell, true);
	
	function CreateRing(x, y, vertexCount, width, maxRadius)
	{
		let loc_obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(loc_obj, IMG_EFFECT_LINE);
		ObjPrim_SetPrimitiveType(loc_obj, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(loc_obj, vertexCount+2);
		ObjRender_SetBlendType(loc_obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(loc_obj, 70);
		
		Obj_SetValue(loc_obj, "a", 0);
		Obj_SetValue(loc_obj, "b", 0);
		Obj_SetValue(loc_obj, "c", 0);
		
		task ManageRing()
		{
			let calcAngle = 0;
			let calcUVT = 384/(vertexCount/2);
			ascent(i in 0..(vertexCount/2) + 2)
			{
				ObjPrim_SetVertexUVT(loc_obj, 0 + i*2, 0, 0 + calcUVT*i);
				ObjPrim_SetVertexUVT(loc_obj, 1 + i*2, 32, 0 + calcUVT*i);
			}
			
			while(!Obj_IsDeleted(loc_obj))
			{
				ascent(i in 0..(vertexCount/2) + 2)
				{
					calcAngle = i * (360/(vertexCount/2));
					ObjPrim_SetVertexPosition(loc_obj, 0 + i*2, 
					0 + (Obj_GetValue(loc_obj, "b") * cos(calcAngle + Obj_GetValue(loc_obj, "a"))), 
					0 + (Obj_GetValue(loc_obj, "b") * sin(calcAngle + Obj_GetValue(loc_obj, "a"))), 1);
					
					ObjPrim_SetVertexPosition(loc_obj, 1 + i*2, 
					0 + ((Obj_GetValue(loc_obj, "b") - Obj_GetValue(loc_obj, "c")) * cos(calcAngle + Obj_GetValue(loc_obj, "a"))), 
					0 + ((Obj_GetValue(loc_obj, "b") - Obj_GetValue(loc_obj, "c")) * sin(calcAngle + Obj_GetValue(loc_obj, "a"))), 1);
				}
				yield;
			}
		}
		ObjRender_SetPosition(loc_obj, 100, 100, 1);
		ManageRing();
		return loc_obj;
	}
	
	task CreateMoFBombRing(obj, type, width, maxRadius)
	{
		let ring = CreateRing(GetPlayerX, spellY, 128, 18, 50);
		
		let spellRadiusSpeed = 2.5;
		let spellRadiusWeight = 8;
		let spellMaxMaxRadius = 150;
		let spellMaxRadius = maxRadius;
		let spellDistance = spellMaxMaxRadius - spellMaxRadius;
		
		let spellWidth = width;
		let spellRad = spellSize;
		let spellAlpha = 255;
		let spellAngleZ = 0;
	
		alternative(type)
		case(0) //Main Ring
		{
			spellRadiusSpeed = 2.5;
			spellRadiusWeight = 8;
			spellMaxMaxRadius = spellRad;
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		case(1) //Sub Ring
		{
			spellRadiusSpeed = 2;
			spellRadiusWeight = 8;
			spellMaxMaxRadius = spellRad - 8;
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		case(2) //Purple Ring A
		{
			spellRadiusSpeed = 2;
			spellRadiusWeight = 22;
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		case(3) //Purple Ring B
		{
			spellRadiusSpeed = 2;
			spellRadiusWeight = 22;
			spellMaxMaxRadius = spellRad + 30;
	
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		
		while(!Obj_IsDeleted(ring))
		{
			Obj_SetValue(ring, "a", spellAngleZ);
			Obj_SetValue(ring, "b", spellMaxRadius);
			Obj_SetValue(ring, "c", spellWidth);
			ObjRender_SetPosition(ring, spellX, spellY, 1);
				
			alternative(type)
			case(0) //Main Ring
			{
				ObjRender_SetAlpha(ring, mainAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 5)
					{
						spellRadiusSpeed = 5;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				
				if(mainAlpha <= 0)
				{
					Obj_Delete(ring);
				}
				spellHitSize = spellMaxRadius - 8;
				spellAngleZ += 32;
			}
			case(1) //Sub Ring
			{
				ObjRender_SetAlpha(ring, mainAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 4)
					{
						spellRadiusSpeed = 4;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				
				if(mainAlpha <= 0)
				{
					Obj_Delete(ring);
				}
				
				spellAngleZ -= 13;
			}
			case(2) //Purple Ring A
			{
				ObjRender_SetColor(ring, 255, 0, 255);
				ObjRender_SetAlpha(ring, spellAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 5)
					{
						spellRadiusSpeed = 5;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				if(spellDistance < 20)
				{
					if(spellAlpha <= 0)
					{
						Obj_Delete(ring);
					}
					else
					{
						spellAlpha -= 10;
					}
				}
				spellAngleZ += 7;
			}
			case(3) //Purple Ring B
			{
				ObjRender_SetColor(ring, 255, 0, 255);
				ObjRender_SetAlpha(ring, spellAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 5)
					{
						spellRadiusSpeed = 5;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				if(spellDistance < 20)
				{
					if(spellAlpha <= 0)
					{
						Obj_Delete(ring);
					}
					else
					{
						spellAlpha -= 10;
					}
				}
				spellAngleZ -= 7;
			}
			yield;
		}
	}
	
	task ManageHitBox()
	{
		while(spellTime < maxSpellTime)
		{
			ObjSpell_SetIntersectionCircle(objSpell, spellX, spellY, spellHitSize);
			yield;
		}
		Obj_Delete(objSpell);
	}
	
	task ManageParticles()
	{
		task CreateEffectParticle(speed, angle, type)
		{
			let loc_x = spellX + ((spellSize - 18) * cos(angle));
			let loc_y = spellY + ((spellSize - 18) * sin(angle));
			let loc_scale = rand(0.75, 1.5);
			let loc_scaleMod = loc_scale/20;
			let loc_angle = rand(0, 360);
			let loc_angMod = rand(-5, 5);
			
			let x_vel = speed * cos(angle);
			let y_vel = speed * sin(angle);

			let col = [255,0,0];
			alternative(type)
			case(0)
			{
				col = [255, 0, 0];
			}
			case(1)
			{
				col = [0, 0, 255];
			}
			
			while(loc_scale > 0)
			{
				ObjParticleList_SetAlpha(leafArray,255);
				ObjParticleList_SetScale(leafArray,loc_scale,loc_scale,0);
				ObjParticleList_SetPosition(leafArray,loc_x, loc_y,0);
				ObjParticleList_SetColor(leafArray,col[0],col[1],col[2]);
				ObjParticleList_SetAngleZ(leafArray,loc_angle);
				ObjParticleList_AddInstance(leafArray);

				loc_x += x_vel;
				loc_y += y_vel - spellRise;
				loc_scale -= loc_scaleMod;
				loc_angle += loc_angMod;
				yield;
			}
		}
		
		loop(30){yield;}
		loop(maxSpellTime)
		{
			CreateEffectParticle(2.75, rand(0, 360), 0);
			CreateEffectParticle(2.75, rand(0, 360), 0);
			CreateEffectParticle(-2.75, rand(0, 360), 1);
			CreateEffectParticle(-2.75, rand(0, 360), 1);
			yield;
		}
	}
	
	//PlaySE(se_slash);
	//SetPlayerInvincibilityFrame(300);
	ManageHitBox();
	ManageParticles();
	CreateMoFBombRing(objManage, 0, 28, 50);
	CreateMoFBombRing(objManage, 1, 18, 50);
	
	CreateMoFBombRing(objManage, 2, 20, 50);
	loop(12){spellY -= spellRise;yield;}
	CreateMoFBombRing(objManage, 3, 20, 50);
	loop(12){spellY -= spellRise;yield;}
	CreateMoFBombRing(objManage, 2, 20, 50);
	loop(12){spellY -= spellRise;yield;}
	CreateMoFBombRing(objManage, 3, 20, 50);
	
	while(mainAlpha > 0)
	{
		if(spellTime > maxSpellTime)
		{
			mainAlpha -= 15;
			spellRise -= 0.1;
		}
		spellY -= spellRise;
		spellTime++;
		yield;
	}
	Obj_Delete(objManage);
}



task SpellSullenUnfocus
{
	OnSpell = true;
	let t = 100;
	SetPlayerInvincibilityFrame_Special(t);
	ClimaxCircle(GetPlayerX,GetPlayerY,4,0.05,80,0,0,0,rand(0,360),t);
	DARKNESS(0,0,0,BLEND_ALPHA,128,4,t);
	
	SE_PlayLen(KOISHISLASH);
	
	TShake(120,3);
	Shield();
	wait(t);

	SE_PlayLen(BARRIERON);
	OnSpell=false;
}
let totalSpellsActive = 1;
task Shield()
{
	yield;
	let x = GetPlayerX;
	let y = GetPlayerY;
	
	let obj1s = [];
	let obj2s = [];
	let currentActiveCount = totalSpellsActive;
	totalSpellsActive++;
	ascent(i in 0..2)
	{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SPIKEY_00);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, [BLEND_SUBTRACT, BLEND_ADD_ARGB][i]);
		Obj_SetRenderPriorityI(obj,39+i);
		ObjRender_SetAngleZ(obj,0);
		ObjPrim_SetDestCenter(obj,0,0,128,128);
		
		ObjRender_SetColor(obj, 255,255,255);
		if(i==1)
		{
			ObjRender_SetColor(obj, 32,255,32);
		}
		obj1s ~= [obj];
		
		let obj2 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj2,IMG_SPIKEY_01);
		ObjPrim_SetPrimitiveType(obj2, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj2, 4);
		ObjRender_SetBlendType(obj2, [BLEND_SUBTRACT, BLEND_ADD_ARGB][i]);
		Obj_SetRenderPriorityI(obj2,39+i);
		ObjRender_SetAngleZ(obj2,0);
		ObjPrim_SetDestCenter(obj2,0,0,128,128);
		if(i==1)
		{
			ObjRender_SetColor(obj2, 128,255,128);
		}
		obj2s ~= [obj2];
	}
	
	let objS = CreatePlayerShotA1(x, y, 0, 0, 3, 1000, 1);
	ObjShot_SetSpellFactor(objS, true);
	ObjShot_SetEraseShot(objS, true);
	
	let scl = 0;
	let naturalTimer = 60*8 + 60*(currentActiveCount*2);
	while(!Obj_IsDeleted(objS) && naturalTimer > 0 && GetPlayerState == STATE_NORMAL )
	{
		scl = scl * 0.9 + (1+currentActiveCount^1.2) * 0.1;
		ObjShot_SetIntersectionScaleXY(objS, scl*3);
		ObjMove_SetPosition(objS, GetPlayerX, GetPlayerY);
		
		ascent(o in 0..2)
		{
			let obj1 = obj1s[o];
			let obj2 = obj2s[o];
			ObjRender_SetScaleXYZ(obj1,scl*1.2);
			ObjRender_SetScaleXYZ(obj2,scl);
			ObjRender_SetPosition(obj1, GetPlayerX, GetPlayerY, 0);
			ObjRender_SetPosition(obj2, GetPlayerX, GetPlayerY, 0);
			
			ObjRender_SetAngleZ(obj1, ObjRender_GetAngleZ(obj1) + 1);
			ObjRender_SetAngleZ(obj2, ObjRender_GetAngleZ(obj2) + 2);
		}
		naturalTimer--;
		yield;
	}
	totalSpellsActive = max(1, totalSpellsActive-1);
	if(!Obj_IsDeleted(objS))
	{
		Obj_Delete(objS);
	}
	SE_PlayLen(BOON1);
	let objS2 = CreatePlayerShotA1(x, y, 0, 0, 1, 99999, 1);
	ObjShot_SetSpellFactor(objS2, true);
	ObjShot_SetEraseShot(objS2, true);
	
	ascent(i in 0..60)
	{
		let scl2 = scl - scl/60*i;
		ObjShot_SetIntersectionScaleXY(objS2, scl2*3);
		ObjMove_SetPosition(objS2, GetPlayerX, GetPlayerY);
		ascent(o in 0..2)
		{
			let obj1 = obj1s[o];
			let obj2 = obj2s[o];
			ObjRender_SetScaleXYZ(obj1,scl2*1.2);
			ObjRender_SetScaleXYZ(obj2,scl2);
			ObjRender_SetPosition(obj1, GetPlayerX, GetPlayerY, 0);
			ObjRender_SetPosition(obj2, GetPlayerX, GetPlayerY, 0);
			
			ObjRender_SetAngleZ(obj1, ObjRender_GetAngleZ(obj1) + 1);
			ObjRender_SetAngleZ(obj2, ObjRender_GetAngleZ(obj2) + 2);
		}
		yield;
	}
	Obj_Delete(objS2);
	ascent(o in 0..2)
	{
		let obj1 = obj1s[o];
		let obj2 = obj2s[o];
		Obj_Delete(obj1);
		Obj_Delete(obj2);
	}


}

let wooshArray;
let leafArray;
task InitialiseSpellArray
{
	wooshArray = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_SHOT, [128,128,256,256], BLEND_ADD_ARGB, 0.5);
	leafArray = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_EFFECT_LEAF, [0,0,32,32], BLEND_ADD_ARGB, 0.7);
}
task SpellSullenFocus
{
	OnSpell=true;
	let t = 300;
	SetPlayerSpeed(PLAYERSPEED[0]/4, PLAYERSPEED[1]/4);
	SetPlayerInvincibilityFrame_Special(t);
	ClimaxCircle(GetPlayerX,GetPlayerY,4,0.05,80,0,0,0,rand(0,360),t);
	DARKNESS(0,0,0,BLEND_ALPHA,128,4,t);

	let RANDER = 5;
	let ang = -90;
	ascent(i in 0..7)
	{
		let ang2 = ang + 90 - 180/6*i;
		AuraShot(120*cos(ang2), 60*sin(ang2), ang2);
	}
	wait(50);
	ascent(i in 0..8)
	{
		let ang2 = ang + 90 - 180/6*i + (180/6)/2;
		AuraShot(120*cos(ang2), 60*sin(ang2), ang2);
	}
	wait(50);
	ascent(i in 0..10)
	{
		let ang2 = 360/9*i;
		ascent(o in 0..2)
		{
			let bb = [1,-1][o];
			let ang3 = -90 + ang2 * bb + (90/9) * bb;
			AuraShot(120*cos(ang3), 120*sin(ang3), ang3);
		}
		wait(10);
	}
    SetPlayerSpeed(PLAYERSPEED[0], PLAYERSPEED[1]);
	loop(100)
	{
		yield;
	}
	SE_PlayLen(BARRIERON);
	OnSpell=false;
	
}

task AuraShot(xOff, yOff, ang)
{
	let objS = CreatePlayerShotA1(GetPlayerX, GetPlayerY, 0, ang, 0, 99999, 22);
	ObjShot_SetSpellFactor(objS, true);
	ObjShot_SetEraseShot(objS, true);
	ObjRender_SetBlendType(objS, BLEND_ADD_ARGB);
	ObjRender_SetAngleZ(objS, rand(0,360));
	SE_PlayLen(AURACHARGE);
	ObjShot_SetAutoDelete(objS, false);
	
	let x = GetPlayerX;
	let y = GetPlayerY;
	let spnSpd = 9.213;
	let dampn = 0.95;
	ascent(i in 0..60)
	{
		x = x * dampn + (GetPlayerX + xOff) * (1-dampn);
		y = y * dampn + (GetPlayerY + yOff) * (1-dampn);
		let scl = 1*sin(90/59*i);
		ObjRender_SetScaleXYZ(objS, scl);
		ObjShot_SetIntersectionScaleXY(objS, scl);
		ObjMove_SetPosition(objS, x, y);
		ObjRender_SetAngleZ(objS, ObjRender_GetAngleZ(objS)+spnSpd);
		ObjShot_SetDamage(objS, 5*scl);
		if(!Obj_IsDeleted(objS))
		{
			AuraGlow(ObjMove_GetX(objS),ObjMove_GetY(objS),scl);
		}
		yield;
	}
	ObjShot_SetAutoDelete(objS, true);
	SE_PlayLen(AURASHOT);
	ObjMove_SetSpeed(objS, 20);
	ObjShot_SetDamage(objS, 40);
	while(!Obj_IsDeleted(objS))
	{
		AuraGlow(ObjMove_GetX(objS),ObjMove_GetY(objS),1);
		ObjRender_SetAngleZ(objS, ObjRender_GetAngleZ(objS)+spnSpd);
		yield;
	}
}

task AuraGlow(x,y,scl)
{
	let ang = rand(0,360);

	ascent(i in 0..40)
	{
		let s = scl + (1)/40*i;
		let alf = (255-255/40*i) * 0.2;
		ObjParticleList_SetAlpha(wooshArray,alf);
		ObjParticleList_SetScale(wooshArray,s,s,0);
		ObjParticleList_SetPosition(wooshArray,x, y,0);
		ObjParticleList_SetAngleZ(wooshArray,ang);
		ObjParticleList_AddInstance(wooshArray);
		yield;
	}
}
