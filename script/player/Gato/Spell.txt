task TSpell
{
	FLASH;
	SE_PlayLen(SPELLTHING);
	
	let objManage = GetSpellManageObject();
	Obj_Delete(objManage);
	if(GetCommonData("IsStage1", false))
	{
		NotifyEventAll(EV_USER_PLAYER_BOMB_DISPLAY, "Nullify", [0,0,0],90);
		SpellBasic;
	}
	else
	{
		if(GetVirtualKeyState(VK_SLOWMOVE)!=KEY_FREE)
		{
			NotifyEventAll(EV_USER_PLAYER_BOMB_DISPLAY, "-Ruin-", [0,0,0],90);
			SpellGatoFocus;
		}
		else
		{
			NotifyEventAll(EV_USER_PLAYER_BOMB_DISPLAY, "-Nova-", [0,0,0],90);
			SpellGatoUnfocus;
		}
	}
	let amount = 3;
	loop(30)
	{
		SetCommonData("StateFaceShake",amount);
		amount-=3/30;
		yield;
	}
	SetCommonData("StateFaceShake",0);
}

task FLASH
{
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj,IMG_WHITECIRCLE_L);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(obj, 4);
	Obj_SetRenderPriorityI(obj,42);
	ObjRender_SetAngleZ(obj,0);
	let ALF=0;
	ObjRender_SetAlpha(obj,ALF);
	let scale =10;
	ObjRender_SetScaleXYZ(obj,scale,scale,scale);
	ObjPrim_SetDestCenter(obj,0,0,512,512);
	loop(20)
	{
		ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAlpha(obj,ALF);
		ALF+=255/20;
		yield;
	}
	loop(20)
	{
		ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAlpha(obj,ALF);
		ALF-=255/20;
		yield;
	}
	Obj_Delete(obj);
}

task SpellBasic()
{
	OnSpell = true;
	SetPlayerInvincibilityFrame_Special(180);
	ClimaxCircle(GetPlayerX,GetPlayerY,4,0.05,80,0,0,0,rand(0,360),255);
	DARKNESS(0,0,0,BLEND_ALPHA,128,4,180);
	SpellcardBomb_th10();
	wait(180);
	SE_PlayLen(BARRIERON);
	OnSpell=false;
}

task SpellcardBomb_th10
{
	let objManage = GetSpellManageObject;
	let spellTime = 0;
	let spellHitSize = 0;
	
	let spellX = GetPlayerX;
	let spellY = GetPlayerY;
	
	let mainAlpha = 255;
	
	let spellRise = 1;      //Reimu - 1    Marisa - 1.5
	let spellSize = 75;    //Reimu - 180  Marisa - 130
	let maxSpellTime = 90;
	
	let objSpell = ObjSpell_Create();
	ObjSpell_Regist(objSpell);
	ObjSpell_SetDamage(objSpell, 10);
	ObjSpell_SetEraseShot(objSpell, true);
	
	function CreateRing(x, y, vertexCount, width, maxRadius)
	{
		let loc_obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(loc_obj, IMG_EFFECT_LINE);
		ObjPrim_SetPrimitiveType(loc_obj, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(loc_obj, vertexCount+2);
		ObjRender_SetBlendType(loc_obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(loc_obj, 70);
		
		Obj_SetValue(loc_obj, "a", 0);
		Obj_SetValue(loc_obj, "b", 0);
		Obj_SetValue(loc_obj, "c", 0);
		
		task ManageRing()
		{
			let calcAngle = 0;
			let calcUVT = 384/(vertexCount/2);
			ascent(i in 0..(vertexCount/2) + 2)
			{
				ObjPrim_SetVertexUVT(loc_obj, 0 + i*2, 0, 0 + calcUVT*i);
				ObjPrim_SetVertexUVT(loc_obj, 1 + i*2, 32, 0 + calcUVT*i);
			}
			
			while(!Obj_IsDeleted(loc_obj))
			{
				ascent(i in 0..(vertexCount/2) + 2)
				{
					calcAngle = i * (360/(vertexCount/2));
					ObjPrim_SetVertexPosition(loc_obj, 0 + i*2, 
					0 + (Obj_GetValue(loc_obj, "b") * cos(calcAngle + Obj_GetValue(loc_obj, "a"))), 
					0 + (Obj_GetValue(loc_obj, "b") * sin(calcAngle + Obj_GetValue(loc_obj, "a"))), 1);
					
					ObjPrim_SetVertexPosition(loc_obj, 1 + i*2, 
					0 + ((Obj_GetValue(loc_obj, "b") - Obj_GetValue(loc_obj, "c")) * cos(calcAngle + Obj_GetValue(loc_obj, "a"))), 
					0 + ((Obj_GetValue(loc_obj, "b") - Obj_GetValue(loc_obj, "c")) * sin(calcAngle + Obj_GetValue(loc_obj, "a"))), 1);
				}
				yield;
			}
		}
		ObjRender_SetPosition(loc_obj, 100, 100, 1);
		ManageRing();
		return loc_obj;
	}
	
	task CreateMoFBombRing(obj, type, width, maxRadius)
	{
		let ring = CreateRing(GetPlayerX, spellY, 128, 18, 50);
		
		let spellRadiusSpeed = 2.5;
		let spellRadiusWeight = 8;
		let spellMaxMaxRadius = 150;
		let spellMaxRadius = maxRadius;
		let spellDistance = spellMaxMaxRadius - spellMaxRadius;
		
		let spellWidth = width;
		let spellRad = spellSize;
		let spellAlpha = 255;
		let spellAngleZ = 0;
	
		alternative(type)
		case(0) //Main Ring
		{
			spellRadiusSpeed = 2.5;
			spellRadiusWeight = 8;
			spellMaxMaxRadius = spellRad;
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		case(1) //Sub Ring
		{
			spellRadiusSpeed = 2;
			spellRadiusWeight = 8;
			spellMaxMaxRadius = spellRad - 8;
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		case(2) //Purple Ring A
		{
			spellRadiusSpeed = 2;
			spellRadiusWeight = 22;
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		case(3) //Purple Ring B
		{
			spellRadiusSpeed = 2;
			spellRadiusWeight = 22;
			spellMaxMaxRadius = spellRad + 30;
	
			spellDistance = spellMaxMaxRadius - spellMaxRadius;
		}
		
		while(!Obj_IsDeleted(ring))
		{
			Obj_SetValue(ring, "a", spellAngleZ);
			Obj_SetValue(ring, "b", spellMaxRadius);
			Obj_SetValue(ring, "c", spellWidth);
			ObjRender_SetPosition(ring, spellX, spellY, 1);
				
			alternative(type)
			case(0) //Main Ring
			{
				ObjRender_SetAlpha(ring, mainAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 5)
					{
						spellRadiusSpeed = 5;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				
				if(mainAlpha <= 0)
				{
					Obj_Delete(ring);
				}
				spellHitSize = spellMaxRadius - 8;
				spellAngleZ += 32;
			}
			case(1) //Sub Ring
			{
				ObjRender_SetAlpha(ring, mainAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 4)
					{
						spellRadiusSpeed = 4;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				
				if(mainAlpha <= 0)
				{
					Obj_Delete(ring);
				}
				
				spellAngleZ -= 13;
			}
			case(2) //Purple Ring A
			{
				ObjRender_SetColor(ring, 255, 0, 255);
				ObjRender_SetAlpha(ring, spellAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 5)
					{
						spellRadiusSpeed = 5;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				if(spellDistance < 20)
				{
					if(spellAlpha <= 0)
					{
						Obj_Delete(ring);
					}
					else
					{
						spellAlpha -= 10;
					}
				}
				spellAngleZ += 7;
			}
			case(3) //Purple Ring B
			{
				ObjRender_SetColor(ring, 255, 0, 255);
				ObjRender_SetAlpha(ring, spellAlpha);
				
				
				if(spellDistance > 1)
				{
					spellDistance = spellMaxMaxRadius - spellMaxRadius;
					let spellRadiusSpeed = spellDistance / spellRadiusWeight;
					
					if(spellRadiusSpeed > 5)
					{
						spellRadiusSpeed = 5;
					}
					spellMaxRadius += spellRadiusSpeed;
				}
				if(spellDistance < 20)
				{
					if(spellAlpha <= 0)
					{
						Obj_Delete(ring);
					}
					else
					{
						spellAlpha -= 10;
					}
				}
				spellAngleZ -= 7;
			}
			yield;
		}
	}
	
	task ManageHitBox()
	{
		while(spellTime < maxSpellTime)
		{
			ObjSpell_SetIntersectionCircle(objSpell, spellX, spellY, spellHitSize);
			yield;
		}
		Obj_Delete(objSpell);
	}
	
	task ManageParticles()
	{
		task CreateEffectParticle(speed, angle, type)
		{
			let loc_x = spellX + ((spellSize - 18) * cos(angle));
			let loc_y = spellY + ((spellSize - 18) * sin(angle));
			let loc_scale = rand(0.75, 1.5);
			let loc_scaleMod = loc_scale/20;
			let loc_angle = rand(0, 360);
			let loc_angMod = rand(-5, 5);
			
			let x_vel = speed * cos(angle);
			let y_vel = speed * sin(angle);

			let col = [255,0,0];
			alternative(type)
			case(0)
			{
				col = [255, 0, 0];
			}
			case(1)
			{
				col = [0, 0, 255];
			}
			
			while(loc_scale > 0)
			{
				ObjParticleList_SetAlpha(leafArray,255);
				ObjParticleList_SetScale(leafArray,loc_scale,loc_scale,0);
				ObjParticleList_SetPosition(leafArray,loc_x, loc_y,0);
				ObjParticleList_SetColor(leafArray,col[0],col[1],col[2]);
				ObjParticleList_SetAngleZ(leafArray,loc_angle);
				ObjParticleList_AddInstance(leafArray);

				loc_x += x_vel;
				loc_y += y_vel - spellRise;
				loc_scale -= loc_scaleMod;
				loc_angle += loc_angMod;
				yield;
			}
		}
		
		loop(30){yield;}
		loop(maxSpellTime)
		{
			CreateEffectParticle(2.75, rand(0, 360), 0);
			CreateEffectParticle(2.75, rand(0, 360), 0);
			CreateEffectParticle(-2.75, rand(0, 360), 1);
			CreateEffectParticle(-2.75, rand(0, 360), 1);
			yield;
		}
	}
	
	//PlaySE(se_slash);
	//SetPlayerInvincibilityFrame(300);
	ManageHitBox();
	ManageParticles();
	CreateMoFBombRing(objManage, 0, 28, 50);
	CreateMoFBombRing(objManage, 1, 18, 50);
	
	CreateMoFBombRing(objManage, 2, 20, 50);
	loop(12){spellY -= spellRise;yield;}
	CreateMoFBombRing(objManage, 3, 20, 50);
	loop(12){spellY -= spellRise;yield;}
	CreateMoFBombRing(objManage, 2, 20, 50);
	loop(12){spellY -= spellRise;yield;}
	CreateMoFBombRing(objManage, 3, 20, 50);
	
	while(mainAlpha > 0)
	{
		if(spellTime > maxSpellTime)
		{
			mainAlpha -= 15;
			spellRise -= 0.1;
		}
		spellY -= spellRise;
		spellTime++;
		yield;
	}
	Obj_Delete(objManage);
}

task SpellGatoUnfocus
{
	OnSpell = true;
	SetPlayerSpeed(1.0,0.4);
	SetPlayerInvincibilityFrame_Special(300);
	ClimaxCircle(GetPlayerX,GetPlayerY,4,0.05,80,0,0,0,rand(0,360),255);
	DARKNESS(0,0,0,BLEND_ALPHA,128,4,300);
	SE_PlayLen(CHARGE);
	
	GiantBall();
	wait(150);
	TShake(120,3);
	SE_PlayLen(NHIT);
    SetPlayerSpeed(PLAYERSPEED[0], PLAYERSPEED[1]);
	
	wait(150);
	SE_PlayLen(BARRIERON);
	OnSpell=false;
}

task GiantBall()
{
	let x = GetPlayerX;
	let y = GetPlayerY;
		
	let obj2 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj2,IMG_GIANTBALL);
	ObjPrim_SetPrimitiveType(obj2, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(obj2, 4);
	ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj2,40);
	ObjRender_SetAngleZ(obj2,0);
	ObjPrim_SetDestCenter(obj2,0,0,128,128);
	
	let obj = ObjSpell_Create();
	ObjSpell_Regist(obj);
	ObjSpell_SetEraseShot(obj,false);
	ObjSpell_SetEraseShot(obj, true);
	
		
	ascent(i in 0..150)
	{
		x = GetPlayerX;
		y = GetPlayerY;
		let s = 3 * sin(90/149*i);
		ObjRender_SetScaleXYZ(obj2, s);
		ObjRender_SetPosition(obj2, x, y, 0);
		ObjRender_SetAngleZ(obj2, rand(0,360));
		ObjSpell_SetIntersectionCircle(obj, x, y, 64*s);
		ObjSpell_SetDamage(obj, 6*s/3);
		CreateShine(s);
		yield;
	}
	let moveAng = -90;
	let EnemyObjectArray=GetIntersectionRegistedEnemyID;
	let Dis=2000;
	let nearObj=-1;
	if(length(EnemyObjectArray)!=0)
	{
		ascent(i in 0..length(EnemyObjectArray))
		{
			let dis = ((ObjRender_GetX(EnemyObjectArray[i])-GetPlayerX)^2 + (ObjRender_GetY(EnemyObjectArray[i])-GetPlayerY)^2)^0.5;
			if(dis<Dis && Obj_GetValueD(EnemyObjectArray[i], "isHittable", false) == true)
			{
				nearObj=EnemyObjectArray[i];
				Dis=dis;
			}
		}
	}
	if(nearObj!=-1)
	{
		moveAng=atan2(ObjRender_GetY(nearObj)-GetPlayerY,ObjRender_GetX(nearObj)-GetPlayerX);
	}
	let xSpd = 5 * cos(moveAng);
	let ySpd = 5 * sin(moveAng);
	while(x>-256 && x<GetStgFrameWidth+256 && y>-256 && y<GetStgFrameHeight+256)
	{
		let s = 3;
		ObjRender_SetScaleXYZ(obj2, s);
		ObjRender_SetPosition(obj2, x, y, 0);
		ObjRender_SetAngleZ(obj2, rand(0,360));
		CreateShine(s);
		ObjSpell_SetIntersectionCircle(obj, x, y, 64*s);
		ObjSpell_SetDamage(obj, 19);
		x+=xSpd;
		y+=ySpd;
		yield;
	}
	Obj_Delete(obj);
	Obj_Delete(obj2);
	task CreateShine(s)
	{
		let ang = rand(0,360);
		let col = [255,255,64];
		ascent(i in 0..40)
		{
			let scl = (s*2)/40*i;
			let alf = (255-255/40*i)*0.1;
			ObjParticleList_SetAlpha(wooshArray,alf);
			ObjParticleList_SetScale(wooshArray,scl,scl,0);
			ObjParticleList_SetPosition(wooshArray,x, y,0);
			ObjParticleList_SetColor(wooshArray,col[0],col[1],col[2]);
			ObjParticleList_SetAngleZ(wooshArray,ang);
			ObjParticleList_AddInstance(wooshArray);
			yield;
		}
	}
}

let wooshArray;
let wooshArray2;
let shineArray;
let leafArray;
task InitialiseSpellArray
{
	wooshArray = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_WOOSH, [1,1,127,127], BLEND_ADD_ARGB, 0.28);
	wooshArray2 = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_WOOSH, [1,1,127,127], BLEND_SUBTRACT, 0.29);
	shineArray = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_GIANTBALLGLOW, [0,0,256,256], BLEND_ADD_ARGB, 0.4);
	leafArray = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_EFFECT_LEAF, [0,0,32,32], BLEND_ADD_ARGB, 0.7);
}
task SpellGatoFocus
{
	OnSpell=true;
	SetPlayerSpeed(1.0,0.4);
	SetPlayerInvincibilityFrame_Special(375);
	ClimaxCircle(GetPlayerX,GetPlayerY,4,0.05,80,0,0,0,rand(0,360),255);
	DARKNESS(0,0,0,BLEND_ALPHA,128,4,300);

	SE_PlayLen(SE_SPELL2);

	let RANDER = 5;
	let ang = -90;
	ascent(o in 0..300)
	{
		if(GetVirtualKeyState(VK_LEFT)!=KEY_FREE)
		{
			ang -= 0.1;
		}
		if(GetVirtualKeyState(VK_RIGHT)!=KEY_FREE)
		{
			ang += 0.1;
		}
		let sss = rand(15,17)*1.75;
		let obj = CreatePlayerShotA1(GetPlayerX+rand(RANDER,-RANDER),GetPlayerY+rand(RANDER,-RANDER),sss,ang,4.7,99999,23);
		ObjRender_SetBlendType(obj, BLEND_SUBTRACT);
		ObjShot_SetEraseShot(obj,true);
		ObjShot_SetSpellFactor(obj,true);
		Obj_SetRenderPriorityI(obj, 51);
		ScaleShot(obj, 1.25, sss);
		
		let obj2 = CreatePlayerShotA1(GetPlayerX+rand(RANDER,-RANDER),GetPlayerY+rand(RANDER,-RANDER),sss,ang,0,99999,22);
		ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
		ObjShot_SetSpellFactor(obj2,true);
		ScaleShot(obj2, 1.75, sss);
		
		Woosher(ang);
		Set2DCameraFocusX(GetStgFrameWidth / 2 + 2*rand_degree);
		Set2DCameraFocusY(GetStgFrameHeight / 2 + 2*rand_degree);
		yield;
	}
    SetPlayerSpeed(PLAYERSPEED[0], PLAYERSPEED[1]);
	loop(75)
	{
		yield;
	}
	SE_PlayLen(BARRIERON);
	OnSpell=false;
	
}

task Woosher(angMove)
{
	let x = GetPlayerX;
	let y = GetPlayerY;
	let col = [255,64,255];
	let col2 = [64,255,64];
	let ang = angMove+90;
	let sclB = 1-2*round(rand(0,1));
	let spd = rand(30,40)*2;
	let xSpd = spd*cos(angMove);
	let ySpd = spd*sin(angMove);
	ascent(i in 0..30)
	{
		let scl = 1+min(1/3*i,1);
		let alf = 255 * min(1,1/10*i);
		x = GetPlayerX + xSpd * i;
		y = GetPlayerY + ySpd * i;
		ObjParticleList_SetAlpha(wooshArray,alf);
		ObjParticleList_SetScale(wooshArray,scl*1.1 *sclB,scl,0);
		ObjParticleList_SetPosition(wooshArray,x, y,0);
		ObjParticleList_SetColor(wooshArray,col[0],col[1],col[2]);
		ObjParticleList_SetAngleZ(wooshArray,ang);
		ObjParticleList_AddInstance(wooshArray);
		
		ObjParticleList_SetAlpha(wooshArray2,alf);
		ObjParticleList_SetScale(wooshArray2,scl *sclB,scl,0);
		ObjParticleList_SetPosition(wooshArray2,x, y,0);
		ObjParticleList_SetColor(wooshArray2,col2[0],col2[1],col2[2]);
		ObjParticleList_SetAngleZ(wooshArray2,ang);
		ObjParticleList_AddInstance(wooshArray2);
		
		y-=spd;
		yield;
	}
}

task ScaleShot(obj, scl, spd)
{
	let bitR = 1-2*round(rand(0,1));
	let t = 5;
	let ang = ObjMove_GetAngle(obj);
	
	let x = 0;
	let y = 0;
	let xSpd = spd*cos(ang);
	let ySpd = spd*sin(ang);
	ascent(i in 0..t)
	{
		if(!Obj_IsDeleted(obj))
		{
			ObjMove_SetX(obj, GetPlayerX + x);
			ObjMove_SetY(obj, GetPlayerY + y);
			ObjRender_SetScaleXYZ(obj, scl/(t-1)*i*bitR, 1.5+1.5/(t-1)*i, 0);
			
			x+=xSpd;
			y+=ySpd;
			yield;
		}
	}
	while(!Obj_IsDeleted(obj))
	{
		ObjMove_SetX(obj, GetPlayerX + x);
		ObjMove_SetY(obj, GetPlayerY + y);
	
		x+=xSpd;
		y+=ySpd;
		yield;
	}
}




