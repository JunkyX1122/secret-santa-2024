task TSpell
{
	FLASH;
	PlaySE(SPELLTHING);
	SpellMarisa;
	let amount = 3;
	loop(30)
	{
		SetCommonData("StateFaceShake",amount);
		amount-=3/30;
		yield;
	}
	SetCommonData("StateFaceShake",0);
}
task FLASH
{
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj,IMG_WHITECIRCLE_L);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(obj, 4);
	Obj_SetRenderPriorityI(obj,42);
	ObjRender_SetAngleZ(obj,0);
	let ALF=0;
	ObjRender_SetAlpha(obj,ALF);
	let scale =10;
	ObjRender_SetScaleXYZ(obj,scale,scale,scale);
	ObjPrim_SetDestCenter(obj,0,0,512,512);
	loop(20)
	{
		ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAlpha(obj,ALF);
		ALF+=255/20;
		yield;
	}
	loop(20)
	{
		ObjRender_SetPosition(obj,GetPlayerX,GetPlayerY,0);
		ObjRender_SetAlpha(obj,ALF);
		ALF-=255/20;
		yield;
	}
	Obj_Delete(obj);
}
let starArray;
let hexArray;
task InitialiseSpellArray
{
	starArray = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_STAR2, [0,0,256,256], BLEND_ADD_ARGB, 0.4);
	hexArray = CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_SPARK, [0,256,512,512], BLEND_ADD_ARGB, 0.4);
}
task SpellMarisa
{ 
	let notifyFormChange = 0;
	OnSpell=true;
	SetPlayerSpeed(1.0,0.4);
	SetPlayerInvincibilityFrame_Special(375);//???????
	let objManage = GetSpellManageObject();
	Obj_Delete(objManage);
	

	//PlaySE(SE_SPELL1);
	PlaySE(SE_SPELL2);
	let SparkAngle=270;
	ClimaxCircle(GetPlayerX,GetPlayerY-30,4,0.05,80,0,70,0,rand(0,360),255);
	SparkGrad;
	DARKNESS(0,0,0,BLEND_ALPHA,128,4,300);

	DarkSpark(0);

	loop(300)
	{
		notifyFormChange = GetCommonData("FINALBURST",[0,0,0])[0];
		yield;
	}
	SetPlayerSpeed(5.5,2);
	loop(75)
	{
		notifyFormChange = GetCommonData("FINALBURST",[0,0,0])[0];
		yield;
	}
	OnSpell=false;
	PlaySE(BARRIERON);

	task DarkSpark(adding)
	{
		DarkSparkShadow(adding);
		SparkAttack(adding);
		loop(10){yield;}
		TShake;
		T_DarkSparkShadow(adding);
		loop(10){yield;}
		DarkSparkMain(adding);
		SparkWave(adding);
		
		
	}

	task SparkAttack(adding)
	{
		let obj = ObjSpell_Create();
		ObjSpell_Regist(obj);
		ObjSpell_SetEraseShot(obj,false);
		ObjSpell_SetDamage(obj, 14*0.4);
		let ang = rand(0,360);
		let c = 0;
		let t = 0;
		loop(300)
		{
			if(notifyFormChange==0)
			{
				if(c%3==0)
				{
					ascent(i in 0..8)
					{
						Blur(ang+360/8*i,RainbowArray[t%7]);
					}
					t++;
				}
				ObjSpell_SetIntersectionLine(obj,GetPlayerX,GetPlayerY+64,GetPlayerX,GetPlayerY-512,128*1.3);
				ang+=4;
				c++;
				yield;
			}
		}
		Obj_Delete(obj);
	}
	task Blur(ang,col)
	{
		let dis = 0;

		let scl = 0.5;
		
		let alf = 0;
		let ang2 = 0;
		let am = 0;
		let xAng = cos(ang);
		let yAng = sin(ang);
		loop(10)
		{
			ObjParticleList_SetAlpha(starArray,alf);
			ObjParticleList_SetScale(starArray,scl,scl,0);
			ObjParticleList_SetPosition(starArray,GetPlayerX+dis*xAng,GetPlayerY+dis*yAng,0);
			ObjParticleList_SetColor(starArray,col[0],col[1],col[2]);
			ObjParticleList_SetAngleZ(starArray,ang);
			ObjParticleList_AddInstance(starArray);
			ang+=3;
			dis+=17*am;
			scl-=0.3/30;
			alf+=255/10;
			am+=1/30;
			yield;		
		}
		loop(20)
		{
			ObjParticleList_SetAlpha(starArray,alf);
			ObjParticleList_SetScale(starArray,scl,scl,0);
			ObjParticleList_SetPosition(starArray,GetPlayerX+dis*xAng,GetPlayerY+dis*yAng,0);
			ObjParticleList_SetColor(starArray,col[0],col[1],col[2]);
			ObjParticleList_SetAngleZ(starArray,ang);
			ObjParticleList_AddInstance(starArray);
			dis+=17*am;

			scl-=0.3/30;
			alf-=255/20;
			am+=1/30;
			yield;		
		}
	}
	task SparkWave(adding)
	{
		let Color=RainbowArray;
		let t=0;
		loop(24*2)
		{
			if(notifyFormChange==0)
			{
				WaveEffect(Color[t%7],1);
				t++;
				loop(2)
				{
					WaveEffect(Color[t%7],0.3);
					loop(3)
					{
						yield;
					}
				}
			}
		}

		task WaveEffect(colz,adder)
		{


			//let Zangle=-num*60;
			let Alpha=1;
			let AlphaMax=Alpha;
			let R=colz[0];
			let G=colz[1];
			let B=colz[2];

			let WaveMoveDistance=0;
			let WaveSpeed=20;
			let Scale=0;

			let Range=0;

			let objEraze = ObjSpell_Create();
			ObjSpell_Regist(objEraze);
			ObjSpell_SetDamage(objEraze, 0);
			
			if(adder<1)
			{
				WaveMoveDistance-=0;
			}
			else
			{
				loop(9)
				{
					ObjParticleList_SetScale(hexArray,Scale,Scale,0);

					ObjParticleList_SetPosition(hexArray,GetPlayerX+(WaveMoveDistance-Range)*cos(SparkAngle+adding),GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding),0);
					ObjParticleList_SetColor(hexArray,R*Alpha,G*Alpha,B*Alpha);
					ObjParticleList_SetAngleZ(hexArray,-SparkAngle+(90)+adding);
					ObjParticleList_AddInstance(hexArray);
					let x = GetPlayerX+(WaveMoveDistance-Range)*cos(SparkAngle+adding);
					let y = GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
					ObjSpell_SetIntersectionLine(objEraze,x+128*cos(SparkAngle+(90+adding)),y+128*sin(SparkAngle+(90+adding)),x-128*cos(SparkAngle+(90+adding)),y-128*sin(SparkAngle+90+(adding)),128*3.5);
					
					WaveMoveDistance+=WaveSpeed*adder;
					Scale+=(0.6/9)*1.5;
					
					yield;
				}
			}
			if(adder<1)
			{
				let x = GetPlayerX;
				let y = GetPlayerY;
				let am = 1;
				let alsin = 0;
				loop(30)
				{
					ObjParticleList_SetScale(hexArray,Scale,Scale,0);

					ObjParticleList_SetColor(hexArray,R*Alpha/2,G*Alpha/2,B*Alpha/2);
					let x2 = x+(WaveMoveDistance-Range)*cos(SparkAngle+adding);
					let y2 = y+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
					ObjParticleList_SetPosition(hexArray,x2,y2,0);
					ObjParticleList_SetAngleZ(hexArray,-SparkAngle+(90)+adding);
					ObjParticleList_AddInstance(hexArray);
					
					ObjSpell_SetIntersectionLine(objEraze,x2+128*cos(SparkAngle+(90)+adding),y2+128*sin(SparkAngle+(90)+adding),x2-128*cos(SparkAngle+(90)+adding),y2-128*sin(SparkAngle+90+adding),128*3);
					WaveMoveDistance+=WaveSpeed*adder;
					WaveSpeed+=0.2;
					Scale+=(0.4/9)*1.5*am;
					Alpha=1*sin(alsin);
					alsin+=180/30;
					am-=1/30;
					yield;
				}
			}
			else
			{
				loop(30)
				{
					let x = GetPlayerX+(WaveMoveDistance-Range)*cos(SparkAngle+adding);
					let y = GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
					ObjParticleList_SetScale(hexArray,Scale,Scale,0);
					ObjParticleList_SetColor(hexArray,R*Alpha,G*Alpha,B*Alpha);
					ObjParticleList_SetPosition(hexArray,x,y,0);
					ObjParticleList_SetAngleZ(hexArray,-SparkAngle+(90)+adding);
					ObjParticleList_AddInstance(hexArray);
					ObjSpell_SetIntersectionLine(objEraze,x+128*cos(SparkAngle+(90)+adding),y+128*sin(SparkAngle+(90)+adding),x-128*cos(SparkAngle+(90)+adding),y-128*sin(SparkAngle+90+adding),128*3);
					WaveMoveDistance+=WaveSpeed*adder;
					yield;
				}
			}

			Obj_Delete(objEraze);
		}
	}

	task SparkGrad
	{
		let SparkAngle2 = SparkAngle;
		loop(310)
		{
			yield;
		}
	}

	task DarkSparkMain(adding)
	{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SPARK);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,43);
		ObjRender_SetAngleZ(obj,0);

		ObjPrim_SetDestCenter(obj,1,0,512,256);

		ObjPrim_SetVertexPosition(obj, 0, -1, -128, -0);
		ObjPrim_SetVertexPosition(obj, 1, 512, -128, -0);
		ObjPrim_SetVertexPosition(obj, 2, 512, 128, 0);
		ObjPrim_SetVertexPosition(obj, 3, 1, 128, 0);

		ObjRender_SetAngleZ(obj,SparkAngle+(90+adding));

		//let Zangle=-num*60;
		let Alpha=192;
		ObjRender_SetAlpha(obj,Alpha);

		let R=128;
		let G=192;
		let B=255;
		ObjRender_SetColor(obj,R,G,B);

		let ScaleY=0;
		let ScaleYSpeed=(0.08/20);
		let Range=0;

		loop(20)
		{
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
		//	Alpha+=1/20;
			ScaleY+=(ScaleYSpeed)*1.5;
			ScaleYSpeed+=0.08/20;
			yield;
		}
		loop(260)
		{
			if(notifyFormChange==0)
			{
				ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
				ObjRender_SetAngleZ(obj,SparkAngle+(adding));
				yield;
			}
		}
		loop(10)
		{
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY,1);
		//	Alpha-=1/10;
			ScaleY-=0.8/10;
			yield;
		}
		Obj_Delete(obj);	
	}

	task DarkSparkShadow(adding)
	{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SPARK);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,41);
		ObjRender_SetAngleZ(obj,0);

		ObjPrim_SetDestCenter(obj,1,0,512,256);

		ObjPrim_SetVertexPosition(obj, 0, -1, -128, -0);
		ObjPrim_SetVertexPosition(obj, 1, 512, -128, -0);
		ObjPrim_SetVertexPosition(obj, 2, 512, 128, 0);
		ObjPrim_SetVertexPosition(obj, 3, 1, 128, 0);

		ObjRender_SetAngleZ(obj,270);

		//let Zangle=-num*60;
		let Alpha=0;
		let AlphaMax=Alpha;
		let R=255;
		let G=255;
		let B=255;

		let ScaleY=0;
		let ScaleYSpeed=0.095/20;
		let Range=0;
		loop(20)
		{
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY*1.5,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha+=1/20;
			ScaleY+=ScaleYSpeed;
			ScaleYSpeed+=0.095/20;
			yield;
		}
		loop(280)
		{
			if(notifyFormChange==0)
			{
				ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
				ObjRender_SetAngleZ(obj,SparkAngle+(adding));
				yield;
			}
		}
		loop(10)
		{
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha-=1/10;
			ScaleY-=0.95/10;
			yield;
		}
		Obj_Delete(obj);	
	}

	task T_DarkSparkShadow(adding)
	{
		let Color=RainbowArray;
		let t=0;
		loop(18)
		{
			if(notifyFormChange==0)
			{
				DarkSparkShadow2(Color[t%7]);
				t++;
				loop(15){yield;}
			}
		}

		task DarkSparkShadow2(color)
		{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SPARK);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,42);
		ObjRender_SetAngleZ(obj,0);

		ObjPrim_SetDestCenter(obj,1,0,512,256);

		ObjPrim_SetVertexPosition(obj, 0, -0, -128, -0);
		ObjPrim_SetVertexPosition(obj, 1, 512, -128, -0);
		ObjPrim_SetVertexPosition(obj, 2, 512, 128, 0);
		ObjPrim_SetVertexPosition(obj, 3, 0, 128, 0);

		ObjRender_SetAngleZ(obj,270);

		//let Zangle=-num*60;
		let Alpha=0;
		let AlphaMax=Alpha;
		let R=color[0];
		let G=color[1];
		let B=color[2];

		let ScaleY=0;
		let ScaleYSpeed=0.095/20;
		let Range=0;
		loop(20)
		{
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY*1.5,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha+=1/20;
			ScaleY+=ScaleYSpeed;
			ScaleYSpeed+=0.095/20;
			yield;
		}
		loop(20)
		{
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY*1.5,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha-=1/20;
		//	ScaleY-=0.95/20;
			yield;
		}
		Obj_Delete(obj);	
		}
	}

	task TShake()
	{
		let am = 7;
		loop(315-60)
		{
			Set2DCameraFocusX(GetStgFrameWidth / 2 + rand(am,-am));
			Set2DCameraFocusY(GetStgFrameHeight / 2 + rand(am,-am));
			yield;
			Reset2DCamera();
		}
		descent(i in 0..60)
		{
			am = 7/60*i;
			Set2DCameraFocusX(GetStgFrameWidth / 2 + rand(am,-am));
			Set2DCameraFocusY(GetStgFrameHeight / 2 + rand(am,-am));
			yield;
			Reset2DCamera();
		}
		
	}
}
task SpellMarisa2
{ 
	let XBEAM = GetCommonData("FINALBURST",[0,0,0])[1];
	let YBEAM = GetCommonData("FINALBURST",[0,0,0])[2];
	let SIZELENGTH = 0;
	let RATIO = 1;



	//PlaySE(SE_SPELL1);
	//PlaySE(SE_SPELL2);
	let SparkAngle=270;
	SparkGrad;

	DarkSpark(0);

	while(GetCommonData("FINALBURST",[0,0,0])[0]==1)
	{
		XBEAM = GetCommonData("FINALBURST",[0,0,0])[1];
		YBEAM = GetCommonData("FINALBURST",[0,0,0])[2];
		SIZELENGTH = GetStgFrameHeight-YBEAM;

		SetPlayerSpeed(1.0,0.4);
		yield;
	}
	SetPlayerSpeed(5.5,2);
	

	task DarkSpark(adding)
	{
		DarkSparkShadow(adding);
		SparkAttack(adding);
		loop(10){yield;}
		T_DarkSparkShadow(adding);
		loop(10){yield;}
		DarkSparkMain(adding);
		SparkWave(adding);
		
		
	}

	task SparkAttack(adding)
	{
		let obj = ObjSpell_Create();
		let ang = rand(0,360);
		let c = 0;
		let t = 0;
		while(GetCommonData("FINALBURST",[0,0,0])[0]==1)
		{
			if(c%3==0)
			{
				ascent(i in 0..8)
				{
					Blur(ang+360/8*i,RainbowArray[t%7]);
				}
				t++;
			}
			ang+=4;
			c++;
			yield;
		}
		Obj_Delete(obj);
	}
	task Blur(ang,col)
	{
		let dis = 0;

		let scl = 0.5;
		
		let alf = 0;
		let ang2 = 0;
		let am = 0;
		loop(10)
		{
			ObjParticleList_SetAlpha(starArray,alf);
			ObjParticleList_SetScale(starArray,scl,scl,0);
			ObjParticleList_SetPosition(starArray,GetPlayerX+dis*cos(ang),GetPlayerY+dis*sin(ang),0);
			ObjParticleList_SetColor(starArray,col[0],col[1],col[2]);
			ObjParticleList_SetAngleZ(starArray,ang);
			ObjParticleList_AddInstance(starArray);
			ang+=3;
			dis+=17*am;
			scl-=0.3/30;
			alf+=255/10;
			am+=1/30;
			yield;		
		}
		loop(20)
		{
			ObjParticleList_SetAlpha(starArray,alf);
			ObjParticleList_SetScale(starArray,scl,scl,0);
			ObjParticleList_SetPosition(starArray,GetPlayerX+dis*cos(ang),GetPlayerY+dis*sin(ang),0);
			ObjParticleList_SetColor(starArray,col[0],col[1],col[2]);
			ObjParticleList_SetAngleZ(starArray,ang);
			ObjParticleList_AddInstance(starArray);
			dis+=17*am;

			scl-=0.3/30;
			alf-=255/20;
			am+=1/30;
			yield;		
		}
	}
	task SparkWave(adding)
	{
		let Color=RainbowArray;
		let t=0;
		while(GetCommonData("FINALBURST",[0,0,0])[0]==1)
		{
			WaveEffect(Color[t%7],1);
			t++;
			loop(2)
			{
				WaveEffect(Color[t%7],0.3);
				loop(3)
				{
					yield;
				}
			}
		}

		task WaveEffect(colz,adder)
		{


			//let Zangle=-num*60;
			let Alpha=1;
			let AlphaMax=Alpha;
			let R=colz[0];
			let G=colz[1];
			let B=colz[2];

			let WaveMoveDistance=0;
			let WaveSpeed=20;
			let Scale=0;

			let Range=0;

			if(adder<1)
			{
				WaveMoveDistance-=0;
			}
			else
			{
				loop(9)
				{
					ObjParticleList_SetScale(hexArray,Scale,Scale,0);

					ObjParticleList_SetPosition(hexArray,GetPlayerX+(WaveMoveDistance-Range)*cos(SparkAngle+adding),GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding),0);
					ObjParticleList_SetColor(hexArray,R*Alpha,G*Alpha,B*Alpha);
					ObjParticleList_SetAngleZ(hexArray,-SparkAngle+(90)+adding);
					ObjParticleList_AddInstance(hexArray);
					let x = GetPlayerX+(WaveMoveDistance-Range)*cos(SparkAngle+adding);
					let y = GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
					//ObjSpell_SetIntersectionLine(objEraze,x+128*cos(SparkAngle+(90+adding)),y+128*sin(SparkAngle+(90+adding)),x-128*cos(SparkAngle+(90+adding)),y-128*sin(SparkAngle+90+(adding)),128*3.5);
					
					WaveMoveDistance+=WaveSpeed*adder;
					Scale+=(0.6/9)*1.5;
					
					yield;
				}
			}
			if(adder<1)
			{
				let x = GetPlayerX;
				let y = GetPlayerY;
				let am = 1;
				let alsin = 0;
				loop(30)
				{
					ObjParticleList_SetScale(hexArray,Scale,Scale,0);

					ObjParticleList_SetColor(hexArray,R*Alpha/2,G*Alpha/2,B*Alpha/2);
					let x2 = x+(WaveMoveDistance-Range)*cos(SparkAngle+adding);
					let y2 = y+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
					ObjParticleList_SetPosition(hexArray,x2,y2,0);
					ObjParticleList_SetAngleZ(hexArray,-SparkAngle+(90)+adding);
					ObjParticleList_AddInstance(hexArray);
					
					//ObjSpell_SetIntersectionLine(objEraze,x2+128*cos(SparkAngle+(90)+adding),y2+128*sin(SparkAngle+(90)+adding),x2-128*cos(SparkAngle+(90)+adding),y2-128*sin(SparkAngle+90+adding),128*3);
					WaveMoveDistance+=WaveSpeed*adder;
					WaveSpeed+=0.2;
					Scale+=(0.4/9)*1.5*am;
					Alpha=1*sin(alsin);
					alsin+=180/30;
					am-=1/30;
					yield;
				}
			}
			else
			{
				let y = GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
				while(y>YBEAM)
				{
					let x = GetPlayerX+(WaveMoveDistance-Range)*cos(SparkAngle+adding);
						y = GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
					ObjParticleList_SetScale(hexArray,Scale,Scale,0);
					ObjParticleList_SetColor(hexArray,R*Alpha,G*Alpha,B*Alpha);
					ObjParticleList_SetPosition(hexArray,x,y,0);
					ObjParticleList_SetAngleZ(hexArray,-SparkAngle+(90)+adding);
					ObjParticleList_AddInstance(hexArray);
					//ObjSpell_SetIntersectionLine(objEraze,x+128*cos(SparkAngle+(90)+adding),y+128*sin(SparkAngle+(90)+adding),x-128*cos(SparkAngle+(90)+adding),y-128*sin(SparkAngle+90+adding),128*3);
					WaveMoveDistance+=WaveSpeed*adder;
					yield;
				}
				descent(o in 0..10)
				{
					let x = GetPlayerX+(WaveMoveDistance-Range)*cos(SparkAngle+adding);
						y = GetPlayerY+(WaveMoveDistance-Range)*sin(SparkAngle+adding);
					ObjParticleList_SetScale(hexArray,Scale,Scale,0);
					Alpha = 1/10*o;
					ObjParticleList_SetColor(hexArray,R*Alpha,G*Alpha,B*Alpha);
					ObjParticleList_SetPosition(hexArray,x,y,0);
					ObjParticleList_SetAngleZ(hexArray,-SparkAngle+(90)+adding);
					ObjParticleList_AddInstance(hexArray);
					//ObjSpell_SetIntersectionLine(objEraze,x+128*cos(SparkAngle+(90)+adding),y+128*sin(SparkAngle+(90)+adding),x-128*cos(SparkAngle+(90)+adding),y-128*sin(SparkAngle+90+adding),128*3);
					WaveMoveDistance+=WaveSpeed*adder*1/10*o;
					yield;
				}
			}

			
		}
	}

	task SparkGrad
	{
		let SparkAngle2 = SparkAngle;

	}

	task DarkSparkMain(adding)
	{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SPARK);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,43);
		ObjRender_SetAngleZ(obj,0);

		ObjPrim_SetDestCenter(obj,1,0,512,256);

		ObjPrim_SetVertexPosition(obj, 0, -1, -128, -0);
		ObjPrim_SetVertexPosition(obj, 1, 512, -128, -0);
		ObjPrim_SetVertexPosition(obj, 2, 512, 128, 0);
		ObjPrim_SetVertexPosition(obj, 3, 1, 128, 0);

		ObjRender_SetAngleZ(obj,SparkAngle+(90+adding));

		//let Zangle=-num*60;
		let Alpha=192;
		ObjRender_SetAlpha(obj,Alpha);

		let R=128;
		let G=192;
		let B=255;
		ObjRender_SetColor(obj,R,G,B);

		let ScaleY=0;
		let ScaleYSpeed=(0.08/20);
		let Range=0;

		loop(20)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
		//	Alpha+=1/20;
			ScaleY+=(ScaleYSpeed)*1.5;
			ScaleYSpeed+=0.08/20;
			yield;
		}
		while(GetCommonData("FINALBURST",[0,0,0])[0]==1)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			yield;
		}
		loop(10)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY,1);
		//	Alpha-=1/10;
			ScaleY-=0.8/10;
			yield;
		}
		Obj_Delete(obj);	
	}

	task DarkSparkShadow(adding)
	{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SPARK);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,41);
		ObjRender_SetAngleZ(obj,0);

		ObjPrim_SetDestCenter(obj,1,0,512,256);

		ObjPrim_SetVertexPosition(obj, 0, -1, -128, -0);
		ObjPrim_SetVertexPosition(obj, 1, 512, -128, -0);
		ObjPrim_SetVertexPosition(obj, 2, 512, 128, 0);
		ObjPrim_SetVertexPosition(obj, 3, 1, 128, 0);

		ObjRender_SetAngleZ(obj,270);

		//let Zangle=-num*60;
		let Alpha=0;
		let AlphaMax=Alpha;
		let R=255;
		let G=255;
		let B=255;

		let ScaleY=0;
		let ScaleYSpeed=0.095/20;
		let Range=0;
		loop(20)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY*1.5,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha+=1/20;
			ScaleY+=ScaleYSpeed;
			ScaleYSpeed+=0.095/20;
			yield;
		}
		while(GetCommonData("FINALBURST",[0,0,0])[0]==1)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			yield;
		}
		loop(10)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha-=1/10;
			ScaleY-=0.95/10;
			yield;
		}
		Obj_Delete(obj);	
	}

	task T_DarkSparkShadow(adding)
	{
		let Color=RainbowArray;
		let t=0;
		while(GetCommonData("FINALBURST",[0,0,0])[0]==1)
		{
			DarkSparkShadow2(Color[t%7]);
			t++;
			loop(15){yield;}
		}

		task DarkSparkShadow2(color)
		{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SPARK);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,42);
		ObjRender_SetAngleZ(obj,0);

		ObjPrim_SetDestCenter(obj,1,0,512,256);

		ObjPrim_SetVertexPosition(obj, 0, -0, -128, -0);
		ObjPrim_SetVertexPosition(obj, 1, 512, -128, -0);
		ObjPrim_SetVertexPosition(obj, 2, 512, 128, 0);
		ObjPrim_SetVertexPosition(obj, 3, 0, 128, 0);

		ObjRender_SetAngleZ(obj,270);

		//let Zangle=-num*60;
		let Alpha=0;
		let AlphaMax=Alpha;
		let R=color[0];
		let G=color[1];
		let B=color[2];

		let ScaleY=0;
		let ScaleYSpeed=0.095/20;
		let Range=0;
		loop(20)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY*1.5,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha+=1/20;
			ScaleY+=ScaleYSpeed;
			ScaleYSpeed+=0.095/20;
			yield;
		}
		loop(20)
		{
			ObjPrim_SetVertexPosition(obj, 1, SIZELENGTH/1.5, -128, -0);
			ObjPrim_SetVertexPosition(obj, 2, SIZELENGTH/1.5, 128, 0);
			ObjRender_SetPosition(obj,GetPlayerX-Range*cos(SparkAngle),GetPlayerY-Range*sin(SparkAngle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
			ObjRender_SetScaleXYZ(obj,1.5,ScaleY*1.5,1);
			ObjRender_SetAngleZ(obj,SparkAngle+(adding));
			Alpha-=1/20;
		//	ScaleY-=0.95/20;
			yield;
		}
		Obj_Delete(obj);	
		}
	}


}







