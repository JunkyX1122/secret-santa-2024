
task TShotAll {
    TShotViivi;
    TShot2Viivi;
}
let lightArray;
let shotEffect1Array;

let MainDamage = 3.5;
	
task TShotViivi {
    lightArray =
        CreateParticleListRect(OBJ_PARTICLE_LIST_2D, IMG_LIGHT,
                               [ 0, 0, 512, 512 ], BLEND_ADD_ARGB, 0.43);
    shotEffect1Array = CreateParticleListRect(
        OBJ_PARTICLE_LIST_2D, IMG_SHOT, [ 49, 97, 63, 128 ], BLEND_ALPHA, 0.43);
		
    let pShot = false;
    ShotCheck;
    let Speed = 40.5;
    let DamageRate = 1 * 2;
	let c = 0;
	let iniDam = MainDamage;
    loop {
        while (!pShot) {
            yield;
        }
        if (IsPlayerSpellActive) {
            DamageRate = 0.5 * 2;
        } else {
            DamageRate = 1.0 * 2;
        }
        MainDamage = debugDamageRate ? 300 : iniDam;
        
		let idd = 20;
		if(GetVirtualKeyState(VK_SLOWMOVE) != KEY_FREE) { idd = 21; }
		MainShot(GetPlayerX(), GetPlayerY(), Speed, 270, MainDamage * 3 * 0.8, idd);
		
		SE_PlayLen(SE_SHOT, 50);
		c++;
        loop(3) {
            yield;
        }
    }

    task ShotCheck {
        loop {
            if ((GetVirtualKeyState(VK_SHOT) == KEY_PUSH ||
                 GetVirtualKeyState(VK_SHOT) == KEY_HOLD) &&
                GetPlayerState == STATE_NORMAL && IsPermitPlayerShot &&
                SELECT_PLAYER == SELECT_MARISA && !OnSpell) {
                pShot = true;

            } else {
                pShot = false;
            }
            yield;
        }
    }

    
}
task MainShot(x, y, speed, angle, damage, id) {
        let obj = CreatePlayerShotA1(x, y, speed, angle, damage, 1, id);
        // ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
        let scale = 1;
        ObjRender_SetScaleXYZ(obj, scale, scale, scale);
        Obj_SetRenderPriorityI(obj, 40);
    }
	
task MainShot2(x, y, speed, angle, damage, id) {
	let obj = CreatePlayerShotA1(x, y, 10, angle, damage, 1, id);
	// ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	let scale = 1;
	ObjRender_SetScaleXYZ(obj, scale/3, scale, scale);
	Obj_SetRenderPriorityI(obj, 40);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetAlpha(obj, 96);
	ObjMove_SetAcceleration(obj, (speed-10)/10);
	ObjMove_SetMaxSpeed(obj, speed);
}
task TShot2Viivi {  // サブ
    let pShot = false;

    ShotCheck;
	let c = 0;
    loop {
        while (!pShot) {
            yield;
        }

		let sprd = 7;
		if(GetVirtualKeyState(VK_SLOWMOVE) != KEY_FREE)
		{
			sprd = 3.5;
		}
		ascent(i in 0..3)
		{
			MainShot2(OptionX[0]+10*cos(TazueAng), OptionY[0]+10*sin(TazueAng), rand(20,30), TazueAng+rand(sprd,-sprd), MainDamage/3 * 1.2, 22);
		}
		
    
        c++;
        loop(1) { yield; }
    }

    task ShotCheck {
        loop {
            if ((GetVirtualKeyState(VK_SHOT) == KEY_PUSH ||
                 GetVirtualKeyState(VK_SHOT) == KEY_HOLD) &&
                GetPlayerState == STATE_NORMAL && IsPermitPlayerShot &&
                SELECT_PLAYER == SELECT_MARISA && !OnSpell) {
                pShot = true;

            } else {
                pShot = false;
            }
            yield;
        }
    }
}